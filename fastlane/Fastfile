# frozen_string_literal: true

fastlane_version '2.0'

default_platform :ios

# Paths that are re-used across multiple lanes
PROJECT_ROOT_FOLDER = File.dirname(File.expand_path(__dir__))
APP_STORE_METADATA_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'metadata')
SECRETS_FOLDER = File.join(Dir.home, '.configure', 'pocketcasts-ios', 'secrets')
ASC_KEY_PATH = File.join(SECRETS_FOLDER, 'app_store_connect_fastlane_api_key.json')
VERSION_XCCONFIG_PATH = File.join(PROJECT_ROOT_FOLDER, 'config', 'Version.xcconfig')
SPM_CACHE_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'vendor', 'spm')
RESOURCES_FOLDER = File.join(PROJECT_ROOT_FOLDER, 'podcasts', 'Resources')
RELEASE_NOTES_SOURCE_PATH = File.join(PROJECT_ROOT_FOLDER, 'RELEASE-NOTES.txt')
EXTRACTED_RELEASE_NOTES_PATH = File.join(RESOURCES_FOLDER, 'release_notes.txt')

GHHELPER_REPO = 'Automattic/pocket-casts-ios'

TEAM_ID = 'PZYM8XX95Q'

MAIN_BUNDLE_IDENTIFIERS = [
  'au.com.shiftyjelly.podcasts',
  'au.com.shiftyjelly.podcasts.NotificationExtension',
  'au.com.shiftyjelly.podcasts.NotificationContent',
  'au.com.shiftyjelly.podcasts.watchkitapp',
  'au.com.shiftyjelly.podcasts.watchkitapp.watchkitextension',
  'au.com.shiftyjelly.podcasts.PodcastsIntents',
  'au.com.shiftyjelly.podcasts.PodcastsIntentsUI',
  'au.com.shiftyjelly.podcasts.WidgetExtension'
].freeze

# URL of the GlotPress project containing the strings used in the app
GLOTPRESS_APP_STRINGS_PROJECT_URL = 'https://translate.wordpress.com/projects/pocket-casts/ios/'
# URL of the GlotPress project containing App Store Connect metadata
GLOTPRESS_APP_STORE_METADATA_PROJECT_URL = 'https://translate.wordpress.com/projects/pocket-casts/ios/release-notes/'

# Mapping of all locales which can be used for AppStore metadata
# (Glotpress code => AppStore Connect code)
#
# TODO: Replace with `LocaleHelper` once provided by release toolkit
# (https://github.com/wordpress-mobile/release-toolkit/pull/296)
GLOTPRESS_TO_ASC_METADATA_LOCALE_CODES = {
  'de' => 'de-DE',
  'es' => 'es-ES',
  'fr' => 'fr-FR',
  'it' => 'it',
  'ja' => 'ja',
  'nl' => 'nl-NL',
  'pt-br' => 'pt-BR',
  'ru' => 'ru',
  'sv' => 'sv',
  'zh-cn' => 'zh-Hans',
  'zh-tw' => 'zh-Hant'
}.freeze

before_all do
  # This is necessary for `match` to work correctly in CI. When running
  # locally, it has no effect so it's safe to run it before all lanes.
  setup_ci

  # Decrypt the secrets. This is redundant on dev machines most of the time,
  # but it has such a negligible overhead that it's worth running it here to
  # keep the individual lanes cleaner.
  configure_apply
end

platform :ios do
  # Unfortunately, release toolkit still relies on certain settings being set in the environment
  ENV['PROJECT_NAME'] = 'podcasts'
  ENV['PROJECT_ROOT_FOLDER'] = "#{PROJECT_ROOT_FOLDER}/"
  ENV['PUBLIC_CONFIG_FILE'] = VERSION_XCCONFIG_PATH
  ENV['GHHELPER_REPO'] = GHHELPER_REPO

  ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '120'

  desc 'Run the unit tests'
  lane :test do
    load_ci_spm_cache

    run_tests(scheme: 'pocketcasts')

    save_ci_spm_cache
  end

  desc 'Submit a new Beta Build to Apple TestFlight'
  lane :beta do
    ENV['DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS'] = '-t Aspera'

    configure_code_signing

    gym(scheme: 'pocketcasts',
        include_bitcode: false,
        include_symbols: true,
        clean: true)

    secrets_dir = File.join(Dir.home, '.configure', 'pocketcasts-ios', 'secrets')
    pilot(skip_submission: true,
          api_key_path: File.join(secrets_dir, 'app_store_connect_fastlane_api_key.json'),
          skip_waiting_for_build_processing: true)

    sh 'cd .. && make upload_dsyms'
    clean_build_artifacts
    increment_version_on_config
  end

  desc 'Build the project only'
  lane :build do
    # CI has its own mechanism to setup the Ruby gems and CocoaPods
    unless is_ci
      bundle_install
      cocoapods
    end

    configure_code_signing
    load_ci_spm_cache

    gym(
      scheme: 'pocketcasts',
      include_bitcode: false,
      cloned_source_packages_path: SPM_CACHE_FOLDER,
      clean: true
    )
    clean_build_artifacts
    sh(command: 'rm -fr ~/Library/Developer/Xcode/Archives/*')

    save_ci_spm_cache
  end

  desc 'This lane downloads and configures the code signing certificates and profiles.'
  lane :configure_code_signing do
    match(
      type: 'appstore',
      team_id: TEAM_ID,
      api_key_path: ASC_KEY_PATH,
      app_identifier: MAIN_BUNDLE_IDENTIFIERS,
      # This might turn out to be useful in the future
      # template_name: 'CarPlay audio app (CarPlay + Media Player frameworks)iOS (Dist)'

      storage_mode: 'google_cloud',
      google_cloud_bucket_name: 'a8c-fastlane-match',
      google_cloud_keys_file: File.join(SECRETS_FOLDER, 'google_cloud_keys.json'),

      readonly: true
    )
  end

  # Increment the value of `VERSION_LONG` from the `Version.xcconfig` file
  #
  def increment_version_on_config
    fastlane_require 'Xcodeproj'

    # Get the current build version, and update it if needed
    versions = Xcodeproj::Config.new(File.new(VERSION_XCCONFIG_PATH)).to_hash
    build_number = versions['VERSION_LONG'].to_i + 1
    UI.message("Updating build version to #{build_number}")
    versions['VERSION_LONG'] = build_number
    new_config = Xcodeproj::Config.new(versions)
    new_config.save_as(Pathname.new(VERSION_XCCONFIG_PATH))
  end

  #####################################################################################
  # Release Lanes
  #####################################################################################

  #####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc 'Creates a new release branch from the current trunk'
  lane :code_freeze do |options|
    ios_codefreeze_prechecks(options)

    ios_bump_version_release(skip_deliver: true, skip_glotpress: true)
    new_version = ios_get_app_version
    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: RELEASE_NOTES_SOURCE_PATH,
      extracted_notes_file_path: EXTRACTED_RELEASE_NOTES_PATH
    )
    ios_update_release_notes(new_version: new_version)
    setbranchprotection(repository: GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository: GHHELPER_REPO, milestone: new_version)
  end

  #####################################################################################
  # complete_code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the initial steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane complete_code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane complete_code_freeze
  # bundle exec fastlane complete_code_freeze skip_confirm:true
  #####################################################################################
  desc 'Creates a new release branch from the current trunk'
  lane :complete_code_freeze do |options|
    ios_completecodefreeze_prechecks(options)
    # For Pocket Casts the strings are grab on a weekly basis from `trunk`
    # generate_strings_file_for_glotpress

    after_confirming_push do
      push_to_git_remote(tags: false)
      trigger_beta_build(branch_to_build: "release/#{ios_get_app_version}")
    end
  end

  #####################################################################################
  # trigger_beta_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a beta build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_beta_build [branch_to_build:<branch_name>]
  #
  #####################################################################################
  lane :trigger_beta_build do |options|
    trigger_buildkite_release_build(branch: options[:branch_to_build], beta: true)
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata, bump final version number,
  # remove branch protection and close milestone, then trigger the final release on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc 'Trigger the final release build on CI'
  lane :finalize_release do |options|
    if ios_current_branch_is_hotfix
      UI.user_error!('To finalize a hotfix, please use the finalize_hotfix_release lane instead')
    end

    ios_finalize_prechecks(options)

    UI.message('Checking app strings translation status...')
    check_translation_progress(
      glotpress_url: GLOTPRESS_APP_STRINGS_PROJECT_URL,
      abort_on_violations: false
    )

    UI.message('Checking release notes strings translation status...')
    check_translation_progress(
      glotpress_url: GLOTPRESS_APP_STORE_METADATA_PROJECT_URL,
      abort_on_violations: false
    )

    download_localized_strings_and_metadata_from_glotpress
    lint_localizations
    ios_bump_version_beta

    # Wrap up
    version = ios_get_app_version
    removebranchprotection(repository: GHHELPER_REPO, branch: "release/#{version}")
    setfrozentag(repository: GHHELPER_REPO, milestone: version, freeze: false)
    create_new_milestone(repository: GHHELPER_REPO)
    close_milestone(repository: GHHELPER_REPO, milestone: version)

    # Start the build
    trigger_release_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # build_and_upload_app_store_connect
  # -----------------------------------------------------------------------------------
  # Builds the Pocket Cast app and uploads it to TestFlight, for beta-testing or final release
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_app_store_connect [skip_confirm:<skip confirm>]
  # [create_release:<Create release on GH>] [beta_release:<intermediate beta?>]
  #
  # @option [Boolean] skip_confirm (default: false) If true, avoids any interactive prompt
  # @option [Boolean] skip_prechecks (default: false) If true, don't run the ios_build_prechecks and ios_build_preflight
  # @option [Boolean] create_release If true, creates a GitHub Release draft after the upload, with zipped xcarchive
  # @option [Boolean] beta_release If true, the GitHub release will be marked as being a pre-release
  #
  #####################################################################################
  desc 'Builds and uploads for distribution to App Store Connect'
  lane :build_and_upload_app_store_connect do |options|
    ios_build_prechecks(skip_confirm: options[:skip_confirm], external: true) unless options[:skip_prechecks]
    ios_build_preflight unless options[:skip_prechecks]

    configure_code_signing

    gym(
      scheme: 'pocketcasts',
      include_bitcode: false,
      include_symbols: true,
      clean: true,
      export_options: { method: 'app-store' }
    )

    secrets_dir = File.join(Dir.home, '.configure', 'pocketcasts-ios', 'secrets')
    testflight(
      skip_waiting_for_build_processing: true,
      team_id: TEAM_ID,
      api_key_path: File.join(secrets_dir, 'app_store_connect_fastlane_api_key.json')
    )

    sh 'cd .. && make upload_dsyms'

    next unless options[:create_release]

    archive_zip_path = File.join(PROJECT_ROOT_FOLDER, 'PocketCasts.xcarchive.zip')
    zip(path: lane_context[SharedValues::XCODEBUILD_ARCHIVE], output_path: archive_zip_path)

    version = ios_get_app_version
    create_release(
      repository: GHHELPER_REPO,
      version: version,
      release_notes_file_path: File.join(RESOURCES_FOLDER, 'release_notes.txt'),
      release_assets: archive_zip_path.to_s,
      prerelease: options[:beta_release]
    )

    FileUtils.rm_rf(archive_zip_path)
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc 'Updates a release branch for a new beta release'
  lane :new_beta_release do |options|
    ios_betabuild_prechecks(options)
    download_localized_strings_and_metadata_from_glotpress
    lint_localizations
    ios_bump_version_beta
    version = ios_get_app_version
    trigger_beta_build(branch_to_build: "release/#{version}")
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane creates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version:<version>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version:10.6.1
  # bundle exec fastlane new_hotfix_release skip_confirm:true version:10.6.1
  #####################################################################################
  desc 'Creates a new hotfix branch for the given version:x.y.z. The branch will be cut from the tag x.y of the previous release'
  lane :new_hotfix_release do |options|
    prev_ver = ios_hotfix_prechecks(options)
    ios_bump_version_hotfix(previous_version: prev_ver, version: options[:version])
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release skip_confirm:true
  #####################################################################################
  desc 'Performs the final checks and triggers a release build for the hotfix in the current branch'
  lane :finalize_hotfix_release do |options|
    after_confirming_push do
      ios_finalize_prechecks(options)
      version = ios_get_app_version
      trigger_release_build(branch_to_build: "release/#{version}")
    end
  end

  desc 'Downloads localized strings and App Store Connect metadata from GlotPress'
  lane :download_localized_strings_and_metadata_from_glotpress do
    download_localized_strings_and_metadata
    download_localized_app_store_metadata_from_glotpress
  end

  desc 'Lint the `.strings` files'
  lane :lint_localizations do
    ios_lint_localizations(input_dir: File.join(PROJECT_ROOT_FOLDER, 'podcasts'), allow_retry: true)
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane updates the AppStoreStrings.po files for the Pocket Casts app with
  # the latest content from the release_notes.txt file and the other text
  # sources
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane update_appstore_strings
  #
  # Example:
  # bundle exec fastlane update_appstore_strings
  #####################################################################################
  desc 'Updates the AppStoreStrings.po file for the Pocket Casts app with the latest data'
  lane :update_appstore_strings do
    source_metadata_folder = File.join(APP_STORE_METADATA_FOLDER, 'default')
    version = get_version_number(xcodeproj: 'podcasts.xcodeproj', target: 'podcasts')

    files = {
      whats_new: File.join(source_metadata_folder, 'release_notes.txt'),
      app_store_subtitle: File.join(source_metadata_folder, 'subtitle.txt'),
      app_store_desc: File.join(source_metadata_folder, 'description.txt'),
      app_store_keywords: File.join(source_metadata_folder, 'keywords.txt')
    }

    ios_update_metadata_source(
      po_file_path: File.join(PROJECT_ROOT_FOLDER, 'fastlane', 'AppStoreStrings.po'),
      source_files: files,
      release_version: version
    )
  end

  #####################################################################################
  # download_localized_strings_and_metadata
  # -----------------------------------------------------------------------------------
  # Downloads localized app strings and App Store Connect metadata from GlotPress.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane download_localized_strings_and_metadata
  #####################################################################################
  desc 'Downloads localized metadata for App Store Connect from GlotPress'
  lane :download_localized_strings_and_metadata do |options|
    # FIXME: This is a copy of what the release toolkit `ios_update_metadata` action does.
    # We'll soon replace this with the new `ios_download_strings_files_from_glotpress`-based workflow.
    sh("cd #{PROJECT_ROOT_FOLDER} && ./scripts/update-translations.rb")

    files_to_commit = Dir.glob(File.join(RESOURCES_FOLDER, '**', '*.strings'))
    git_add(path: files_to_commit, shell_escape: false)
    git_commit(
      path: files_to_commit,
      message: 'Update translations',
      allow_nothing_to_commit: true
    )
  end

  desc 'Downloads localized metadata for App Store Connect from GlotPress'
  lane :download_localized_app_store_metadata_from_glotpress do
    # FIXME: Replace this with a call to the future replacement of
    # `gp_downloadmetadata` once it's implemented in the release-toolkit (see
    # paaHJt-31O-p2).
    target_files = {
      "v#{ios_get_app_version}-whats-new": {
        desc: 'release_notes.txt',
        max_size: 4000
      },
      app_store_subtitle: { desc: 'subtitle.txt', max_size: 30 },
      app_store_desc: { desc: 'description.txt', max_size: 4000 },
      app_store_keywords: { desc: 'keywords.txt', max_size: 100 }
    }

    gp_downloadmetadata(
      project_url: GLOTPRESS_APP_STORE_METADATA_PROJECT_URL,
      target_files: target_files,
      locales: GLOTPRESS_TO_ASC_METADATA_LOCALE_CODES,
      download_path: APP_STORE_METADATA_FOLDER
    )
    files_to_commit = [File.join(APP_STORE_METADATA_FOLDER, '**', '*.txt')]

    # Ensure that none of the `.txt` files in `en-US` would accidentally
    # override our originals in `default`
    target_files.values.map { |h| h[:desc] }.each do |file|
      en_file_path = File.join(APP_STORE_METADATA_FOLDER, 'en-US', file)
      next unless File.exist?(en_file_path)

      UI.user_error!("File `#{en_file_path}` would override the same one in `#{APP_STORE_METADATA_FOLDER}/default
`, but `default/` is the source of truth. " \
+ "Delete the `#{en_file_path}` file, ensure the `default/` one has the expected orig
inal copy, and try again.")
    end

    # Ensure even empty locale folders have an empty `.gitkeep` file (in case
    # we don't have any translation at all ready for some locales)
    GLOTPRESS_TO_ASC_METADATA_LOCALE_CODES.each_value do |locale|
      gitkeep = File.join(APP_STORE_METADATA_FOLDER, locale, '.gitkeep')
      next if File.exist?(gitkeep)

      FileUtils.mkdir_p(File.dirname(gitkeep))
      FileUtils.touch(gitkeep)
      files_to_commit.append(gitkeep)
    end

    # Commit
    git_add(path: files_to_commit, shell_escape: false)
    git_commit(
      path: files_to_commit,
      message: 'Update App Store metadata translations',
      allow_nothing_to_commit: true
    )
  end

  # -----------------------------------------------------------------------------------
  # Kicks off a Buildkite build
  # -----------------------------------------------------------------------------------
  def trigger_buildkite_release_build(branch:, beta:)
    buildkite_trigger_build(
      buildkite_organization: 'automattic',
      buildkite_pipeline: 'pocket-casts-ios',
      branch: branch,
      environment: { BETA_RELEASE: beta },
      pipeline_file: 'release-builds.yml'
    )
  end

  #####################################################################################
  # screenshots
  # -----------------------------------------------------------------------------------
  # Generates localized screenshots for the iPhone, and iPad.
  # Tests run in the simulator so be sure to make any necessary Podfile changes such as
  # converting to use google-cast-sdk-no-bluetooth-mock
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane screenshots
  #####################################################################################
  desc 'Generates localized screenshots for the AppStore'
  lane :screenshots do
    iphone_devices = ['iPhone 12']
    ipad_devices = ['iPad (9th generation)']

    # Build once to speed up the other runs
    scan(
      workspace: 'podcasts.xcworkspace',
      scheme: 'Screenshot Automation',
      build_for_testing: true,
      clean: true,
      devices: iphone_devices + ipad_devices,
      reset_simulator: true
    )

    # iPhone Light Intertace Screens
    snapshot(
      derived_data_path: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      devices: iphone_devices,
      dark_mode: false,
      erase_simulator: true,
      testplan: 'ScreenshotAutomation_iPhone_Light_Interface'
    )

    # iPhone Dark Intertace Screens
    snapshot(
      derived_data_path: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      devices: iphone_devices,
      dark_mode: true,
      testplan: 'ScreenshotAutomation_iPhone_Dark_Interface'
    )

    # iPad Light Intertace Screens
    snapshot(
      derived_data_path: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      devices: ipad_devices,
      dark_mode: false,
      erase_simulator: true,
      testplan: 'ScreenshotAutomation_iPad_Light_Interface'
    )

    # iPhone Dark Intertace Screens
    snapshot(
      derived_data_path: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      devices: ipad_devices,
      dark_mode: true,
      testplan: 'ScreenshotAutomation_iPad_Dark_Interface'
    )
  end

  #####################################################################################
  # watch_screenshots
  # -----------------------------------------------------------------------------------
  # Generates localized screenshots for the Apple Watch.
  # Tests run in the simulator so be sure to make any necessary Podfile changes such as
  # converting to use google-cast-sdk-no-bluetooth-mock
  #
  # Setup:
  # - Log into an account with Plus. Run the test iPhone_GenerateScreenshots.test_watchSetup
  # on a device that is connected to the watch mentioned in the test.
  # - Ensure the data syncs to the simulated watch. Mocking out the ApplicationContext from
  # the device can help ensure a consistent response.
  #
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane watch_screenshots
  #####################################################################################

  desc 'Generates localized Watch screenshots for the AppStore'
  lane :watch_screenshots do
    watch_devices = ['Apple Watch Series 7 - 45mm']

    snapshot(
      scheme: 'Screenshot Automation Watch',
      devices: watch_devices,
      test_without_building: false
    )
  end

  desc 'Registers a device to the Apple Developer Portal and adds it to the appropriate provisioning profiles'
  lane :register_new_device do |options|
    device_name = UI.input('Device name (leave empty if already added in portal): ') if options[:device_name].nil?
    unless device_name.empty?
      device_id = UI.input('Device ID: ') if options[:device_id].nil?
      UI.message "Adding #{device_name} with ID #{device_id} to the Developer Portal"
      UI.message 'Also registering it with any provisioning profiles associated with the following bundle identifiers:'
      MAIN_BUNDLE_IDENTIFIERS.each do |identifier|
        puts "\t#{identifier}"
      end

      # Register the user's device
      register_device(
        name: device_name,
        udid: device_id,
        team_id: TEAM_ID,
        api_key_path: ASC_KEY_PATH
      )
    end

    # Add all development certificates to the provisioning profiles (just in case – this is an easy step to miss)
    add_development_certificates_to_provisioning_profiles(
      team_id: TEAM_ID,
      app_identifier: MAIN_BUNDLE_IDENTIFIERS
    )

    # Add all devices to the provisioning profiles
    add_all_devices_to_provisioning_profiles(
      team_id: TEAM_ID,
      app_identifier: MAIN_BUNDLE_IDENTIFIERS
    )
  end

  #####################################################################################
  # acknowledgments
  # -----------------------------------------------------------------------------------
  # Generates a HTML containing the libraries acknowledgments.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane acknowledgments
  #####################################################################################
  desc 'Generates a HTML with the list of used libraries and their licenses'
  lane :acknowledgments do
    require 'commonmarker'

    acknowledgements = 'Acknowledgments'
    markdown = File.read("#{PROJECT_ROOT_FOLDER}/podcasts/acknowledgements.md")
    rendered_html = CommonMarker.render_html(markdown, :DEFAULT)
    styled_html = "<head>
                       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
                       <style>
                         body {
                           font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
                           Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
                           font-size: 16px;
                           color: #1a1a1a;
                           margin: 20px;
                         }
                        @media (prefers-color-scheme: dark) {
                         body {
                          background: #1a1a1a;
                          color: white;
                         }
                        }
                         pre {
                          white-space: pre-wrap;
                         }
                       </style>
                       <title>
                         #{acknowledgements}
                       </title>
                     </head>
                     <body>
                       #{rendered_html}
                     </body>"

    ## Remove the <h1>, since we've promoted it to <title>
    styled_html = styled_html.sub('<h1>Acknowledgements</h1>', '')

    ## The glog library's license contains a URL that does not wrap in the web view,
    ## leading to a large right-hand whitespace gutter.  Work around this by explicitly
    ## inserting a <br> in the HTML.  Use gsub juuust in case another one sneaks in later.
    styled_html = styled_html.gsub('p?hl=en#dR3YEbitojA/COPYING', 'p?hl=en#dR3YEbitojA/COPYING<br>')

    File.write("#{PROJECT_ROOT_FOLDER}/podcasts/acknowledgements.html", styled_html)
  end

  def load_ci_spm_cache
    # Handling SPM caching for CI here for now to avoid having two sources of
    # truth for what the cache key is. The alternative would be to call the
    # save and restore cache commands in the CI pipeline and then duplicate the
    # logic to get the key here.
    sh(command: %(restore_cache "#{ci_spm_cache_key}")) if is_ci
  end

  def save_ci_spm_cache
    sh(command: %(save_cache #{SPM_CACHE_FOLDER} "#{ci_spm_cache_key}")) if is_ci
  end

  def ci_spm_cache_key
    UI.user_error! 'This function should be called from the Buildkite CI only!' unless is_ci

    hash = sh(command: 'hash_file "../podcasts.xcworkspace/xcshareddata/swiftpm/Package.resolved"').rstrip
    "$BUILDKITE_PIPELINE_SLUG-spm-cache-#{hash}"
  end

  def after_confirming_push(message: 'Push changes to the remote and trigger the build?')
    if ENV.fetch('RELEASE_TOOLKIT_SKIP_PUSH_CONFIRM', false) || UI.confirm(message)
      yield
    else
      UI.message('Aborting push as requested.')
    end
  end
end
