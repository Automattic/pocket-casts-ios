// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Api_UserChangeResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var success: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._success ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._success = newValue }
    }
    
    /// Returns true if `success` has been explicitly set.
    var hasSuccess: Bool { _storage._success != nil }
    /// Clears the value of `success`. Subsequent reads from it will return its default value.
    mutating func clearSuccess() { _uniqueStorage()._success = nil }
    
    var message: String {
        get { _storage._message }
        set { _uniqueStorage()._message = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_UserResetPasswordRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var resetPasswordToken = String()
    
    var password = String()
    
    var scope = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EmailRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var email = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserChangeEmailRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var email = String()
    
    var password = String()
    
    var scope = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserChangePasswordRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var oldPassword = String()
    
    var newPassword = String()
    
    var scope = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EmptyRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EmptyResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SupportFeedbackRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var message = String()
    
    var email = String()
    
    var subject = String()
    
    var debug = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_CreateBetaUserRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var email = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserLoginRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var email = String()
    
    var password = String()
    
    var scope = String()
    
    var dt = String()
    
    var device = String()
    
    /// app version
    var v = String()
    
    /// device model
    var m = String()
    
    /// api version
    var av = String()
    
    /// lite version
    var f = String()
    
    /// language code
    var l = String()
    
    /// country code
    var c = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserLoginResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var token = String()
    
    var uuid = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_BasicRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var v = String()
    
    var m = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserIdResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var id = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserPlaylistListRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var v = String()
    
    var m = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserPodcastListRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var v = String()
    
    var m = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_NamedSettingsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var v: String {
        get { _storage._v }
        set { _uniqueStorage()._v = newValue }
    }
    
    var m: String {
        get { _storage._m }
        set { _uniqueStorage()._m = newValue }
    }
    
    var settings: Api_NamedSettings {
        get { _storage._settings ?? Api_NamedSettings() }
        set { _uniqueStorage()._settings = newValue }
    }
    
    /// Returns true if `settings` has been explicitly set.
    var hasSettings: Bool { _storage._settings != nil }
    /// Clears the value of `settings`. Subsequent reads from it will return its default value.
    mutating func clearSettings() { _uniqueStorage()._settings = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_NamedSettings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var gridLayout: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._gridLayout ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._gridLayout = newValue }
    }
    
    /// Returns true if `gridLayout` has been explicitly set.
    var hasGridLayout: Bool { _storage._gridLayout != nil }
    /// Clears the value of `gridLayout`. Subsequent reads from it will return its default value.
    mutating func clearGridLayout() { _uniqueStorage()._gridLayout = nil }
    
    var gridOrder: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._gridOrder ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._gridOrder = newValue }
    }
    
    /// Returns true if `gridOrder` has been explicitly set.
    var hasGridOrder: Bool { _storage._gridOrder != nil }
    /// Clears the value of `gridOrder`. Subsequent reads from it will return its default value.
    mutating func clearGridOrder() { _uniqueStorage()._gridOrder = nil }
    
    var showPlayed: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._showPlayed ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._showPlayed = newValue }
    }
    
    /// Returns true if `showPlayed` has been explicitly set.
    var hasShowPlayed: Bool { _storage._showPlayed != nil }
    /// Clears the value of `showPlayed`. Subsequent reads from it will return its default value.
    mutating func clearShowPlayed() { _uniqueStorage()._showPlayed = nil }
    
    var theme: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._theme ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._theme = newValue }
    }
    
    /// Returns true if `theme` has been explicitly set.
    var hasTheme: Bool { _storage._theme != nil }
    /// Clears the value of `theme`. Subsequent reads from it will return its default value.
    mutating func clearTheme() { _uniqueStorage()._theme = nil }
    
    var skipForward: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._skipForward ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._skipForward = newValue }
    }
    
    /// Returns true if `skipForward` has been explicitly set.
    var hasSkipForward: Bool { _storage._skipForward != nil }
    /// Clears the value of `skipForward`. Subsequent reads from it will return its default value.
    mutating func clearSkipForward() { _uniqueStorage()._skipForward = nil }
    
    var skipBack: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._skipBack ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._skipBack = newValue }
    }
    
    /// Returns true if `skipBack` has been explicitly set.
    var hasSkipBack: Bool { _storage._skipBack != nil }
    /// Clears the value of `skipBack`. Subsequent reads from it will return its default value.
    mutating func clearSkipBack() { _uniqueStorage()._skipBack = nil }
    
    var webVersion: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._webVersion ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._webVersion = newValue }
    }
    
    /// Returns true if `webVersion` has been explicitly set.
    var hasWebVersion: Bool { _storage._webVersion != nil }
    /// Clears the value of `webVersion`. Subsequent reads from it will return its default value.
    mutating func clearWebVersion() { _uniqueStorage()._webVersion = nil }
    
    var language: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._language ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._language = newValue }
    }
    
    /// Returns true if `language` has been explicitly set.
    var hasLanguage: Bool { _storage._language != nil }
    /// Clears the value of `language`. Subsequent reads from it will return its default value.
    mutating func clearLanguage() { _uniqueStorage()._language = nil }
    
    var recommendationsOn: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._recommendationsOn ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._recommendationsOn = newValue }
    }
    
    /// Returns true if `recommendationsOn` has been explicitly set.
    var hasRecommendationsOn: Bool { _storage._recommendationsOn != nil }
    /// Clears the value of `recommendationsOn`. Subsequent reads from it will return its default value.
    mutating func clearRecommendationsOn() { _uniqueStorage()._recommendationsOn = nil }
    
    var streamByDefault: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._streamByDefault ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._streamByDefault = newValue }
    }
    
    /// Returns true if `streamByDefault` has been explicitly set.
    var hasStreamByDefault: Bool { _storage._streamByDefault != nil }
    /// Clears the value of `streamByDefault`. Subsequent reads from it will return its default value.
    mutating func clearStreamByDefault() { _uniqueStorage()._streamByDefault = nil }
    
    var useEmbeddedArtwork: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._useEmbeddedArtwork ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._useEmbeddedArtwork = newValue }
    }
    
    /// Returns true if `useEmbeddedArtwork` has been explicitly set.
    var hasUseEmbeddedArtwork: Bool { _storage._useEmbeddedArtwork != nil }
    /// Clears the value of `useEmbeddedArtwork`. Subsequent reads from it will return its default value.
    mutating func clearUseEmbeddedArtwork() { _uniqueStorage()._useEmbeddedArtwork = nil }
    
    var playbackSpeed: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._playbackSpeed ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._playbackSpeed = newValue }
    }
    
    /// Returns true if `playbackSpeed` has been explicitly set.
    var hasPlaybackSpeed: Bool { _storage._playbackSpeed != nil }
    /// Clears the value of `playbackSpeed`. Subsequent reads from it will return its default value.
    mutating func clearPlaybackSpeed() { _uniqueStorage()._playbackSpeed = nil }
    
    var silenceRemoval: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._silenceRemoval ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._silenceRemoval = newValue }
    }
    
    /// Returns true if `silenceRemoval` has been explicitly set.
    var hasSilenceRemoval: Bool { _storage._silenceRemoval != nil }
    /// Clears the value of `silenceRemoval`. Subsequent reads from it will return its default value.
    mutating func clearSilenceRemoval() { _uniqueStorage()._silenceRemoval = nil }
    
    var volumeBoost: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._volumeBoost ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._volumeBoost = newValue }
    }
    
    /// Returns true if `volumeBoost` has been explicitly set.
    var hasVolumeBoost: Bool { _storage._volumeBoost != nil }
    /// Clears the value of `volumeBoost`. Subsequent reads from it will return its default value.
    mutating func clearVolumeBoost() { _uniqueStorage()._volumeBoost = nil }
    
    var badges: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._badges ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._badges = newValue }
    }
    
    /// Returns true if `badges` has been explicitly set.
    var hasBadges: Bool { _storage._badges != nil }
    /// Clears the value of `badges`. Subsequent reads from it will return its default value.
    mutating func clearBadges() { _uniqueStorage()._badges = nil }
    
    var freeGiftAcknowledgement: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._freeGiftAcknowledgement ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._freeGiftAcknowledgement = newValue }
    }
    
    /// Returns true if `freeGiftAcknowledgement` has been explicitly set.
    var hasFreeGiftAcknowledgement: Bool { _storage._freeGiftAcknowledgement != nil }
    /// Clears the value of `freeGiftAcknowledgement`. Subsequent reads from it will return its default value.
    mutating func clearFreeGiftAcknowledgement() { _uniqueStorage()._freeGiftAcknowledgement = nil }
    
    var marketingOptIn: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._marketingOptIn ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._marketingOptIn = newValue }
    }
    
    /// Returns true if `marketingOptIn` has been explicitly set.
    var hasMarketingOptIn: Bool { _storage._marketingOptIn != nil }
    /// Clears the value of `marketingOptIn`. Subsequent reads from it will return its default value.
    mutating func clearMarketingOptIn() { _uniqueStorage()._marketingOptIn = nil }
    
    var autoArchivePlayedEpisodes: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._autoArchivePlayedEpisodes ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._autoArchivePlayedEpisodes = newValue }
    }
    
    /// Returns true if `autoArchivePlayedEpisodes` has been explicitly set.
    var hasAutoArchivePlayedEpisodes: Bool { _storage._autoArchivePlayedEpisodes != nil }
    /// Clears the value of `autoArchivePlayedEpisodes`. Subsequent reads from it will return its default value.
    mutating func clearAutoArchivePlayedEpisodes() { _uniqueStorage()._autoArchivePlayedEpisodes = nil }
    
    var autoArchiveIncludesStarred: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._autoArchiveIncludesStarred ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._autoArchiveIncludesStarred = newValue }
    }
    
    /// Returns true if `autoArchiveIncludesStarred` has been explicitly set.
    var hasAutoArchiveIncludesStarred: Bool { _storage._autoArchiveIncludesStarred != nil }
    /// Clears the value of `autoArchiveIncludesStarred`. Subsequent reads from it will return its default value.
    mutating func clearAutoArchiveIncludesStarred() { _uniqueStorage()._autoArchiveIncludesStarred = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_NamedSettingsResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var gridLayout: Api_Int32Setting {
        get { _storage._gridLayout ?? Api_Int32Setting() }
        set { _uniqueStorage()._gridLayout = newValue }
    }
    
    /// Returns true if `gridLayout` has been explicitly set.
    var hasGridLayout: Bool { _storage._gridLayout != nil }
    /// Clears the value of `gridLayout`. Subsequent reads from it will return its default value.
    mutating func clearGridLayout() { _uniqueStorage()._gridLayout = nil }
    
    var gridOrder: Api_Int32Setting {
        get { _storage._gridOrder ?? Api_Int32Setting() }
        set { _uniqueStorage()._gridOrder = newValue }
    }
    
    /// Returns true if `gridOrder` has been explicitly set.
    var hasGridOrder: Bool { _storage._gridOrder != nil }
    /// Clears the value of `gridOrder`. Subsequent reads from it will return its default value.
    mutating func clearGridOrder() { _uniqueStorage()._gridOrder = nil }
    
    var showPlayed: Api_Int32Setting {
        get { _storage._showPlayed ?? Api_Int32Setting() }
        set { _uniqueStorage()._showPlayed = newValue }
    }
    
    /// Returns true if `showPlayed` has been explicitly set.
    var hasShowPlayed: Bool { _storage._showPlayed != nil }
    /// Clears the value of `showPlayed`. Subsequent reads from it will return its default value.
    mutating func clearShowPlayed() { _uniqueStorage()._showPlayed = nil }
    
    var theme: Api_Int32Setting {
        get { _storage._theme ?? Api_Int32Setting() }
        set { _uniqueStorage()._theme = newValue }
    }
    
    /// Returns true if `theme` has been explicitly set.
    var hasTheme: Bool { _storage._theme != nil }
    /// Clears the value of `theme`. Subsequent reads from it will return its default value.
    mutating func clearTheme() { _uniqueStorage()._theme = nil }
    
    var skipForward: Api_Int32Setting {
        get { _storage._skipForward ?? Api_Int32Setting() }
        set { _uniqueStorage()._skipForward = newValue }
    }
    
    /// Returns true if `skipForward` has been explicitly set.
    var hasSkipForward: Bool { _storage._skipForward != nil }
    /// Clears the value of `skipForward`. Subsequent reads from it will return its default value.
    mutating func clearSkipForward() { _uniqueStorage()._skipForward = nil }
    
    var skipBack: Api_Int32Setting {
        get { _storage._skipBack ?? Api_Int32Setting() }
        set { _uniqueStorage()._skipBack = newValue }
    }
    
    /// Returns true if `skipBack` has been explicitly set.
    var hasSkipBack: Bool { _storage._skipBack != nil }
    /// Clears the value of `skipBack`. Subsequent reads from it will return its default value.
    mutating func clearSkipBack() { _uniqueStorage()._skipBack = nil }
    
    var webVersion: Api_Int32Setting {
        get { _storage._webVersion ?? Api_Int32Setting() }
        set { _uniqueStorage()._webVersion = newValue }
    }
    
    /// Returns true if `webVersion` has been explicitly set.
    var hasWebVersion: Bool { _storage._webVersion != nil }
    /// Clears the value of `webVersion`. Subsequent reads from it will return its default value.
    mutating func clearWebVersion() { _uniqueStorage()._webVersion = nil }
    
    var language: Api_StringSetting {
        get { _storage._language ?? Api_StringSetting() }
        set { _uniqueStorage()._language = newValue }
    }
    
    /// Returns true if `language` has been explicitly set.
    var hasLanguage: Bool { _storage._language != nil }
    /// Clears the value of `language`. Subsequent reads from it will return its default value.
    mutating func clearLanguage() { _uniqueStorage()._language = nil }
    
    var recommendationsOn: Api_BoolSetting {
        get { _storage._recommendationsOn ?? Api_BoolSetting() }
        set { _uniqueStorage()._recommendationsOn = newValue }
    }
    
    /// Returns true if `recommendationsOn` has been explicitly set.
    var hasRecommendationsOn: Bool { _storage._recommendationsOn != nil }
    /// Clears the value of `recommendationsOn`. Subsequent reads from it will return its default value.
    mutating func clearRecommendationsOn() { _uniqueStorage()._recommendationsOn = nil }
    
    var streamByDefault: Api_BoolSetting {
        get { _storage._streamByDefault ?? Api_BoolSetting() }
        set { _uniqueStorage()._streamByDefault = newValue }
    }
    
    /// Returns true if `streamByDefault` has been explicitly set.
    var hasStreamByDefault: Bool { _storage._streamByDefault != nil }
    /// Clears the value of `streamByDefault`. Subsequent reads from it will return its default value.
    mutating func clearStreamByDefault() { _uniqueStorage()._streamByDefault = nil }
    
    var useEmbeddedArtwork: Api_BoolSetting {
        get { _storage._useEmbeddedArtwork ?? Api_BoolSetting() }
        set { _uniqueStorage()._useEmbeddedArtwork = newValue }
    }
    
    /// Returns true if `useEmbeddedArtwork` has been explicitly set.
    var hasUseEmbeddedArtwork: Bool { _storage._useEmbeddedArtwork != nil }
    /// Clears the value of `useEmbeddedArtwork`. Subsequent reads from it will return its default value.
    mutating func clearUseEmbeddedArtwork() { _uniqueStorage()._useEmbeddedArtwork = nil }
    
    var playbackSpeed: Api_DoubleSetting {
        get { _storage._playbackSpeed ?? Api_DoubleSetting() }
        set { _uniqueStorage()._playbackSpeed = newValue }
    }
    
    /// Returns true if `playbackSpeed` has been explicitly set.
    var hasPlaybackSpeed: Bool { _storage._playbackSpeed != nil }
    /// Clears the value of `playbackSpeed`. Subsequent reads from it will return its default value.
    mutating func clearPlaybackSpeed() { _uniqueStorage()._playbackSpeed = nil }
    
    var silenceRemoval: Api_BoolSetting {
        get { _storage._silenceRemoval ?? Api_BoolSetting() }
        set { _uniqueStorage()._silenceRemoval = newValue }
    }
    
    /// Returns true if `silenceRemoval` has been explicitly set.
    var hasSilenceRemoval: Bool { _storage._silenceRemoval != nil }
    /// Clears the value of `silenceRemoval`. Subsequent reads from it will return its default value.
    mutating func clearSilenceRemoval() { _uniqueStorage()._silenceRemoval = nil }
    
    var volumeBoost: Api_BoolSetting {
        get { _storage._volumeBoost ?? Api_BoolSetting() }
        set { _uniqueStorage()._volumeBoost = newValue }
    }
    
    /// Returns true if `volumeBoost` has been explicitly set.
    var hasVolumeBoost: Bool { _storage._volumeBoost != nil }
    /// Clears the value of `volumeBoost`. Subsequent reads from it will return its default value.
    mutating func clearVolumeBoost() { _uniqueStorage()._volumeBoost = nil }
    
    var badges: Api_Int32Setting {
        get { _storage._badges ?? Api_Int32Setting() }
        set { _uniqueStorage()._badges = newValue }
    }
    
    /// Returns true if `badges` has been explicitly set.
    var hasBadges: Bool { _storage._badges != nil }
    /// Clears the value of `badges`. Subsequent reads from it will return its default value.
    mutating func clearBadges() { _uniqueStorage()._badges = nil }
    
    var freeGiftAcknowledgement: Api_BoolSetting {
        get { _storage._freeGiftAcknowledgement ?? Api_BoolSetting() }
        set { _uniqueStorage()._freeGiftAcknowledgement = newValue }
    }
    
    /// Returns true if `freeGiftAcknowledgement` has been explicitly set.
    var hasFreeGiftAcknowledgement: Bool { _storage._freeGiftAcknowledgement != nil }
    /// Clears the value of `freeGiftAcknowledgement`. Subsequent reads from it will return its default value.
    mutating func clearFreeGiftAcknowledgement() { _uniqueStorage()._freeGiftAcknowledgement = nil }
    
    var marketingOptIn: Api_BoolSetting {
        get { _storage._marketingOptIn ?? Api_BoolSetting() }
        set { _uniqueStorage()._marketingOptIn = newValue }
    }
    
    /// Returns true if `marketingOptIn` has been explicitly set.
    var hasMarketingOptIn: Bool { _storage._marketingOptIn != nil }
    /// Clears the value of `marketingOptIn`. Subsequent reads from it will return its default value.
    mutating func clearMarketingOptIn() { _uniqueStorage()._marketingOptIn = nil }
    
    var autoArchivePlayedEpisodes: Api_BoolSetting {
        get { _storage._autoArchivePlayedEpisodes ?? Api_BoolSetting() }
        set { _uniqueStorage()._autoArchivePlayedEpisodes = newValue }
    }
    
    /// Returns true if `autoArchivePlayedEpisodes` has been explicitly set.
    var hasAutoArchivePlayedEpisodes: Bool { _storage._autoArchivePlayedEpisodes != nil }
    /// Clears the value of `autoArchivePlayedEpisodes`. Subsequent reads from it will return its default value.
    mutating func clearAutoArchivePlayedEpisodes() { _uniqueStorage()._autoArchivePlayedEpisodes = nil }
    
    var autoArchiveIncludesStarred: Api_BoolSetting {
        get { _storage._autoArchiveIncludesStarred ?? Api_BoolSetting() }
        set { _uniqueStorage()._autoArchiveIncludesStarred = newValue }
    }
    
    /// Returns true if `autoArchiveIncludesStarred` has been explicitly set.
    var hasAutoArchiveIncludesStarred: Bool { _storage._autoArchiveIncludesStarred != nil }
    /// Clears the value of `autoArchiveIncludesStarred`. Subsequent reads from it will return its default value.
    mutating func clearAutoArchiveIncludesStarred() { _uniqueStorage()._autoArchiveIncludesStarred = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_Int32Setting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._value ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._value = newValue }
    }
    
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool { _storage._value != nil }
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() { _uniqueStorage()._value = nil }
    
    var changed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._changed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._changed = newValue }
    }
    
    /// Returns true if `changed` has been explicitly set.
    var hasChanged: Bool { _storage._changed != nil }
    /// Clears the value of `changed`. Subsequent reads from it will return its default value.
    mutating func clearChanged() { _uniqueStorage()._changed = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_BoolSetting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._value ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._value = newValue }
    }
    
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool { _storage._value != nil }
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() { _uniqueStorage()._value = nil }
    
    var changed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._changed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._changed = newValue }
    }
    
    /// Returns true if `changed` has been explicitly set.
    var hasChanged: Bool { _storage._changed != nil }
    /// Clears the value of `changed`. Subsequent reads from it will return its default value.
    mutating func clearChanged() { _uniqueStorage()._changed = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_StringSetting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._value ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._value = newValue }
    }
    
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool { _storage._value != nil }
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() { _uniqueStorage()._value = nil }
    
    var changed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._changed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._changed = newValue }
    }
    
    /// Returns true if `changed` has been explicitly set.
    var hasChanged: Bool { _storage._changed != nil }
    /// Clears the value of `changed`. Subsequent reads from it will return its default value.
    mutating func clearChanged() { _uniqueStorage()._changed = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_DoubleSetting {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var value: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._value ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._value = newValue }
    }
    
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool { _storage._value != nil }
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() { _uniqueStorage()._value = nil }
    
    var changed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._changed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._changed = newValue }
    }
    
    /// Returns true if `changed` has been explicitly set.
    var hasChanged: Bool { _storage._changed != nil }
    /// Clears the value of `changed`. Subsequent reads from it will return its default value.
    mutating func clearChanged() { _uniqueStorage()._changed = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_ApiPodcastResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid = String()
    
    var title = String()
    
    var author = String()
    
    var description_p = String()
    
    var url = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_ApiPodcastListResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var podcasts: [Api_ApiPodcastResponse] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserPodcastResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var episodesSortOrder: Int32 {
        get { _storage._episodesSortOrder }
        set { _uniqueStorage()._episodesSortOrder = newValue }
    }
    
    var autoStartFrom: Int32 {
        get { _storage._autoStartFrom }
        set { _uniqueStorage()._autoStartFrom = newValue }
    }
    
    var title: String {
        get { _storage._title }
        set { _uniqueStorage()._title = newValue }
    }
    
    var author: String {
        get { _storage._author }
        set { _uniqueStorage()._author = newValue }
    }
    
    var description_p: String {
        get { _storage._description_p }
        set { _uniqueStorage()._description_p = newValue }
    }
    
    var url: String {
        get { _storage._url }
        set { _uniqueStorage()._url = newValue }
    }
    
    var lastEpisodePublished: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._lastEpisodePublished ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._lastEpisodePublished = newValue }
    }
    
    /// Returns true if `lastEpisodePublished` has been explicitly set.
    var hasLastEpisodePublished: Bool { _storage._lastEpisodePublished != nil }
    /// Clears the value of `lastEpisodePublished`. Subsequent reads from it will return its default value.
    mutating func clearLastEpisodePublished() { _uniqueStorage()._lastEpisodePublished = nil }
    
    var unplayed: Bool {
        get { _storage._unplayed }
        set { _uniqueStorage()._unplayed = newValue }
    }
    
    var lastEpisodeUuid: String {
        get { _storage._lastEpisodeUuid }
        set { _uniqueStorage()._lastEpisodeUuid = newValue }
    }
    
    var lastEpisodePlayingStatus: Int32 {
        get { _storage._lastEpisodePlayingStatus }
        set { _uniqueStorage()._lastEpisodePlayingStatus = newValue }
    }
    
    var lastEpisodeArchived: Bool {
        get { _storage._lastEpisodeArchived }
        set { _uniqueStorage()._lastEpisodeArchived = newValue }
    }
    
    var autoSkipLast: Int32 {
        get { _storage._autoSkipLast }
        set { _uniqueStorage()._autoSkipLast = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_UserPlaylistListResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var playlists: [Api_PlaylistSyncResponse] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserPodcastListResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var podcasts: [Api_UserPodcastResponse] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UserLastSyncAtResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var lastSyncAt = String()
    
    var lastSyncAtMs: Int64 = 0
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UuidRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var v = String()
    
    var m = String()
    
    var uuid = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_KeywordRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var v = String()
    
    var m = String()
    
    var keyword = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SyncEpisodesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var episodes: [Api_EpisodeSyncResponse] {
        get { _storage._episodes }
        set { _uniqueStorage()._episodes = newValue }
    }
    
    var autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoStartFrom ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoStartFrom = newValue }
    }
    
    /// Returns true if `autoStartFrom` has been explicitly set.
    var hasAutoStartFrom: Bool { _storage._autoStartFrom != nil }
    /// Clears the value of `autoStartFrom`. Subsequent reads from it will return its default value.
    mutating func clearAutoStartFrom() { _uniqueStorage()._autoStartFrom = nil }
    
    var episodesSortOrder: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._episodesSortOrder ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._episodesSortOrder = newValue }
    }
    
    /// Returns true if `episodesSortOrder` has been explicitly set.
    var hasEpisodesSortOrder: Bool { _storage._episodesSortOrder != nil }
    /// Clears the value of `episodesSortOrder`. Subsequent reads from it will return its default value.
    mutating func clearEpisodesSortOrder() { _uniqueStorage()._episodesSortOrder = nil }
    
    var autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoSkipLast ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoSkipLast = newValue }
    }
    
    /// Returns true if `autoSkipLast` has been explicitly set.
    var hasAutoSkipLast: Bool { _storage._autoSkipLast != nil }
    /// Clears the value of `autoSkipLast`. Subsequent reads from it will return its default value.
    mutating func clearAutoSkipLast() { _uniqueStorage()._autoSkipLast = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_FindUserEpisodesRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var podcastUuid = String()
    
    var page: Int32 = 0
    
    var sort: Int32 = 0
    
    var v = String()
    
    var m = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EpisodesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var total: Int32 = 0
    
    var episodes: [Api_EpisodeResponse] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_FindUserEpisodeRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid = String()
    
    var v = String()
    
    var m = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EpisodeResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var url: String {
        get { _storage._url }
        set { _uniqueStorage()._url = newValue }
    }
    
    var published: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._published ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._published = newValue }
    }
    
    /// Returns true if `published` has been explicitly set.
    var hasPublished: Bool { _storage._published != nil }
    /// Clears the value of `published`. Subsequent reads from it will return its default value.
    mutating func clearPublished() { _uniqueStorage()._published = nil }
    
    var duration: Int32 {
        get { _storage._duration }
        set { _uniqueStorage()._duration = newValue }
    }
    
    var fileType: String {
        get { _storage._fileType }
        set { _uniqueStorage()._fileType = newValue }
    }
    
    var title: String {
        get { _storage._title }
        set { _uniqueStorage()._title = newValue }
    }
    
    var size: Int64 {
        get { _storage._size }
        set { _uniqueStorage()._size = newValue }
    }
    
    var playingStatus: Int32 {
        get { _storage._playingStatus }
        set { _uniqueStorage()._playingStatus = newValue }
    }
    
    var playedUpTo: Int32 {
        get { _storage._playedUpTo }
        set { _uniqueStorage()._playedUpTo = newValue }
    }
    
    var starred: Bool {
        get { _storage._starred }
        set { _uniqueStorage()._starred = newValue }
    }
    
    var podcastUuid: String {
        get { _storage._podcastUuid }
        set { _uniqueStorage()._podcastUuid = newValue }
    }
    
    var podcastTitle: String {
        get { _storage._podcastTitle }
        set { _uniqueStorage()._podcastTitle = newValue }
    }
    
    var episodeType: String {
        get { _storage._episodeType }
        set { _uniqueStorage()._episodeType = newValue }
    }
    
    var episodeSeason: Int32 {
        get { _storage._episodeSeason }
        set { _uniqueStorage()._episodeSeason = newValue }
    }
    
    var episodeNumber: Int32 {
        get { _storage._episodeNumber }
        set { _uniqueStorage()._episodeNumber = newValue }
    }
    
    var isDeleted: Bool {
        get { _storage._isDeleted }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_SyncUpdateEpisodeResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpdateEpisodeRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var podcast: String {
        get { _storage._podcast }
        set { _uniqueStorage()._podcast = newValue }
    }
    
    var position: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._position ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._position = newValue }
    }
    
    /// Returns true if `position` has been explicitly set.
    var hasPosition: Bool { _storage._position != nil }
    /// Clears the value of `position`. Subsequent reads from it will return its default value.
    mutating func clearPosition() { _uniqueStorage()._position = nil }
    
    var status: Int32 {
        get { _storage._status }
        set { _uniqueStorage()._status = newValue }
    }
    
    var duration: Int32 {
        get { _storage._duration }
        set { _uniqueStorage()._duration = newValue }
    }
    
    var stats: Api_StatsRequest {
        get { _storage._stats ?? Api_StatsRequest() }
        set { _uniqueStorage()._stats = newValue }
    }
    
    /// Returns true if `stats` has been explicitly set.
    var hasStats: Bool { _storage._stats != nil }
    /// Clears the value of `stats`. Subsequent reads from it will return its default value.
    mutating func clearStats() { _uniqueStorage()._stats = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_UpdateEpisodeResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_StatsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var deviceID = String()
    
    var timeSilenceRemoval: Int32 = 0
    
    var timeSkipping: Int32 = 0
    
    var timeIntroSkipping: Int32 = 0
    
    var timeVariableSpeed: Int32 = 0
    
    var timeListened: Int32 = 0
    
    var deviceType: Int32 = 0
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpdateEpisodeStarRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid = String()
    
    var podcast = String()
    
    var star: Bool = false
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpdateEpisodeStarResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EpisodeWithPodcast {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid = String()
    
    var podcast = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpdateEpisodesArchiveRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var archive: Bool = false
    
    var episodes: [Api_EpisodeWithPodcast] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpNextSyncRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var deviceTime: Int64 {
        get { _storage._deviceTime }
        set { _uniqueStorage()._deviceTime = newValue }
    }
    
    var version: String {
        get { _storage._version }
        set { _uniqueStorage()._version = newValue }
    }
    
    var model: String {
        get { _storage._model }
        set { _uniqueStorage()._model = newValue }
    }
    
    var upNext: Api_UpNextChanges {
        get { _storage._upNext ?? Api_UpNextChanges() }
        set { _uniqueStorage()._upNext = newValue }
    }
    
    /// Returns true if `upNext` has been explicitly set.
    var hasUpNext: Bool { _storage._upNext != nil }
    /// Clears the value of `upNext`. Subsequent reads from it will return its default value.
    mutating func clearUpNext() { _uniqueStorage()._upNext = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_UpNextPlayRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var version: String {
        get { _storage._version }
        set { _uniqueStorage()._version = newValue }
    }
    
    var model: String {
        get { _storage._model }
        set { _uniqueStorage()._model = newValue }
    }
    
    var episode: Api_UpNextEpisodeRequest {
        get { _storage._episode ?? Api_UpNextEpisodeRequest() }
        set { _uniqueStorage()._episode = newValue }
    }
    
    /// Returns true if `episode` has been explicitly set.
    var hasEpisode: Bool { _storage._episode != nil }
    /// Clears the value of `episode`. Subsequent reads from it will return its default value.
    mutating func clearEpisode() { _uniqueStorage()._episode = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_UpNextListRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var limit: Int32 = 0
    
    var version = String()
    
    var model = String()
    
    var serverModified: Int64 = 0
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpNextEpisodeRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var title: String {
        get { _storage._title }
        set { _uniqueStorage()._title = newValue }
    }
    
    var url: String {
        get { _storage._url }
        set { _uniqueStorage()._url = newValue }
    }
    
    var podcast: String {
        get { _storage._podcast }
        set { _uniqueStorage()._podcast = newValue }
    }
    
    var published: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._published ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._published = newValue }
    }
    
    /// Returns true if `published` has been explicitly set.
    var hasPublished: Bool { _storage._published != nil }
    /// Clears the value of `published`. Subsequent reads from it will return its default value.
    mutating func clearPublished() { _uniqueStorage()._published = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_UpNextChanges {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var serverModified: Int64 = 0
    
    var changes: [Api_UpNextChanges.Change] = []
    
    var order: [String] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    struct Change {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        var uuid: String {
            get { _storage._uuid }
            set { _uniqueStorage()._uuid = newValue }
        }
        
        var action: Int32 {
            get { _storage._action }
            set { _uniqueStorage()._action = newValue }
        }
        
        var modified: Int64 {
            get { _storage._modified }
            set { _uniqueStorage()._modified = newValue }
        }
        
        var title: String {
            get { _storage._title }
            set { _uniqueStorage()._title = newValue }
        }
        
        var url: String {
            get { _storage._url }
            set { _uniqueStorage()._url = newValue }
        }
        
        var podcast: String {
            get { _storage._podcast }
            set { _uniqueStorage()._podcast = newValue }
        }
        
        var episodes: [Api_UpNextEpisodeRequest] {
            get { _storage._episodes }
            set { _uniqueStorage()._episodes = newValue }
        }
        
        var published: SwiftProtobuf.Google_Protobuf_Timestamp {
            get { _storage._published ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
            set { _uniqueStorage()._published = newValue }
        }
        
        /// Returns true if `published` has been explicitly set.
        var hasPublished: Bool { _storage._published != nil }
        /// Clears the value of `published`. Subsequent reads from it will return its default value.
        mutating func clearPublished() { _uniqueStorage()._published = nil }
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _storage = _StorageClass.defaultInstance
    }
    
    init() {}
}

struct Api_UpNextResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var serverModified: Int64 = 0
    
    var episodes: [Api_UpNextResponse.EpisodeResponse] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    struct EpisodeResponse {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.
        
        var title: String {
            get { _storage._title }
            set { _uniqueStorage()._title = newValue }
        }
        
        var url: String {
            get { _storage._url }
            set { _uniqueStorage()._url = newValue }
        }
        
        var podcast: String {
            get { _storage._podcast }
            set { _uniqueStorage()._podcast = newValue }
        }
        
        var uuid: String {
            get { _storage._uuid }
            set { _uniqueStorage()._uuid = newValue }
        }
        
        var published: SwiftProtobuf.Google_Protobuf_Timestamp {
            get { _storage._published ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
            set { _uniqueStorage()._published = newValue }
        }
        
        /// Returns true if `published` has been explicitly set.
        var hasPublished: Bool { _storage._published != nil }
        /// Clears the value of `published`. Subsequent reads from it will return its default value.
        mutating func clearPublished() { _uniqueStorage()._published = nil }
        
        var unknownFields = SwiftProtobuf.UnknownStorage()
        
        init() {}
        
        fileprivate var _storage = _StorageClass.defaultInstance
    }
    
    init() {}
}

struct Api_HistoryChange {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var action: Int32 {
        get { _storage._action }
        set { _uniqueStorage()._action = newValue }
    }
    
    var podcast: String {
        get { _storage._podcast }
        set { _uniqueStorage()._podcast = newValue }
    }
    
    var episode: String {
        get { _storage._episode }
        set { _uniqueStorage()._episode = newValue }
    }
    
    var modifiedAt: Int64 {
        get { _storage._modifiedAt }
        set { _uniqueStorage()._modifiedAt = newValue }
    }
    
    var title: String {
        get { _storage._title }
        set { _uniqueStorage()._title = newValue }
    }
    
    var url: String {
        get { _storage._url }
        set { _uniqueStorage()._url = newValue }
    }
    
    var published: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._published ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._published = newValue }
    }
    
    /// Returns true if `published` has been explicitly set.
    var hasPublished: Bool { _storage._published != nil }
    /// Clears the value of `published`. Subsequent reads from it will return its default value.
    mutating func clearPublished() { _uniqueStorage()._published = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_HistorySyncRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var deviceTime: Int64 = 0
    
    var serverModified: Int64 = 0
    
    var changes: [Api_HistoryChange] = []
    
    var version = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_HistoryResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var serverModified: Int64 = 0
    
    var lastCleared: Int64 = 0
    
    var changes: [Api_HistoryChange] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_UpNextRemoveRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuids: [String] = []
    
    var version = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_EpisodeSyncResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid = String()
    
    var playingStatus: Int32 = 0
    
    var playedUpTo: Int32 = 0
    
    var isDeleted: Bool = false
    
    var starred: Bool = false
    
    var duration: Int32 = 0
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SearchPodcastsRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var term = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_HealthResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var ok: Bool = false
    
    var messages: [String] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_StatsResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var timeSilenceRemoval: Int64 {
        get { _storage._timeSilenceRemoval }
        set { _uniqueStorage()._timeSilenceRemoval = newValue }
    }
    
    var timeSkipping: Int64 {
        get { _storage._timeSkipping }
        set { _uniqueStorage()._timeSkipping = newValue }
    }
    
    var timeIntroSkipping: Int64 {
        get { _storage._timeIntroSkipping }
        set { _uniqueStorage()._timeIntroSkipping = newValue }
    }
    
    var timeVariableSpeed: Int64 {
        get { _storage._timeVariableSpeed }
        set { _uniqueStorage()._timeVariableSpeed = newValue }
    }
    
    var timeListened: Int64 {
        get { _storage._timeListened }
        set { _uniqueStorage()._timeListened = newValue }
    }
    
    var timesStartedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._timesStartedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._timesStartedAt = newValue }
    }
    
    /// Returns true if `timesStartedAt` has been explicitly set.
    var hasTimesStartedAt: Bool { _storage._timesStartedAt != nil }
    /// Clears the value of `timesStartedAt`. Subsequent reads from it will return its default value.
    mutating func clearTimesStartedAt() { _uniqueStorage()._timesStartedAt = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_RegisterRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var email = String()
    
    var password = String()
    
    var scope = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_RegisterResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var success: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._success ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._success = newValue }
    }
    
    /// Returns true if `success` has been explicitly set.
    var hasSuccess: Bool { _storage._success != nil }
    /// Clears the value of `success`. Subsequent reads from it will return its default value.
    mutating func clearSuccess() { _uniqueStorage()._success = nil }
    
    var message: String {
        get { _storage._message }
        set { _uniqueStorage()._message = newValue }
    }
    
    var token: String {
        get { _storage._token }
        set { _uniqueStorage()._token = newValue }
    }
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var errors: [String] {
        get { _storage._errors }
        set { _uniqueStorage()._errors = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_StarredEpisodesResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var episodes: [Api_StarredEpisode] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_StarredEpisode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid = String()
    
    var podcastUuid = String()
    
    var duration: Int32 = 0
    
    var playingStatus: Int32 = 0
    
    var playedUpTo: Int32 = 0
    
    var isDeleted: Bool = false
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_PlaylistSyncResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._isDeleted ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    /// Returns true if `isDeleted` has been explicitly set.
    var hasIsDeleted: Bool { _storage._isDeleted != nil }
    /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
    mutating func clearIsDeleted() { _uniqueStorage()._isDeleted = nil }
    
    var title: String {
        get { _storage._title }
        set { _uniqueStorage()._title = newValue }
    }
    
    var audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._audioVideo ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._audioVideo = newValue }
    }
    
    /// Returns true if `audioVideo` has been explicitly set.
    var hasAudioVideo: Bool { _storage._audioVideo != nil }
    /// Clears the value of `audioVideo`. Subsequent reads from it will return its default value.
    mutating func clearAudioVideo() { _uniqueStorage()._audioVideo = nil }
    
    var notDownloaded: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._notDownloaded ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._notDownloaded = newValue }
    }
    
    /// Returns true if `notDownloaded` has been explicitly set.
    var hasNotDownloaded: Bool { _storage._notDownloaded != nil }
    /// Clears the value of `notDownloaded`. Subsequent reads from it will return its default value.
    mutating func clearNotDownloaded() { _uniqueStorage()._notDownloaded = nil }
    
    var downloaded: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._downloaded ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._downloaded = newValue }
    }
    
    /// Returns true if `downloaded` has been explicitly set.
    var hasDownloaded: Bool { _storage._downloaded != nil }
    /// Clears the value of `downloaded`. Subsequent reads from it will return its default value.
    mutating func clearDownloaded() { _uniqueStorage()._downloaded = nil }
    
    var downloading: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._downloading ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._downloading = newValue }
    }
    
    /// Returns true if `downloading` has been explicitly set.
    var hasDownloading: Bool { _storage._downloading != nil }
    /// Clears the value of `downloading`. Subsequent reads from it will return its default value.
    mutating func clearDownloading() { _uniqueStorage()._downloading = nil }
    
    var finished: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._finished ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._finished = newValue }
    }
    
    /// Returns true if `finished` has been explicitly set.
    var hasFinished: Bool { _storage._finished != nil }
    /// Clears the value of `finished`. Subsequent reads from it will return its default value.
    mutating func clearFinished() { _uniqueStorage()._finished = nil }
    
    var partiallyPlayed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._partiallyPlayed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._partiallyPlayed = newValue }
    }
    
    /// Returns true if `partiallyPlayed` has been explicitly set.
    var hasPartiallyPlayed: Bool { _storage._partiallyPlayed != nil }
    /// Clears the value of `partiallyPlayed`. Subsequent reads from it will return its default value.
    mutating func clearPartiallyPlayed() { _uniqueStorage()._partiallyPlayed = nil }
    
    var unplayed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._unplayed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._unplayed = newValue }
    }
    
    /// Returns true if `unplayed` has been explicitly set.
    var hasUnplayed: Bool { _storage._unplayed != nil }
    /// Clears the value of `unplayed`. Subsequent reads from it will return its default value.
    mutating func clearUnplayed() { _uniqueStorage()._unplayed = nil }
    
    var starred: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._starred ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._starred = newValue }
    }
    
    /// Returns true if `starred` has been explicitly set.
    var hasStarred: Bool { _storage._starred != nil }
    /// Clears the value of `starred`. Subsequent reads from it will return its default value.
    mutating func clearStarred() { _uniqueStorage()._starred = nil }
    
    var manual: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._manual ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._manual = newValue }
    }
    
    /// Returns true if `manual` has been explicitly set.
    var hasManual: Bool { _storage._manual != nil }
    /// Clears the value of `manual`. Subsequent reads from it will return its default value.
    mutating func clearManual() { _uniqueStorage()._manual = nil }
    
    var sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortPosition ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortPosition = newValue }
    }
    
    /// Returns true if `sortPosition` has been explicitly set.
    var hasSortPosition: Bool { _storage._sortPosition != nil }
    /// Clears the value of `sortPosition`. Subsequent reads from it will return its default value.
    mutating func clearSortPosition() { _uniqueStorage()._sortPosition = nil }
    
    var sortType: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortType ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortType = newValue }
    }
    
    /// Returns true if `sortType` has been explicitly set.
    var hasSortType: Bool { _storage._sortType != nil }
    /// Clears the value of `sortType`. Subsequent reads from it will return its default value.
    mutating func clearSortType() { _uniqueStorage()._sortType = nil }
    
    var iconID: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._iconID ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._iconID = newValue }
    }
    
    /// Returns true if `iconID` has been explicitly set.
    var hasIconID: Bool { _storage._iconID != nil }
    /// Clears the value of `iconID`. Subsequent reads from it will return its default value.
    mutating func clearIconID() { _uniqueStorage()._iconID = nil }
    
    var allPodcasts: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._allPodcasts ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._allPodcasts = newValue }
    }
    
    /// Returns true if `allPodcasts` has been explicitly set.
    var hasAllPodcasts: Bool { _storage._allPodcasts != nil }
    /// Clears the value of `allPodcasts`. Subsequent reads from it will return its default value.
    mutating func clearAllPodcasts() { _uniqueStorage()._allPodcasts = nil }
    
    var filterHours: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._filterHours ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._filterHours = newValue }
    }
    
    /// Returns true if `filterHours` has been explicitly set.
    var hasFilterHours: Bool { _storage._filterHours != nil }
    /// Clears the value of `filterHours`. Subsequent reads from it will return its default value.
    mutating func clearFilterHours() { _uniqueStorage()._filterHours = nil }
    
    var podcastUuids: String {
        get { _storage._podcastUuids }
        set { _uniqueStorage()._podcastUuids = newValue }
    }
    
    var episodeUuids: String {
        get { _storage._episodeUuids }
        set { _uniqueStorage()._episodeUuids = newValue }
    }
    
    var originalUuid: String {
        get { _storage._originalUuid }
        set { _uniqueStorage()._originalUuid = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_SubscriptionsPurchaseAndroidRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var purchaseToken = String()
    
    var sku = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SubscriptionsPurchaseAppleRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var receipt = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SubscriptionsPurchaseWebRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var transactionID = String()
    
    var email = String()
    
    var paddleUserID: Int64 = 0
    
    var productID = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SubscriptionsStatusResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var paid: Int32 {
        get { _storage._paid }
        set { _uniqueStorage()._paid = newValue }
    }
    
    var platform: Int32 {
        get { _storage._platform }
        set { _uniqueStorage()._platform = newValue }
    }
    
    var expiryDate: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._expiryDate ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._expiryDate = newValue }
    }
    
    /// Returns true if `expiryDate` has been explicitly set.
    var hasExpiryDate: Bool { _storage._expiryDate != nil }
    /// Clears the value of `expiryDate`. Subsequent reads from it will return its default value.
    mutating func clearExpiryDate() { _uniqueStorage()._expiryDate = nil }
    
    var autoRenewing: Bool {
        get { _storage._autoRenewing }
        set { _uniqueStorage()._autoRenewing = newValue }
    }
    
    var giftDays: Int32 {
        get { _storage._giftDays }
        set { _uniqueStorage()._giftDays = newValue }
    }
    
    var cancelURL: String {
        get { _storage._cancelURL }
        set { _uniqueStorage()._cancelURL = newValue }
    }
    
    var updateURL: String {
        get { _storage._updateURL }
        set { _uniqueStorage()._updateURL = newValue }
    }
    
    var frequency: Int32 {
        get { _storage._frequency }
        set { _uniqueStorage()._frequency = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacyRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var device: String {
        get { _storage._device }
        set { _uniqueStorage()._device = newValue }
    }
    
    var datetime: String {
        get { _storage._datetime }
        set { _uniqueStorage()._datetime = newValue }
    }
    
    var v: String {
        get { _storage._v }
        set { _uniqueStorage()._v = newValue }
    }
    
    var av: String {
        get { _storage._av }
        set { _uniqueStorage()._av = newValue }
    }
    
    var ac: String {
        get { _storage._ac }
        set { _uniqueStorage()._ac = newValue }
    }
    
    var h: String {
        get { _storage._h }
        set { _uniqueStorage()._h = newValue }
    }
    
    var dt: String {
        get { _storage._dt }
        set { _uniqueStorage()._dt = newValue }
    }
    
    var c: String {
        get { _storage._c }
        set { _uniqueStorage()._c = newValue }
    }
    
    var l: String {
        get { _storage._l }
        set { _uniqueStorage()._l = newValue }
    }
    
    var m: String {
        get { _storage._m }
        set { _uniqueStorage()._m = newValue }
    }
    
    var email: String {
        get { _storage._email }
        set { _uniqueStorage()._email = newValue }
    }
    
    var password: String {
        get { _storage._password }
        set { _uniqueStorage()._password = newValue }
    }
    
    var token: String {
        get { _storage._token }
        set { _uniqueStorage()._token = newValue }
    }
    
    var deviceUtcTimeMs: String {
        get { _storage._deviceUtcTimeMs }
        set { _uniqueStorage()._deviceUtcTimeMs = newValue }
    }
    
    var data: String {
        get { _storage._data }
        set { _uniqueStorage()._data = newValue }
    }
    
    var message: String {
        get { _storage._message }
        set { _uniqueStorage()._message = newValue }
    }
    
    var lastModified: String {
        get { _storage._lastModified }
        set { _uniqueStorage()._lastModified = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacyResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var status = String()
    
    var token = String()
    
    var copyright = String()
    
    var result = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SyncUpdateRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var deviceUtcTimeMs: Int64 = 0
    
    var lastModified: Int64 = 0
    
    var country = String()
    
    var deviceID = String()
    
    var records: [Api_Record] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_SyncUpdateResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var lastModified: Int64 = 0
    
    var records: [Api_Record] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_Record {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var record: OneOf_Record? {
        get { _storage._record }
        set { _uniqueStorage()._record = newValue }
    }
    
    var podcast: Api_SyncUserPodcast {
        get {
            if case let .podcast(v)? = _storage._record { return v }
            return Api_SyncUserPodcast()
        }
        set { _uniqueStorage()._record = .podcast(newValue) }
    }
    
    var episode: Api_SyncUserEpisode {
        get {
            if case let .episode(v)? = _storage._record { return v }
            return Api_SyncUserEpisode()
        }
        set { _uniqueStorage()._record = .episode(newValue) }
    }
    
    var playlist: Api_SyncUserPlaylist {
        get {
            if case let .playlist(v)? = _storage._record { return v }
            return Api_SyncUserPlaylist()
        }
        set { _uniqueStorage()._record = .playlist(newValue) }
    }
    
    var device: Api_SyncUserDevice {
        get {
            if case let .device(v)? = _storage._record { return v }
            return Api_SyncUserDevice()
        }
        set { _uniqueStorage()._record = .device(newValue) }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    enum OneOf_Record: Equatable {
        case podcast(Api_SyncUserPodcast)
        case episode(Api_SyncUserEpisode)
        case playlist(Api_SyncUserPlaylist)
        case device(Api_SyncUserDevice)
        
        #if !swift(>=4.1)
            static func == (lhs: Api_Record.OneOf_Record, rhs: Api_Record.OneOf_Record) -> Bool {
                switch (lhs, rhs) {
                case let (.podcast(l), .podcast(r)): return l == r
                case let (.episode(l), .episode(r)): return l == r
                case let (.playlist(l), .playlist(r)): return l == r
                case let (.device(l), .device(r)): return l == r
                default: return false
                }
            }
        #endif
    }
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_SyncUserPodcast {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._isDeleted ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    /// Returns true if `isDeleted` has been explicitly set.
    var hasIsDeleted: Bool { _storage._isDeleted != nil }
    /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
    mutating func clearIsDeleted() { _uniqueStorage()._isDeleted = nil }
    
    var subscribed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._subscribed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._subscribed = newValue }
    }
    
    /// Returns true if `subscribed` has been explicitly set.
    var hasSubscribed: Bool { _storage._subscribed != nil }
    /// Clears the value of `subscribed`. Subsequent reads from it will return its default value.
    mutating func clearSubscribed() { _uniqueStorage()._subscribed = nil }
    
    var autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoStartFrom ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoStartFrom = newValue }
    }
    
    /// Returns true if `autoStartFrom` has been explicitly set.
    var hasAutoStartFrom: Bool { _storage._autoStartFrom != nil }
    /// Clears the value of `autoStartFrom`. Subsequent reads from it will return its default value.
    mutating func clearAutoStartFrom() { _uniqueStorage()._autoStartFrom = nil }
    
    var episodesSortOrder: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._episodesSortOrder ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._episodesSortOrder = newValue }
    }
    
    /// Returns true if `episodesSortOrder` has been explicitly set.
    var hasEpisodesSortOrder: Bool { _storage._episodesSortOrder != nil }
    /// Clears the value of `episodesSortOrder`. Subsequent reads from it will return its default value.
    mutating func clearEpisodesSortOrder() { _uniqueStorage()._episodesSortOrder = nil }
    
    var autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoSkipLast ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoSkipLast = newValue }
    }
    
    /// Returns true if `autoSkipLast` has been explicitly set.
    var hasAutoSkipLast: Bool { _storage._autoSkipLast != nil }
    /// Clears the value of `autoSkipLast`. Subsequent reads from it will return its default value.
    mutating func clearAutoSkipLast() { _uniqueStorage()._autoSkipLast = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_SyncUserEpisode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var podcastUuid: String {
        get { _storage._podcastUuid }
        set { _uniqueStorage()._podcastUuid = newValue }
    }
    
    var isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._isDeleted ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    /// Returns true if `isDeleted` has been explicitly set.
    var hasIsDeleted: Bool { _storage._isDeleted != nil }
    /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
    mutating func clearIsDeleted() { _uniqueStorage()._isDeleted = nil }
    
    var isDeletedModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._isDeletedModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._isDeletedModified = newValue }
    }
    
    /// Returns true if `isDeletedModified` has been explicitly set.
    var hasIsDeletedModified: Bool { _storage._isDeletedModified != nil }
    /// Clears the value of `isDeletedModified`. Subsequent reads from it will return its default value.
    mutating func clearIsDeletedModified() { _uniqueStorage()._isDeletedModified = nil }
    
    var duration: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._duration ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._duration = newValue }
    }
    
    /// Returns true if `duration` has been explicitly set.
    var hasDuration: Bool { _storage._duration != nil }
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
    mutating func clearDuration() { _uniqueStorage()._duration = nil }
    
    var durationModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._durationModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._durationModified = newValue }
    }
    
    /// Returns true if `durationModified` has been explicitly set.
    var hasDurationModified: Bool { _storage._durationModified != nil }
    /// Clears the value of `durationModified`. Subsequent reads from it will return its default value.
    mutating func clearDurationModified() { _uniqueStorage()._durationModified = nil }
    
    var playingStatus: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._playingStatus ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._playingStatus = newValue }
    }
    
    /// Returns true if `playingStatus` has been explicitly set.
    var hasPlayingStatus: Bool { _storage._playingStatus != nil }
    /// Clears the value of `playingStatus`. Subsequent reads from it will return its default value.
    mutating func clearPlayingStatus() { _uniqueStorage()._playingStatus = nil }
    
    var playingStatusModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playingStatusModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playingStatusModified = newValue }
    }
    
    /// Returns true if `playingStatusModified` has been explicitly set.
    var hasPlayingStatusModified: Bool { _storage._playingStatusModified != nil }
    /// Clears the value of `playingStatusModified`. Subsequent reads from it will return its default value.
    mutating func clearPlayingStatusModified() { _uniqueStorage()._playingStatusModified = nil }
    
    var playedUpTo: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playedUpTo ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playedUpTo = newValue }
    }
    
    /// Returns true if `playedUpTo` has been explicitly set.
    var hasPlayedUpTo: Bool { _storage._playedUpTo != nil }
    /// Clears the value of `playedUpTo`. Subsequent reads from it will return its default value.
    mutating func clearPlayedUpTo() { _uniqueStorage()._playedUpTo = nil }
    
    var playedUpToModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playedUpToModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playedUpToModified = newValue }
    }
    
    /// Returns true if `playedUpToModified` has been explicitly set.
    var hasPlayedUpToModified: Bool { _storage._playedUpToModified != nil }
    /// Clears the value of `playedUpToModified`. Subsequent reads from it will return its default value.
    mutating func clearPlayedUpToModified() { _uniqueStorage()._playedUpToModified = nil }
    
    var starred: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._starred ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._starred = newValue }
    }
    
    /// Returns true if `starred` has been explicitly set.
    var hasStarred: Bool { _storage._starred != nil }
    /// Clears the value of `starred`. Subsequent reads from it will return its default value.
    mutating func clearStarred() { _uniqueStorage()._starred = nil }
    
    var starredModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._starredModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._starredModified = newValue }
    }
    
    /// Returns true if `starredModified` has been explicitly set.
    var hasStarredModified: Bool { _storage._starredModified != nil }
    /// Clears the value of `starredModified`. Subsequent reads from it will return its default value.
    mutating func clearStarredModified() { _uniqueStorage()._starredModified = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_SyncUserDevice {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var deviceID: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._deviceID ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._deviceID = newValue }
    }
    
    /// Returns true if `deviceID` has been explicitly set.
    var hasDeviceID: Bool { _storage._deviceID != nil }
    /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
    mutating func clearDeviceID() { _uniqueStorage()._deviceID = nil }
    
    var deviceType: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._deviceType ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._deviceType = newValue }
    }
    
    /// Returns true if `deviceType` has been explicitly set.
    var hasDeviceType: Bool { _storage._deviceType != nil }
    /// Clears the value of `deviceType`. Subsequent reads from it will return its default value.
    mutating func clearDeviceType() { _uniqueStorage()._deviceType = nil }
    
    /// times in seconds
    var timesStartedAt: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timesStartedAt ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timesStartedAt = newValue }
    }
    
    /// Returns true if `timesStartedAt` has been explicitly set.
    var hasTimesStartedAt: Bool { _storage._timesStartedAt != nil }
    /// Clears the value of `timesStartedAt`. Subsequent reads from it will return its default value.
    mutating func clearTimesStartedAt() { _uniqueStorage()._timesStartedAt = nil }
    
    var timeSilenceRemoval: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeSilenceRemoval ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeSilenceRemoval = newValue }
    }
    
    /// Returns true if `timeSilenceRemoval` has been explicitly set.
    var hasTimeSilenceRemoval: Bool { _storage._timeSilenceRemoval != nil }
    /// Clears the value of `timeSilenceRemoval`. Subsequent reads from it will return its default value.
    mutating func clearTimeSilenceRemoval() { _uniqueStorage()._timeSilenceRemoval = nil }
    
    var timeVariableSpeed: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeVariableSpeed ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeVariableSpeed = newValue }
    }
    
    /// Returns true if `timeVariableSpeed` has been explicitly set.
    var hasTimeVariableSpeed: Bool { _storage._timeVariableSpeed != nil }
    /// Clears the value of `timeVariableSpeed`. Subsequent reads from it will return its default value.
    mutating func clearTimeVariableSpeed() { _uniqueStorage()._timeVariableSpeed = nil }
    
    var timeIntroSkipping: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeIntroSkipping ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeIntroSkipping = newValue }
    }
    
    /// Returns true if `timeIntroSkipping` has been explicitly set.
    var hasTimeIntroSkipping: Bool { _storage._timeIntroSkipping != nil }
    /// Clears the value of `timeIntroSkipping`. Subsequent reads from it will return its default value.
    mutating func clearTimeIntroSkipping() { _uniqueStorage()._timeIntroSkipping = nil }
    
    var timeSkipping: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeSkipping ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeSkipping = newValue }
    }
    
    /// Returns true if `timeSkipping` has been explicitly set.
    var hasTimeSkipping: Bool { _storage._timeSkipping != nil }
    /// Clears the value of `timeSkipping`. Subsequent reads from it will return its default value.
    mutating func clearTimeSkipping() { _uniqueStorage()._timeSkipping = nil }
    
    var timeListened: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeListened ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeListened = newValue }
    }
    
    /// Returns true if `timeListened` has been explicitly set.
    var hasTimeListened: Bool { _storage._timeListened != nil }
    /// Clears the value of `timeListened`. Subsequent reads from it will return its default value.
    mutating func clearTimeListened() { _uniqueStorage()._timeListened = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_SyncUserPlaylist {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: String {
        get { _storage._uuid }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    var isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._isDeleted ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    /// Returns true if `isDeleted` has been explicitly set.
    var hasIsDeleted: Bool { _storage._isDeleted != nil }
    /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
    mutating func clearIsDeleted() { _uniqueStorage()._isDeleted = nil }
    
    var title: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._title ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._title = newValue }
    }
    
    /// Returns true if `title` has been explicitly set.
    var hasTitle: Bool { _storage._title != nil }
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
    mutating func clearTitle() { _uniqueStorage()._title = nil }
    
    var allPodcasts: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._allPodcasts ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._allPodcasts = newValue }
    }
    
    /// Returns true if `allPodcasts` has been explicitly set.
    var hasAllPodcasts: Bool { _storage._allPodcasts != nil }
    /// Clears the value of `allPodcasts`. Subsequent reads from it will return its default value.
    mutating func clearAllPodcasts() { _uniqueStorage()._allPodcasts = nil }
    
    var podcastUuids: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._podcastUuids ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._podcastUuids = newValue }
    }
    
    /// Returns true if `podcastUuids` has been explicitly set.
    var hasPodcastUuids: Bool { _storage._podcastUuids != nil }
    /// Clears the value of `podcastUuids`. Subsequent reads from it will return its default value.
    mutating func clearPodcastUuids() { _uniqueStorage()._podcastUuids = nil }
    
    var episodeUuids: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._episodeUuids ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._episodeUuids = newValue }
    }
    
    /// Returns true if `episodeUuids` has been explicitly set.
    var hasEpisodeUuids: Bool { _storage._episodeUuids != nil }
    /// Clears the value of `episodeUuids`. Subsequent reads from it will return its default value.
    mutating func clearEpisodeUuids() { _uniqueStorage()._episodeUuids = nil }
    
    var audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._audioVideo ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._audioVideo = newValue }
    }
    
    /// Returns true if `audioVideo` has been explicitly set.
    var hasAudioVideo: Bool { _storage._audioVideo != nil }
    /// Clears the value of `audioVideo`. Subsequent reads from it will return its default value.
    mutating func clearAudioVideo() { _uniqueStorage()._audioVideo = nil }
    
    var notDownloaded: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._notDownloaded ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._notDownloaded = newValue }
    }
    
    /// Returns true if `notDownloaded` has been explicitly set.
    var hasNotDownloaded: Bool { _storage._notDownloaded != nil }
    /// Clears the value of `notDownloaded`. Subsequent reads from it will return its default value.
    mutating func clearNotDownloaded() { _uniqueStorage()._notDownloaded = nil }
    
    var downloaded: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._downloaded ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._downloaded = newValue }
    }
    
    /// Returns true if `downloaded` has been explicitly set.
    var hasDownloaded: Bool { _storage._downloaded != nil }
    /// Clears the value of `downloaded`. Subsequent reads from it will return its default value.
    mutating func clearDownloaded() { _uniqueStorage()._downloaded = nil }
    
    var downloading: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._downloading ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._downloading = newValue }
    }
    
    /// Returns true if `downloading` has been explicitly set.
    var hasDownloading: Bool { _storage._downloading != nil }
    /// Clears the value of `downloading`. Subsequent reads from it will return its default value.
    mutating func clearDownloading() { _uniqueStorage()._downloading = nil }
    
    var finished: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._finished ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._finished = newValue }
    }
    
    /// Returns true if `finished` has been explicitly set.
    var hasFinished: Bool { _storage._finished != nil }
    /// Clears the value of `finished`. Subsequent reads from it will return its default value.
    mutating func clearFinished() { _uniqueStorage()._finished = nil }
    
    var partiallyPlayed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._partiallyPlayed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._partiallyPlayed = newValue }
    }
    
    /// Returns true if `partiallyPlayed` has been explicitly set.
    var hasPartiallyPlayed: Bool { _storage._partiallyPlayed != nil }
    /// Clears the value of `partiallyPlayed`. Subsequent reads from it will return its default value.
    mutating func clearPartiallyPlayed() { _uniqueStorage()._partiallyPlayed = nil }
    
    var unplayed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._unplayed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._unplayed = newValue }
    }
    
    /// Returns true if `unplayed` has been explicitly set.
    var hasUnplayed: Bool { _storage._unplayed != nil }
    /// Clears the value of `unplayed`. Subsequent reads from it will return its default value.
    mutating func clearUnplayed() { _uniqueStorage()._unplayed = nil }
    
    var starred: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._starred ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._starred = newValue }
    }
    
    /// Returns true if `starred` has been explicitly set.
    var hasStarred: Bool { _storage._starred != nil }
    /// Clears the value of `starred`. Subsequent reads from it will return its default value.
    mutating func clearStarred() { _uniqueStorage()._starred = nil }
    
    var manual: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._manual ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._manual = newValue }
    }
    
    /// Returns true if `manual` has been explicitly set.
    var hasManual: Bool { _storage._manual != nil }
    /// Clears the value of `manual`. Subsequent reads from it will return its default value.
    mutating func clearManual() { _uniqueStorage()._manual = nil }
    
    var sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortPosition ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortPosition = newValue }
    }
    
    /// Returns true if `sortPosition` has been explicitly set.
    var hasSortPosition: Bool { _storage._sortPosition != nil }
    /// Clears the value of `sortPosition`. Subsequent reads from it will return its default value.
    mutating func clearSortPosition() { _uniqueStorage()._sortPosition = nil }
    
    var sortType: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortType ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortType = newValue }
    }
    
    /// Returns true if `sortType` has been explicitly set.
    var hasSortType: Bool { _storage._sortType != nil }
    /// Clears the value of `sortType`. Subsequent reads from it will return its default value.
    mutating func clearSortType() { _uniqueStorage()._sortType = nil }
    
    var iconID: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._iconID ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._iconID = newValue }
    }
    
    /// Returns true if `iconID` has been explicitly set.
    var hasIconID: Bool { _storage._iconID != nil }
    /// Clears the value of `iconID`. Subsequent reads from it will return its default value.
    mutating func clearIconID() { _uniqueStorage()._iconID = nil }
    
    var filterHours: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._filterHours ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._filterHours = newValue }
    }
    
    /// Returns true if `filterHours` has been explicitly set.
    var hasFilterHours: Bool { _storage._filterHours != nil }
    /// Clears the value of `filterHours`. Subsequent reads from it will return its default value.
    mutating func clearFilterHours() { _uniqueStorage()._filterHours = nil }
    
    var originalUuid: String {
        get { _storage._originalUuid }
        set { _uniqueStorage()._originalUuid = newValue }
    }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacySyncData {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var records: [Api_LegacySyncRecord] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_LegacySyncRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var type: String {
        get { _storage._type }
        set { _uniqueStorage()._type = newValue }
    }
    
    var fields: Api_LegacyRecord {
        get { _storage._fields ?? Api_LegacyRecord() }
        set { _uniqueStorage()._fields = newValue }
    }
    
    /// Returns true if `fields` has been explicitly set.
    var hasFields: Bool { _storage._fields != nil }
    /// Clears the value of `fields`. Subsequent reads from it will return its default value.
    mutating func clearFields() { _uniqueStorage()._fields = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacyRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._uuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool { _storage._uuid != nil }
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() { _uniqueStorage()._uuid = nil }
    
    var userPodcastUuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._userPodcastUuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._userPodcastUuid = newValue }
    }
    
    /// Returns true if `userPodcastUuid` has been explicitly set.
    var hasUserPodcastUuid: Bool { _storage._userPodcastUuid != nil }
    /// Clears the value of `userPodcastUuid`. Subsequent reads from it will return its default value.
    mutating func clearUserPodcastUuid() { _uniqueStorage()._userPodcastUuid = nil }
    
    var episodeUuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._episodeUuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._episodeUuid = newValue }
    }
    
    /// Returns true if `episodeUuid` has been explicitly set.
    var hasEpisodeUuid: Bool { _storage._episodeUuid != nil }
    /// Clears the value of `episodeUuid`. Subsequent reads from it will return its default value.
    mutating func clearEpisodeUuid() { _uniqueStorage()._episodeUuid = nil }
    
    var podcastUuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._podcastUuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._podcastUuid = newValue }
    }
    
    /// Returns true if `podcastUuid` has been explicitly set.
    var hasPodcastUuid: Bool { _storage._podcastUuid != nil }
    /// Clears the value of `podcastUuid`. Subsequent reads from it will return its default value.
    mutating func clearPodcastUuid() { _uniqueStorage()._podcastUuid = nil }
    
    var isDeleted: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._isDeleted ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    /// Returns true if `isDeleted` has been explicitly set.
    var hasIsDeleted: Bool { _storage._isDeleted != nil }
    /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
    mutating func clearIsDeleted() { _uniqueStorage()._isDeleted = nil }
    
    var isDeletedModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._isDeletedModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._isDeletedModified = newValue }
    }
    
    /// Returns true if `isDeletedModified` has been explicitly set.
    var hasIsDeletedModified: Bool { _storage._isDeletedModified != nil }
    /// Clears the value of `isDeletedModified`. Subsequent reads from it will return its default value.
    mutating func clearIsDeletedModified() { _uniqueStorage()._isDeletedModified = nil }
    
    var duration: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._duration ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._duration = newValue }
    }
    
    /// Returns true if `duration` has been explicitly set.
    var hasDuration: Bool { _storage._duration != nil }
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
    mutating func clearDuration() { _uniqueStorage()._duration = nil }
    
    var durationModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._durationModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._durationModified = newValue }
    }
    
    /// Returns true if `durationModified` has been explicitly set.
    var hasDurationModified: Bool { _storage._durationModified != nil }
    /// Clears the value of `durationModified`. Subsequent reads from it will return its default value.
    mutating func clearDurationModified() { _uniqueStorage()._durationModified = nil }
    
    var playingStatus: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._playingStatus ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._playingStatus = newValue }
    }
    
    /// Returns true if `playingStatus` has been explicitly set.
    var hasPlayingStatus: Bool { _storage._playingStatus != nil }
    /// Clears the value of `playingStatus`. Subsequent reads from it will return its default value.
    mutating func clearPlayingStatus() { _uniqueStorage()._playingStatus = nil }
    
    var playingStatusModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playingStatusModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playingStatusModified = newValue }
    }
    
    /// Returns true if `playingStatusModified` has been explicitly set.
    var hasPlayingStatusModified: Bool { _storage._playingStatusModified != nil }
    /// Clears the value of `playingStatusModified`. Subsequent reads from it will return its default value.
    mutating func clearPlayingStatusModified() { _uniqueStorage()._playingStatusModified = nil }
    
    var playedUpTo: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._playedUpTo ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._playedUpTo = newValue }
    }
    
    /// Returns true if `playedUpTo` has been explicitly set.
    var hasPlayedUpTo: Bool { _storage._playedUpTo != nil }
    /// Clears the value of `playedUpTo`. Subsequent reads from it will return its default value.
    mutating func clearPlayedUpTo() { _uniqueStorage()._playedUpTo = nil }
    
    var playedUpToModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playedUpToModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playedUpToModified = newValue }
    }
    
    /// Returns true if `playedUpToModified` has been explicitly set.
    var hasPlayedUpToModified: Bool { _storage._playedUpToModified != nil }
    /// Clears the value of `playedUpToModified`. Subsequent reads from it will return its default value.
    mutating func clearPlayedUpToModified() { _uniqueStorage()._playedUpToModified = nil }
    
    var starred: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._starred ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._starred = newValue }
    }
    
    /// Returns true if `starred` has been explicitly set.
    var hasStarred: Bool { _storage._starred != nil }
    /// Clears the value of `starred`. Subsequent reads from it will return its default value.
    mutating func clearStarred() { _uniqueStorage()._starred = nil }
    
    var starredModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._starredModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._starredModified = newValue }
    }
    
    /// Returns true if `starredModified` has been explicitly set.
    var hasStarredModified: Bool { _storage._starredModified != nil }
    /// Clears the value of `starredModified`. Subsequent reads from it will return its default value.
    mutating func clearStarredModified() { _uniqueStorage()._starredModified = nil }
    
    var timesStartedAt: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._timesStartedAt ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._timesStartedAt = newValue }
    }
    
    /// Returns true if `timesStartedAt` has been explicitly set.
    var hasTimesStartedAt: Bool { _storage._timesStartedAt != nil }
    /// Clears the value of `timesStartedAt`. Subsequent reads from it will return its default value.
    mutating func clearTimesStartedAt() { _uniqueStorage()._timesStartedAt = nil }
    
    var timeSilenceRemoval: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._timeSilenceRemoval ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._timeSilenceRemoval = newValue }
    }
    
    /// Returns true if `timeSilenceRemoval` has been explicitly set.
    var hasTimeSilenceRemoval: Bool { _storage._timeSilenceRemoval != nil }
    /// Clears the value of `timeSilenceRemoval`. Subsequent reads from it will return its default value.
    mutating func clearTimeSilenceRemoval() { _uniqueStorage()._timeSilenceRemoval = nil }
    
    var timeVariableSpeed: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._timeVariableSpeed ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._timeVariableSpeed = newValue }
    }
    
    /// Returns true if `timeVariableSpeed` has been explicitly set.
    var hasTimeVariableSpeed: Bool { _storage._timeVariableSpeed != nil }
    /// Clears the value of `timeVariableSpeed`. Subsequent reads from it will return its default value.
    mutating func clearTimeVariableSpeed() { _uniqueStorage()._timeVariableSpeed = nil }
    
    var timeIntroSkipping: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._timeIntroSkipping ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._timeIntroSkipping = newValue }
    }
    
    /// Returns true if `timeIntroSkipping` has been explicitly set.
    var hasTimeIntroSkipping: Bool { _storage._timeIntroSkipping != nil }
    /// Clears the value of `timeIntroSkipping`. Subsequent reads from it will return its default value.
    mutating func clearTimeIntroSkipping() { _uniqueStorage()._timeIntroSkipping = nil }
    
    var timeSkipping: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._timeSkipping ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._timeSkipping = newValue }
    }
    
    /// Returns true if `timeSkipping` has been explicitly set.
    var hasTimeSkipping: Bool { _storage._timeSkipping != nil }
    /// Clears the value of `timeSkipping`. Subsequent reads from it will return its default value.
    mutating func clearTimeSkipping() { _uniqueStorage()._timeSkipping = nil }
    
    var timeListened: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._timeListened ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._timeListened = newValue }
    }
    
    /// Returns true if `timeListened` has been explicitly set.
    var hasTimeListened: Bool { _storage._timeListened != nil }
    /// Clears the value of `timeListened`. Subsequent reads from it will return its default value.
    mutating func clearTimeListened() { _uniqueStorage()._timeListened = nil }
    
    var autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoStartFrom ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoStartFrom = newValue }
    }
    
    /// Returns true if `autoStartFrom` has been explicitly set.
    var hasAutoStartFrom: Bool { _storage._autoStartFrom != nil }
    /// Clears the value of `autoStartFrom`. Subsequent reads from it will return its default value.
    mutating func clearAutoStartFrom() { _uniqueStorage()._autoStartFrom = nil }
    
    var subscribed: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._subscribed ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._subscribed = newValue }
    }
    
    /// Returns true if `subscribed` has been explicitly set.
    var hasSubscribed: Bool { _storage._subscribed != nil }
    /// Clears the value of `subscribed`. Subsequent reads from it will return its default value.
    mutating func clearSubscribed() { _uniqueStorage()._subscribed = nil }
    
    var title: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._title ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._title = newValue }
    }
    
    /// Returns true if `title` has been explicitly set.
    var hasTitle: Bool { _storage._title != nil }
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
    mutating func clearTitle() { _uniqueStorage()._title = nil }
    
    /// then a heap of playlist fields
    var allPodcasts: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._allPodcasts ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._allPodcasts = newValue }
    }
    
    /// Returns true if `allPodcasts` has been explicitly set.
    var hasAllPodcasts: Bool { _storage._allPodcasts != nil }
    /// Clears the value of `allPodcasts`. Subsequent reads from it will return its default value.
    mutating func clearAllPodcasts() { _uniqueStorage()._allPodcasts = nil }
    
    var podcastUuids: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._podcastUuids ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._podcastUuids = newValue }
    }
    
    /// Returns true if `podcastUuids` has been explicitly set.
    var hasPodcastUuids: Bool { _storage._podcastUuids != nil }
    /// Clears the value of `podcastUuids`. Subsequent reads from it will return its default value.
    mutating func clearPodcastUuids() { _uniqueStorage()._podcastUuids = nil }
    
    var episodeUuids: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._episodeUuids ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._episodeUuids = newValue }
    }
    
    /// Returns true if `episodeUuids` has been explicitly set.
    var hasEpisodeUuids: Bool { _storage._episodeUuids != nil }
    /// Clears the value of `episodeUuids`. Subsequent reads from it will return its default value.
    mutating func clearEpisodeUuids() { _uniqueStorage()._episodeUuids = nil }
    
    var audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._audioVideo ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._audioVideo = newValue }
    }
    
    /// Returns true if `audioVideo` has been explicitly set.
    var hasAudioVideo: Bool { _storage._audioVideo != nil }
    /// Clears the value of `audioVideo`. Subsequent reads from it will return its default value.
    mutating func clearAudioVideo() { _uniqueStorage()._audioVideo = nil }
    
    var notDownloaded: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._notDownloaded ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._notDownloaded = newValue }
    }
    
    /// Returns true if `notDownloaded` has been explicitly set.
    var hasNotDownloaded: Bool { _storage._notDownloaded != nil }
    /// Clears the value of `notDownloaded`. Subsequent reads from it will return its default value.
    mutating func clearNotDownloaded() { _uniqueStorage()._notDownloaded = nil }
    
    var downloaded: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._downloaded ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._downloaded = newValue }
    }
    
    /// Returns true if `downloaded` has been explicitly set.
    var hasDownloaded: Bool { _storage._downloaded != nil }
    /// Clears the value of `downloaded`. Subsequent reads from it will return its default value.
    mutating func clearDownloaded() { _uniqueStorage()._downloaded = nil }
    
    var downloading: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._downloading ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._downloading = newValue }
    }
    
    /// Returns true if `downloading` has been explicitly set.
    var hasDownloading: Bool { _storage._downloading != nil }
    /// Clears the value of `downloading`. Subsequent reads from it will return its default value.
    mutating func clearDownloading() { _uniqueStorage()._downloading = nil }
    
    var finished: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._finished ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._finished = newValue }
    }
    
    /// Returns true if `finished` has been explicitly set.
    var hasFinished: Bool { _storage._finished != nil }
    /// Clears the value of `finished`. Subsequent reads from it will return its default value.
    mutating func clearFinished() { _uniqueStorage()._finished = nil }
    
    var partiallyPlayed: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._partiallyPlayed ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._partiallyPlayed = newValue }
    }
    
    /// Returns true if `partiallyPlayed` has been explicitly set.
    var hasPartiallyPlayed: Bool { _storage._partiallyPlayed != nil }
    /// Clears the value of `partiallyPlayed`. Subsequent reads from it will return its default value.
    mutating func clearPartiallyPlayed() { _uniqueStorage()._partiallyPlayed = nil }
    
    var unplayed: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._unplayed ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._unplayed = newValue }
    }
    
    /// Returns true if `unplayed` has been explicitly set.
    var hasUnplayed: Bool { _storage._unplayed != nil }
    /// Clears the value of `unplayed`. Subsequent reads from it will return its default value.
    mutating func clearUnplayed() { _uniqueStorage()._unplayed = nil }
    
    var manual: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._manual ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._manual = newValue }
    }
    
    /// Returns true if `manual` has been explicitly set.
    var hasManual: Bool { _storage._manual != nil }
    /// Clears the value of `manual`. Subsequent reads from it will return its default value.
    mutating func clearManual() { _uniqueStorage()._manual = nil }
    
    var sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortPosition ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortPosition = newValue }
    }
    
    /// Returns true if `sortPosition` has been explicitly set.
    var hasSortPosition: Bool { _storage._sortPosition != nil }
    /// Clears the value of `sortPosition`. Subsequent reads from it will return its default value.
    mutating func clearSortPosition() { _uniqueStorage()._sortPosition = nil }
    
    var sortType: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortType ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortType = newValue }
    }
    
    /// Returns true if `sortType` has been explicitly set.
    var hasSortType: Bool { _storage._sortType != nil }
    /// Clears the value of `sortType`. Subsequent reads from it will return its default value.
    mutating func clearSortType() { _uniqueStorage()._sortType = nil }
    
    var iconID: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._iconID ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._iconID = newValue }
    }
    
    /// Returns true if `iconID` has been explicitly set.
    var hasIconID: Bool { _storage._iconID != nil }
    /// Clears the value of `iconID`. Subsequent reads from it will return its default value.
    mutating func clearIconID() { _uniqueStorage()._iconID = nil }
    
    var filterHours: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._filterHours ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._filterHours = newValue }
    }
    
    /// Returns true if `filterHours` has been explicitly set.
    var hasFilterHours: Bool { _storage._filterHours != nil }
    /// Clears the value of `filterHours`. Subsequent reads from it will return its default value.
    mutating func clearFilterHours() { _uniqueStorage()._filterHours = nil }
    
    /// new fields
    var autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoSkipLast ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoSkipLast = newValue }
    }
    
    /// Returns true if `autoSkipLast` has been explicitly set.
    var hasAutoSkipLast: Bool { _storage._autoSkipLast != nil }
    /// Clears the value of `autoSkipLast`. Subsequent reads from it will return its default value.
    mutating func clearAutoSkipLast() { _uniqueStorage()._autoSkipLast = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacySyncResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var lastModified = String()
    
    var changes: [Api_LegacySyncResponseRecord] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_LegacySyncResponseRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var type: String {
        get { _storage._type }
        set { _uniqueStorage()._type = newValue }
    }
    
    var fields: Api_LegacyResponseRecord {
        get { _storage._fields ?? Api_LegacyResponseRecord() }
        set { _uniqueStorage()._fields = newValue }
    }
    
    /// Returns true if `fields` has been explicitly set.
    var hasFields: Bool { _storage._fields != nil }
    /// Clears the value of `fields`. Subsequent reads from it will return its default value.
    mutating func clearFields() { _uniqueStorage()._fields = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacyResponseRecord {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var uuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._uuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._uuid = newValue }
    }
    
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool { _storage._uuid != nil }
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() { _uniqueStorage()._uuid = nil }
    
    var userPodcastUuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._userPodcastUuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._userPodcastUuid = newValue }
    }
    
    /// Returns true if `userPodcastUuid` has been explicitly set.
    var hasUserPodcastUuid: Bool { _storage._userPodcastUuid != nil }
    /// Clears the value of `userPodcastUuid`. Subsequent reads from it will return its default value.
    mutating func clearUserPodcastUuid() { _uniqueStorage()._userPodcastUuid = nil }
    
    var episodeUuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._episodeUuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._episodeUuid = newValue }
    }
    
    /// Returns true if `episodeUuid` has been explicitly set.
    var hasEpisodeUuid: Bool { _storage._episodeUuid != nil }
    /// Clears the value of `episodeUuid`. Subsequent reads from it will return its default value.
    mutating func clearEpisodeUuid() { _uniqueStorage()._episodeUuid = nil }
    
    var podcastUuid: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._podcastUuid ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._podcastUuid = newValue }
    }
    
    /// Returns true if `podcastUuid` has been explicitly set.
    var hasPodcastUuid: Bool { _storage._podcastUuid != nil }
    /// Clears the value of `podcastUuid`. Subsequent reads from it will return its default value.
    mutating func clearPodcastUuid() { _uniqueStorage()._podcastUuid = nil }
    
    var isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._isDeleted ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._isDeleted = newValue }
    }
    
    /// Returns true if `isDeleted` has been explicitly set.
    var hasIsDeleted: Bool { _storage._isDeleted != nil }
    /// Clears the value of `isDeleted`. Subsequent reads from it will return its default value.
    mutating func clearIsDeleted() { _uniqueStorage()._isDeleted = nil }
    
    var isDeletedModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._isDeletedModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._isDeletedModified = newValue }
    }
    
    /// Returns true if `isDeletedModified` has been explicitly set.
    var hasIsDeletedModified: Bool { _storage._isDeletedModified != nil }
    /// Clears the value of `isDeletedModified`. Subsequent reads from it will return its default value.
    mutating func clearIsDeletedModified() { _uniqueStorage()._isDeletedModified = nil }
    
    var duration: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._duration ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._duration = newValue }
    }
    
    /// Returns true if `duration` has been explicitly set.
    var hasDuration: Bool { _storage._duration != nil }
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
    mutating func clearDuration() { _uniqueStorage()._duration = nil }
    
    var durationModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._durationModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._durationModified = newValue }
    }
    
    /// Returns true if `durationModified` has been explicitly set.
    var hasDurationModified: Bool { _storage._durationModified != nil }
    /// Clears the value of `durationModified`. Subsequent reads from it will return its default value.
    mutating func clearDurationModified() { _uniqueStorage()._durationModified = nil }
    
    var playingStatus: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._playingStatus ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._playingStatus = newValue }
    }
    
    /// Returns true if `playingStatus` has been explicitly set.
    var hasPlayingStatus: Bool { _storage._playingStatus != nil }
    /// Clears the value of `playingStatus`. Subsequent reads from it will return its default value.
    mutating func clearPlayingStatus() { _uniqueStorage()._playingStatus = nil }
    
    var playingStatusModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playingStatusModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playingStatusModified = newValue }
    }
    
    /// Returns true if `playingStatusModified` has been explicitly set.
    var hasPlayingStatusModified: Bool { _storage._playingStatusModified != nil }
    /// Clears the value of `playingStatusModified`. Subsequent reads from it will return its default value.
    mutating func clearPlayingStatusModified() { _uniqueStorage()._playingStatusModified = nil }
    
    var playedUpTo: SwiftProtobuf.Google_Protobuf_DoubleValue {
        get { _storage._playedUpTo ?? SwiftProtobuf.Google_Protobuf_DoubleValue() }
        set { _uniqueStorage()._playedUpTo = newValue }
    }
    
    /// Returns true if `playedUpTo` has been explicitly set.
    var hasPlayedUpTo: Bool { _storage._playedUpTo != nil }
    /// Clears the value of `playedUpTo`. Subsequent reads from it will return its default value.
    mutating func clearPlayedUpTo() { _uniqueStorage()._playedUpTo = nil }
    
    var playedUpToModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._playedUpToModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._playedUpToModified = newValue }
    }
    
    /// Returns true if `playedUpToModified` has been explicitly set.
    var hasPlayedUpToModified: Bool { _storage._playedUpToModified != nil }
    /// Clears the value of `playedUpToModified`. Subsequent reads from it will return its default value.
    mutating func clearPlayedUpToModified() { _uniqueStorage()._playedUpToModified = nil }
    
    var starred: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._starred ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._starred = newValue }
    }
    
    /// Returns true if `starred` has been explicitly set.
    var hasStarred: Bool { _storage._starred != nil }
    /// Clears the value of `starred`. Subsequent reads from it will return its default value.
    mutating func clearStarred() { _uniqueStorage()._starred = nil }
    
    var starredModified: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._starredModified ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._starredModified = newValue }
    }
    
    /// Returns true if `starredModified` has been explicitly set.
    var hasStarredModified: Bool { _storage._starredModified != nil }
    /// Clears the value of `starredModified`. Subsequent reads from it will return its default value.
    mutating func clearStarredModified() { _uniqueStorage()._starredModified = nil }
    
    var timesStartedAt: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timesStartedAt ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timesStartedAt = newValue }
    }
    
    /// Returns true if `timesStartedAt` has been explicitly set.
    var hasTimesStartedAt: Bool { _storage._timesStartedAt != nil }
    /// Clears the value of `timesStartedAt`. Subsequent reads from it will return its default value.
    mutating func clearTimesStartedAt() { _uniqueStorage()._timesStartedAt = nil }
    
    var timeSilenceRemoval: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeSilenceRemoval ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeSilenceRemoval = newValue }
    }
    
    /// Returns true if `timeSilenceRemoval` has been explicitly set.
    var hasTimeSilenceRemoval: Bool { _storage._timeSilenceRemoval != nil }
    /// Clears the value of `timeSilenceRemoval`. Subsequent reads from it will return its default value.
    mutating func clearTimeSilenceRemoval() { _uniqueStorage()._timeSilenceRemoval = nil }
    
    var timeVariableSpeed: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeVariableSpeed ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeVariableSpeed = newValue }
    }
    
    /// Returns true if `timeVariableSpeed` has been explicitly set.
    var hasTimeVariableSpeed: Bool { _storage._timeVariableSpeed != nil }
    /// Clears the value of `timeVariableSpeed`. Subsequent reads from it will return its default value.
    mutating func clearTimeVariableSpeed() { _uniqueStorage()._timeVariableSpeed = nil }
    
    var timeIntroSkipping: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeIntroSkipping ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeIntroSkipping = newValue }
    }
    
    /// Returns true if `timeIntroSkipping` has been explicitly set.
    var hasTimeIntroSkipping: Bool { _storage._timeIntroSkipping != nil }
    /// Clears the value of `timeIntroSkipping`. Subsequent reads from it will return its default value.
    mutating func clearTimeIntroSkipping() { _uniqueStorage()._timeIntroSkipping = nil }
    
    var timeSkipping: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeSkipping ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeSkipping = newValue }
    }
    
    /// Returns true if `timeSkipping` has been explicitly set.
    var hasTimeSkipping: Bool { _storage._timeSkipping != nil }
    /// Clears the value of `timeSkipping`. Subsequent reads from it will return its default value.
    mutating func clearTimeSkipping() { _uniqueStorage()._timeSkipping = nil }
    
    var timeListened: SwiftProtobuf.Google_Protobuf_Int64Value {
        get { _storage._timeListened ?? SwiftProtobuf.Google_Protobuf_Int64Value() }
        set { _uniqueStorage()._timeListened = newValue }
    }
    
    /// Returns true if `timeListened` has been explicitly set.
    var hasTimeListened: Bool { _storage._timeListened != nil }
    /// Clears the value of `timeListened`. Subsequent reads from it will return its default value.
    mutating func clearTimeListened() { _uniqueStorage()._timeListened = nil }
    
    var autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoStartFrom ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoStartFrom = newValue }
    }
    
    /// Returns true if `autoStartFrom` has been explicitly set.
    var hasAutoStartFrom: Bool { _storage._autoStartFrom != nil }
    /// Clears the value of `autoStartFrom`. Subsequent reads from it will return its default value.
    mutating func clearAutoStartFrom() { _uniqueStorage()._autoStartFrom = nil }
    
    var subscribed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._subscribed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._subscribed = newValue }
    }
    
    /// Returns true if `subscribed` has been explicitly set.
    var hasSubscribed: Bool { _storage._subscribed != nil }
    /// Clears the value of `subscribed`. Subsequent reads from it will return its default value.
    mutating func clearSubscribed() { _uniqueStorage()._subscribed = nil }
    
    var title: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._title ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._title = newValue }
    }
    
    /// Returns true if `title` has been explicitly set.
    var hasTitle: Bool { _storage._title != nil }
    /// Clears the value of `title`. Subsequent reads from it will return its default value.
    mutating func clearTitle() { _uniqueStorage()._title = nil }
    
    /// then a heap of playlist fields
    var allPodcasts: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._allPodcasts ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._allPodcasts = newValue }
    }
    
    /// Returns true if `allPodcasts` has been explicitly set.
    var hasAllPodcasts: Bool { _storage._allPodcasts != nil }
    /// Clears the value of `allPodcasts`. Subsequent reads from it will return its default value.
    mutating func clearAllPodcasts() { _uniqueStorage()._allPodcasts = nil }
    
    var podcastUuids: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._podcastUuids ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._podcastUuids = newValue }
    }
    
    /// Returns true if `podcastUuids` has been explicitly set.
    var hasPodcastUuids: Bool { _storage._podcastUuids != nil }
    /// Clears the value of `podcastUuids`. Subsequent reads from it will return its default value.
    mutating func clearPodcastUuids() { _uniqueStorage()._podcastUuids = nil }
    
    var episodeUuids: SwiftProtobuf.Google_Protobuf_StringValue {
        get { _storage._episodeUuids ?? SwiftProtobuf.Google_Protobuf_StringValue() }
        set { _uniqueStorage()._episodeUuids = newValue }
    }
    
    /// Returns true if `episodeUuids` has been explicitly set.
    var hasEpisodeUuids: Bool { _storage._episodeUuids != nil }
    /// Clears the value of `episodeUuids`. Subsequent reads from it will return its default value.
    mutating func clearEpisodeUuids() { _uniqueStorage()._episodeUuids = nil }
    
    var audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._audioVideo ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._audioVideo = newValue }
    }
    
    /// Returns true if `audioVideo` has been explicitly set.
    var hasAudioVideo: Bool { _storage._audioVideo != nil }
    /// Clears the value of `audioVideo`. Subsequent reads from it will return its default value.
    mutating func clearAudioVideo() { _uniqueStorage()._audioVideo = nil }
    
    var notDownloaded: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._notDownloaded ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._notDownloaded = newValue }
    }
    
    /// Returns true if `notDownloaded` has been explicitly set.
    var hasNotDownloaded: Bool { _storage._notDownloaded != nil }
    /// Clears the value of `notDownloaded`. Subsequent reads from it will return its default value.
    mutating func clearNotDownloaded() { _uniqueStorage()._notDownloaded = nil }
    
    var downloaded: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._downloaded ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._downloaded = newValue }
    }
    
    /// Returns true if `downloaded` has been explicitly set.
    var hasDownloaded: Bool { _storage._downloaded != nil }
    /// Clears the value of `downloaded`. Subsequent reads from it will return its default value.
    mutating func clearDownloaded() { _uniqueStorage()._downloaded = nil }
    
    var downloading: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._downloading ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._downloading = newValue }
    }
    
    /// Returns true if `downloading` has been explicitly set.
    var hasDownloading: Bool { _storage._downloading != nil }
    /// Clears the value of `downloading`. Subsequent reads from it will return its default value.
    mutating func clearDownloading() { _uniqueStorage()._downloading = nil }
    
    var finished: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._finished ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._finished = newValue }
    }
    
    /// Returns true if `finished` has been explicitly set.
    var hasFinished: Bool { _storage._finished != nil }
    /// Clears the value of `finished`. Subsequent reads from it will return its default value.
    mutating func clearFinished() { _uniqueStorage()._finished = nil }
    
    var partiallyPlayed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._partiallyPlayed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._partiallyPlayed = newValue }
    }
    
    /// Returns true if `partiallyPlayed` has been explicitly set.
    var hasPartiallyPlayed: Bool { _storage._partiallyPlayed != nil }
    /// Clears the value of `partiallyPlayed`. Subsequent reads from it will return its default value.
    mutating func clearPartiallyPlayed() { _uniqueStorage()._partiallyPlayed = nil }
    
    var unplayed: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._unplayed ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._unplayed = newValue }
    }
    
    /// Returns true if `unplayed` has been explicitly set.
    var hasUnplayed: Bool { _storage._unplayed != nil }
    /// Clears the value of `unplayed`. Subsequent reads from it will return its default value.
    mutating func clearUnplayed() { _uniqueStorage()._unplayed = nil }
    
    var manual: SwiftProtobuf.Google_Protobuf_BoolValue {
        get { _storage._manual ?? SwiftProtobuf.Google_Protobuf_BoolValue() }
        set { _uniqueStorage()._manual = newValue }
    }
    
    /// Returns true if `manual` has been explicitly set.
    var hasManual: Bool { _storage._manual != nil }
    /// Clears the value of `manual`. Subsequent reads from it will return its default value.
    mutating func clearManual() { _uniqueStorage()._manual = nil }
    
    var sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortPosition ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortPosition = newValue }
    }
    
    /// Returns true if `sortPosition` has been explicitly set.
    var hasSortPosition: Bool { _storage._sortPosition != nil }
    /// Clears the value of `sortPosition`. Subsequent reads from it will return its default value.
    mutating func clearSortPosition() { _uniqueStorage()._sortPosition = nil }
    
    var sortType: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._sortType ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._sortType = newValue }
    }
    
    /// Returns true if `sortType` has been explicitly set.
    var hasSortType: Bool { _storage._sortType != nil }
    /// Clears the value of `sortType`. Subsequent reads from it will return its default value.
    mutating func clearSortType() { _uniqueStorage()._sortType = nil }
    
    var iconID: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._iconID ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._iconID = newValue }
    }
    
    /// Returns true if `iconID` has been explicitly set.
    var hasIconID: Bool { _storage._iconID != nil }
    /// Clears the value of `iconID`. Subsequent reads from it will return its default value.
    mutating func clearIconID() { _uniqueStorage()._iconID = nil }
    
    var filterHours: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._filterHours ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._filterHours = newValue }
    }
    
    /// Returns true if `filterHours` has been explicitly set.
    var hasFilterHours: Bool { _storage._filterHours != nil }
    /// Clears the value of `filterHours`. Subsequent reads from it will return its default value.
    mutating func clearFilterHours() { _uniqueStorage()._filterHours = nil }
    
    /// new fields
    var autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value {
        get { _storage._autoSkipLast ?? SwiftProtobuf.Google_Protobuf_Int32Value() }
        set { _uniqueStorage()._autoSkipLast = newValue }
    }
    
    /// Returns true if `autoSkipLast` has been explicitly set.
    var hasAutoSkipLast: Bool { _storage._autoSkipLast != nil }
    /// Clears the value of `autoSkipLast`. Subsequent reads from it will return its default value.
    mutating func clearAutoSkipLast() { _uniqueStorage()._autoSkipLast = nil }
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
    
    fileprivate var _storage = _StorageClass.defaultInstance
}

struct Api_LegacyStatsResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var timesStartedAt: Int32 = 0
    
    var timeSilenceRemoval: Int32 = 0
    
    var timeVariableSpeed: Int32 = 0
    
    var timeIntroSkipping: Int32 = 0
    
    var timeSkipping: Int32 = 0
    
    var timeListened: Int32 = 0
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_PromotionCode {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var code = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

struct Api_Promotion {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var code = String()
    
    var description_p = String()
    
    var startsAt = String()
    
    var endsAt = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "api"

extension Api_UserChangeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserChangeResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "success"),
        2: .same(proto: "message")
    ]
    
    fileprivate class _StorageClass {
        var _success: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _message = String()
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _success = source._success
            _message = source._message
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._success)
                case 2: try decoder.decodeSingularStringField(value: &_storage._message)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._success {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if !_storage._message.isEmpty {
                try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserChangeResponse, rhs: Api_UserChangeResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._success != rhs_storage._success { return false }
                if _storage._message != rhs_storage._message { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserResetPasswordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserResetPasswordRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "reset_password_token"),
        2: .same(proto: "password"),
        3: .same(proto: "scope")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &resetPasswordToken)
            case 2: try decoder.decodeSingularStringField(value: &password)
            case 3: try decoder.decodeSingularStringField(value: &scope)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !resetPasswordToken.isEmpty {
            try visitor.visitSingularStringField(value: resetPasswordToken, fieldNumber: 1)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 2)
        }
        if !scope.isEmpty {
            try visitor.visitSingularStringField(value: scope, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserResetPasswordRequest, rhs: Api_UserResetPasswordRequest) -> Bool {
        if lhs.resetPasswordToken != rhs.resetPasswordToken { return false }
        if lhs.password != rhs.password { return false }
        if lhs.scope != rhs.scope { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EmailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EmailRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &email)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EmailRequest, rhs: Api_EmailRequest) -> Bool {
        if lhs.email != rhs.email { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserChangeEmailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserChangeEmailRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email"),
        2: .same(proto: "password"),
        3: .same(proto: "scope")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &email)
            case 2: try decoder.decodeSingularStringField(value: &password)
            case 3: try decoder.decodeSingularStringField(value: &scope)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 1)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 2)
        }
        if !scope.isEmpty {
            try visitor.visitSingularStringField(value: scope, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserChangeEmailRequest, rhs: Api_UserChangeEmailRequest) -> Bool {
        if lhs.email != rhs.email { return false }
        if lhs.password != rhs.password { return false }
        if lhs.scope != rhs.scope { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserChangePasswordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserChangePasswordRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "old_password"),
        2: .standard(proto: "new_password"),
        4: .same(proto: "scope")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &oldPassword)
            case 2: try decoder.decodeSingularStringField(value: &newPassword)
            case 4: try decoder.decodeSingularStringField(value: &scope)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !oldPassword.isEmpty {
            try visitor.visitSingularStringField(value: oldPassword, fieldNumber: 1)
        }
        if !newPassword.isEmpty {
            try visitor.visitSingularStringField(value: newPassword, fieldNumber: 2)
        }
        if !scope.isEmpty {
            try visitor.visitSingularStringField(value: scope, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserChangePasswordRequest, rhs: Api_UserChangePasswordRequest) -> Bool {
        if lhs.oldPassword != rhs.oldPassword { return false }
        if lhs.newPassword != rhs.newPassword { return false }
        if lhs.scope != rhs.scope { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EmptyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EmptyRequest"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EmptyRequest, rhs: Api_EmptyRequest) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EmptyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EmptyResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EmptyResponse, rhs: Api_EmptyResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SupportFeedbackRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SupportFeedbackRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "message"),
        2: .same(proto: "email"),
        3: .same(proto: "subject"),
        4: .same(proto: "debug")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &message)
            case 2: try decoder.decodeSingularStringField(value: &email)
            case 3: try decoder.decodeSingularStringField(value: &subject)
            case 4: try decoder.decodeSingularStringField(value: &debug)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !message.isEmpty {
            try visitor.visitSingularStringField(value: message, fieldNumber: 1)
        }
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 2)
        }
        if !subject.isEmpty {
            try visitor.visitSingularStringField(value: subject, fieldNumber: 3)
        }
        if !debug.isEmpty {
            try visitor.visitSingularStringField(value: debug, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SupportFeedbackRequest, rhs: Api_SupportFeedbackRequest) -> Bool {
        if lhs.message != rhs.message { return false }
        if lhs.email != rhs.email { return false }
        if lhs.subject != rhs.subject { return false }
        if lhs.debug != rhs.debug { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_CreateBetaUserRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CreateBetaUserRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &email)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_CreateBetaUserRequest, rhs: Api_CreateBetaUserRequest) -> Bool {
        if lhs.email != rhs.email { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserLoginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserLoginRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email"),
        2: .same(proto: "password"),
        3: .same(proto: "scope"),
        4: .same(proto: "dt"),
        5: .same(proto: "device"),
        6: .same(proto: "v"),
        7: .same(proto: "m"),
        8: .same(proto: "av"),
        9: .same(proto: "f"),
        10: .same(proto: "l"),
        11: .same(proto: "c")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &email)
            case 2: try decoder.decodeSingularStringField(value: &password)
            case 3: try decoder.decodeSingularStringField(value: &scope)
            case 4: try decoder.decodeSingularStringField(value: &dt)
            case 5: try decoder.decodeSingularStringField(value: &device)
            case 6: try decoder.decodeSingularStringField(value: &v)
            case 7: try decoder.decodeSingularStringField(value: &m)
            case 8: try decoder.decodeSingularStringField(value: &av)
            case 9: try decoder.decodeSingularStringField(value: &f)
            case 10: try decoder.decodeSingularStringField(value: &l)
            case 11: try decoder.decodeSingularStringField(value: &c)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 1)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 2)
        }
        if !scope.isEmpty {
            try visitor.visitSingularStringField(value: scope, fieldNumber: 3)
        }
        if !dt.isEmpty {
            try visitor.visitSingularStringField(value: dt, fieldNumber: 4)
        }
        if !device.isEmpty {
            try visitor.visitSingularStringField(value: device, fieldNumber: 5)
        }
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 6)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 7)
        }
        if !av.isEmpty {
            try visitor.visitSingularStringField(value: av, fieldNumber: 8)
        }
        if !f.isEmpty {
            try visitor.visitSingularStringField(value: f, fieldNumber: 9)
        }
        if !l.isEmpty {
            try visitor.visitSingularStringField(value: l, fieldNumber: 10)
        }
        if !c.isEmpty {
            try visitor.visitSingularStringField(value: c, fieldNumber: 11)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserLoginRequest, rhs: Api_UserLoginRequest) -> Bool {
        if lhs.email != rhs.email { return false }
        if lhs.password != rhs.password { return false }
        if lhs.scope != rhs.scope { return false }
        if lhs.dt != rhs.dt { return false }
        if lhs.device != rhs.device { return false }
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.av != rhs.av { return false }
        if lhs.f != rhs.f { return false }
        if lhs.l != rhs.l { return false }
        if lhs.c != rhs.c { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserLoginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserLoginResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "token"),
        2: .same(proto: "uuid")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &token)
            case 2: try decoder.decodeSingularStringField(value: &uuid)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !token.isEmpty {
            try visitor.visitSingularStringField(value: token, fieldNumber: 1)
        }
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserLoginResponse, rhs: Api_UserLoginResponse) -> Bool {
        if lhs.token != rhs.token { return false }
        if lhs.uuid != rhs.uuid { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_BasicRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BasicRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "v"),
        2: .same(proto: "m")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &v)
            case 2: try decoder.decodeSingularStringField(value: &m)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_BasicRequest, rhs: Api_BasicRequest) -> Bool {
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserIdResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserIdResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &id)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserIdResponse, rhs: Api_UserIdResponse) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserPlaylistListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserPlaylistListRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "v"),
        2: .same(proto: "m")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &v)
            case 2: try decoder.decodeSingularStringField(value: &m)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserPlaylistListRequest, rhs: Api_UserPlaylistListRequest) -> Bool {
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserPodcastListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserPodcastListRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "v"),
        2: .same(proto: "m")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &v)
            case 2: try decoder.decodeSingularStringField(value: &m)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserPodcastListRequest, rhs: Api_UserPodcastListRequest) -> Bool {
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_NamedSettingsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".NamedSettingsRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "v"),
        2: .same(proto: "m"),
        3: .same(proto: "settings")
    ]
    
    fileprivate class _StorageClass {
        var _v = String()
        var _m = String()
        var _settings: Api_NamedSettings?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _v = source._v
            _m = source._m
            _settings = source._settings
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._v)
                case 2: try decoder.decodeSingularStringField(value: &_storage._m)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._settings)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._v.isEmpty {
                try visitor.visitSingularStringField(value: _storage._v, fieldNumber: 1)
            }
            if !_storage._m.isEmpty {
                try visitor.visitSingularStringField(value: _storage._m, fieldNumber: 2)
            }
            if let v = _storage._settings {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_NamedSettingsRequest, rhs: Api_NamedSettingsRequest) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._v != rhs_storage._v { return false }
                if _storage._m != rhs_storage._m { return false }
                if _storage._settings != rhs_storage._settings { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_NamedSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".NamedSettings"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "grid_layout"),
        2: .standard(proto: "grid_order"),
        3: .standard(proto: "show_played"),
        4: .same(proto: "theme"),
        5: .standard(proto: "skip_forward"),
        6: .standard(proto: "skip_back"),
        7: .standard(proto: "web_version"),
        8: .same(proto: "language"),
        9: .standard(proto: "recommendations_on"),
        10: .standard(proto: "stream_by_default"),
        11: .standard(proto: "use_embedded_artwork"),
        12: .standard(proto: "playback_speed"),
        13: .standard(proto: "silence_removal"),
        14: .standard(proto: "volume_boost"),
        15: .same(proto: "badges"),
        16: .standard(proto: "free_gift_acknowledgement"),
        17: .standard(proto: "marketing_opt_in"),
        18: .standard(proto: "auto_archive_played_episodes"),
        19: .standard(proto: "auto_archive_includes_starred")
    ]
    
    fileprivate class _StorageClass {
        var _gridLayout: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _gridOrder: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _showPlayed: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _theme: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _skipForward: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _skipBack: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _webVersion: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _language: SwiftProtobuf.Google_Protobuf_StringValue?
        var _recommendationsOn: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _streamByDefault: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _useEmbeddedArtwork: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _playbackSpeed: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _silenceRemoval: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _volumeBoost: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _badges: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _freeGiftAcknowledgement: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _marketingOptIn: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _autoArchivePlayedEpisodes: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _autoArchiveIncludesStarred: SwiftProtobuf.Google_Protobuf_BoolValue?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _gridLayout = source._gridLayout
            _gridOrder = source._gridOrder
            _showPlayed = source._showPlayed
            _theme = source._theme
            _skipForward = source._skipForward
            _skipBack = source._skipBack
            _webVersion = source._webVersion
            _language = source._language
            _recommendationsOn = source._recommendationsOn
            _streamByDefault = source._streamByDefault
            _useEmbeddedArtwork = source._useEmbeddedArtwork
            _playbackSpeed = source._playbackSpeed
            _silenceRemoval = source._silenceRemoval
            _volumeBoost = source._volumeBoost
            _badges = source._badges
            _freeGiftAcknowledgement = source._freeGiftAcknowledgement
            _marketingOptIn = source._marketingOptIn
            _autoArchivePlayedEpisodes = source._autoArchivePlayedEpisodes
            _autoArchiveIncludesStarred = source._autoArchiveIncludesStarred
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._gridLayout)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._gridOrder)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._showPlayed)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._theme)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._skipForward)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._skipBack)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._webVersion)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._language)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._recommendationsOn)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._streamByDefault)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._useEmbeddedArtwork)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._playbackSpeed)
                case 13: try decoder.decodeSingularMessageField(value: &_storage._silenceRemoval)
                case 14: try decoder.decodeSingularMessageField(value: &_storage._volumeBoost)
                case 15: try decoder.decodeSingularMessageField(value: &_storage._badges)
                case 16: try decoder.decodeSingularMessageField(value: &_storage._freeGiftAcknowledgement)
                case 17: try decoder.decodeSingularMessageField(value: &_storage._marketingOptIn)
                case 18: try decoder.decodeSingularMessageField(value: &_storage._autoArchivePlayedEpisodes)
                case 19: try decoder.decodeSingularMessageField(value: &_storage._autoArchiveIncludesStarred)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._gridLayout {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._gridOrder {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._showPlayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._theme {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._skipForward {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._skipBack {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._webVersion {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._language {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._recommendationsOn {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._streamByDefault {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._useEmbeddedArtwork {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._playbackSpeed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
            if let v = _storage._silenceRemoval {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }
            if let v = _storage._volumeBoost {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }
            if let v = _storage._badges {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }
            if let v = _storage._freeGiftAcknowledgement {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }
            if let v = _storage._marketingOptIn {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }
            if let v = _storage._autoArchivePlayedEpisodes {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
            }
            if let v = _storage._autoArchiveIncludesStarred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_NamedSettings, rhs: Api_NamedSettings) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._gridLayout != rhs_storage._gridLayout { return false }
                if _storage._gridOrder != rhs_storage._gridOrder { return false }
                if _storage._showPlayed != rhs_storage._showPlayed { return false }
                if _storage._theme != rhs_storage._theme { return false }
                if _storage._skipForward != rhs_storage._skipForward { return false }
                if _storage._skipBack != rhs_storage._skipBack { return false }
                if _storage._webVersion != rhs_storage._webVersion { return false }
                if _storage._language != rhs_storage._language { return false }
                if _storage._recommendationsOn != rhs_storage._recommendationsOn { return false }
                if _storage._streamByDefault != rhs_storage._streamByDefault { return false }
                if _storage._useEmbeddedArtwork != rhs_storage._useEmbeddedArtwork { return false }
                if _storage._playbackSpeed != rhs_storage._playbackSpeed { return false }
                if _storage._silenceRemoval != rhs_storage._silenceRemoval { return false }
                if _storage._volumeBoost != rhs_storage._volumeBoost { return false }
                if _storage._badges != rhs_storage._badges { return false }
                if _storage._freeGiftAcknowledgement != rhs_storage._freeGiftAcknowledgement { return false }
                if _storage._marketingOptIn != rhs_storage._marketingOptIn { return false }
                if _storage._autoArchivePlayedEpisodes != rhs_storage._autoArchivePlayedEpisodes { return false }
                if _storage._autoArchiveIncludesStarred != rhs_storage._autoArchiveIncludesStarred { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_NamedSettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".NamedSettingsResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "grid_layout"),
        2: .standard(proto: "grid_order"),
        3: .standard(proto: "show_played"),
        4: .same(proto: "theme"),
        5: .standard(proto: "skip_forward"),
        6: .standard(proto: "skip_back"),
        7: .standard(proto: "web_version"),
        8: .same(proto: "language"),
        9: .standard(proto: "recommendations_on"),
        10: .standard(proto: "stream_by_default"),
        11: .standard(proto: "use_embedded_artwork"),
        12: .standard(proto: "playback_speed"),
        13: .standard(proto: "silence_removal"),
        14: .standard(proto: "volume_boost"),
        15: .same(proto: "badges"),
        16: .standard(proto: "free_gift_acknowledgement"),
        17: .standard(proto: "marketing_opt_in"),
        18: .standard(proto: "auto_archive_played_episodes"),
        19: .standard(proto: "auto_archive_includes_starred")
    ]
    
    fileprivate class _StorageClass {
        var _gridLayout: Api_Int32Setting?
        var _gridOrder: Api_Int32Setting?
        var _showPlayed: Api_Int32Setting?
        var _theme: Api_Int32Setting?
        var _skipForward: Api_Int32Setting?
        var _skipBack: Api_Int32Setting?
        var _webVersion: Api_Int32Setting?
        var _language: Api_StringSetting?
        var _recommendationsOn: Api_BoolSetting?
        var _streamByDefault: Api_BoolSetting?
        var _useEmbeddedArtwork: Api_BoolSetting?
        var _playbackSpeed: Api_DoubleSetting?
        var _silenceRemoval: Api_BoolSetting?
        var _volumeBoost: Api_BoolSetting?
        var _badges: Api_Int32Setting?
        var _freeGiftAcknowledgement: Api_BoolSetting?
        var _marketingOptIn: Api_BoolSetting?
        var _autoArchivePlayedEpisodes: Api_BoolSetting?
        var _autoArchiveIncludesStarred: Api_BoolSetting?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _gridLayout = source._gridLayout
            _gridOrder = source._gridOrder
            _showPlayed = source._showPlayed
            _theme = source._theme
            _skipForward = source._skipForward
            _skipBack = source._skipBack
            _webVersion = source._webVersion
            _language = source._language
            _recommendationsOn = source._recommendationsOn
            _streamByDefault = source._streamByDefault
            _useEmbeddedArtwork = source._useEmbeddedArtwork
            _playbackSpeed = source._playbackSpeed
            _silenceRemoval = source._silenceRemoval
            _volumeBoost = source._volumeBoost
            _badges = source._badges
            _freeGiftAcknowledgement = source._freeGiftAcknowledgement
            _marketingOptIn = source._marketingOptIn
            _autoArchivePlayedEpisodes = source._autoArchivePlayedEpisodes
            _autoArchiveIncludesStarred = source._autoArchiveIncludesStarred
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._gridLayout)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._gridOrder)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._showPlayed)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._theme)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._skipForward)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._skipBack)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._webVersion)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._language)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._recommendationsOn)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._streamByDefault)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._useEmbeddedArtwork)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._playbackSpeed)
                case 13: try decoder.decodeSingularMessageField(value: &_storage._silenceRemoval)
                case 14: try decoder.decodeSingularMessageField(value: &_storage._volumeBoost)
                case 15: try decoder.decodeSingularMessageField(value: &_storage._badges)
                case 16: try decoder.decodeSingularMessageField(value: &_storage._freeGiftAcknowledgement)
                case 17: try decoder.decodeSingularMessageField(value: &_storage._marketingOptIn)
                case 18: try decoder.decodeSingularMessageField(value: &_storage._autoArchivePlayedEpisodes)
                case 19: try decoder.decodeSingularMessageField(value: &_storage._autoArchiveIncludesStarred)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._gridLayout {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._gridOrder {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._showPlayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._theme {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._skipForward {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._skipBack {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._webVersion {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._language {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._recommendationsOn {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._streamByDefault {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._useEmbeddedArtwork {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._playbackSpeed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
            if let v = _storage._silenceRemoval {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }
            if let v = _storage._volumeBoost {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }
            if let v = _storage._badges {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }
            if let v = _storage._freeGiftAcknowledgement {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }
            if let v = _storage._marketingOptIn {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }
            if let v = _storage._autoArchivePlayedEpisodes {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
            }
            if let v = _storage._autoArchiveIncludesStarred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_NamedSettingsResponse, rhs: Api_NamedSettingsResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._gridLayout != rhs_storage._gridLayout { return false }
                if _storage._gridOrder != rhs_storage._gridOrder { return false }
                if _storage._showPlayed != rhs_storage._showPlayed { return false }
                if _storage._theme != rhs_storage._theme { return false }
                if _storage._skipForward != rhs_storage._skipForward { return false }
                if _storage._skipBack != rhs_storage._skipBack { return false }
                if _storage._webVersion != rhs_storage._webVersion { return false }
                if _storage._language != rhs_storage._language { return false }
                if _storage._recommendationsOn != rhs_storage._recommendationsOn { return false }
                if _storage._streamByDefault != rhs_storage._streamByDefault { return false }
                if _storage._useEmbeddedArtwork != rhs_storage._useEmbeddedArtwork { return false }
                if _storage._playbackSpeed != rhs_storage._playbackSpeed { return false }
                if _storage._silenceRemoval != rhs_storage._silenceRemoval { return false }
                if _storage._volumeBoost != rhs_storage._volumeBoost { return false }
                if _storage._badges != rhs_storage._badges { return false }
                if _storage._freeGiftAcknowledgement != rhs_storage._freeGiftAcknowledgement { return false }
                if _storage._marketingOptIn != rhs_storage._marketingOptIn { return false }
                if _storage._autoArchivePlayedEpisodes != rhs_storage._autoArchivePlayedEpisodes { return false }
                if _storage._autoArchiveIncludesStarred != rhs_storage._autoArchiveIncludesStarred { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_Int32Setting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Int32Setting"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
        2: .same(proto: "changed")
    ]
    
    fileprivate class _StorageClass {
        var _value: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _changed: SwiftProtobuf.Google_Protobuf_BoolValue?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _value = source._value
            _changed = source._changed
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._changed)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._value {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._changed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_Int32Setting, rhs: Api_Int32Setting) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._value != rhs_storage._value { return false }
                if _storage._changed != rhs_storage._changed { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_BoolSetting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BoolSetting"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
        2: .same(proto: "changed")
    ]
    
    fileprivate class _StorageClass {
        var _value: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _changed: SwiftProtobuf.Google_Protobuf_BoolValue?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _value = source._value
            _changed = source._changed
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._changed)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._value {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._changed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_BoolSetting, rhs: Api_BoolSetting) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._value != rhs_storage._value { return false }
                if _storage._changed != rhs_storage._changed { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_StringSetting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StringSetting"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
        2: .same(proto: "changed")
    ]
    
    fileprivate class _StorageClass {
        var _value: SwiftProtobuf.Google_Protobuf_StringValue?
        var _changed: SwiftProtobuf.Google_Protobuf_BoolValue?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _value = source._value
            _changed = source._changed
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._changed)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._value {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._changed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_StringSetting, rhs: Api_StringSetting) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._value != rhs_storage._value { return false }
                if _storage._changed != rhs_storage._changed { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_DoubleSetting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".DoubleSetting"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "value"),
        2: .same(proto: "changed")
    ]
    
    fileprivate class _StorageClass {
        var _value: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _changed: SwiftProtobuf.Google_Protobuf_BoolValue?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _value = source._value
            _changed = source._changed
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._changed)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._value {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._changed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_DoubleSetting, rhs: Api_DoubleSetting) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._value != rhs_storage._value { return false }
                if _storage._changed != rhs_storage._changed { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_ApiPodcastResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ApiPodcastResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "title"),
        3: .same(proto: "author"),
        4: .same(proto: "description"),
        5: .same(proto: "url")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &uuid)
            case 2: try decoder.decodeSingularStringField(value: &title)
            case 3: try decoder.decodeSingularStringField(value: &author)
            case 4: try decoder.decodeSingularStringField(value: &description_p)
            case 5: try decoder.decodeSingularStringField(value: &url)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 1)
        }
        if !title.isEmpty {
            try visitor.visitSingularStringField(value: title, fieldNumber: 2)
        }
        if !author.isEmpty {
            try visitor.visitSingularStringField(value: author, fieldNumber: 3)
        }
        if !description_p.isEmpty {
            try visitor.visitSingularStringField(value: description_p, fieldNumber: 4)
        }
        if !url.isEmpty {
            try visitor.visitSingularStringField(value: url, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_ApiPodcastResponse, rhs: Api_ApiPodcastResponse) -> Bool {
        if lhs.uuid != rhs.uuid { return false }
        if lhs.title != rhs.title { return false }
        if lhs.author != rhs.author { return false }
        if lhs.description_p != rhs.description_p { return false }
        if lhs.url != rhs.url { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_ApiPodcastListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ApiPodcastListResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "podcasts")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &podcasts)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !podcasts.isEmpty {
            try visitor.visitRepeatedMessageField(value: podcasts, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_ApiPodcastListResponse, rhs: Api_ApiPodcastListResponse) -> Bool {
        if lhs.podcasts != rhs.podcasts { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserPodcastResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserPodcastResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "episodes_sort_order"),
        3: .standard(proto: "auto_start_from"),
        4: .same(proto: "title"),
        5: .same(proto: "author"),
        6: .same(proto: "description"),
        7: .same(proto: "url"),
        8: .standard(proto: "last_episode_published"),
        9: .same(proto: "unplayed"),
        10: .standard(proto: "last_episode_uuid"),
        11: .standard(proto: "last_episode_playing_status"),
        12: .standard(proto: "last_episode_archived"),
        13: .standard(proto: "auto_skip_last")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _episodesSortOrder: Int32 = 0
        var _autoStartFrom: Int32 = 0
        var _title = String()
        var _author = String()
        var _description_p = String()
        var _url = String()
        var _lastEpisodePublished: SwiftProtobuf.Google_Protobuf_Timestamp?
        var _unplayed: Bool = false
        var _lastEpisodeUuid = String()
        var _lastEpisodePlayingStatus: Int32 = 0
        var _lastEpisodeArchived: Bool = false
        var _autoSkipLast: Int32 = 0
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _episodesSortOrder = source._episodesSortOrder
            _autoStartFrom = source._autoStartFrom
            _title = source._title
            _author = source._author
            _description_p = source._description_p
            _url = source._url
            _lastEpisodePublished = source._lastEpisodePublished
            _unplayed = source._unplayed
            _lastEpisodeUuid = source._lastEpisodeUuid
            _lastEpisodePlayingStatus = source._lastEpisodePlayingStatus
            _lastEpisodeArchived = source._lastEpisodeArchived
            _autoSkipLast = source._autoSkipLast
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularInt32Field(value: &_storage._episodesSortOrder)
                case 3: try decoder.decodeSingularInt32Field(value: &_storage._autoStartFrom)
                case 4: try decoder.decodeSingularStringField(value: &_storage._title)
                case 5: try decoder.decodeSingularStringField(value: &_storage._author)
                case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
                case 7: try decoder.decodeSingularStringField(value: &_storage._url)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._lastEpisodePublished)
                case 9: try decoder.decodeSingularBoolField(value: &_storage._unplayed)
                case 10: try decoder.decodeSingularStringField(value: &_storage._lastEpisodeUuid)
                case 11: try decoder.decodeSingularInt32Field(value: &_storage._lastEpisodePlayingStatus)
                case 12: try decoder.decodeSingularBoolField(value: &_storage._lastEpisodeArchived)
                case 13: try decoder.decodeSingularInt32Field(value: &_storage._autoSkipLast)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if _storage._episodesSortOrder != 0 {
                try visitor.visitSingularInt32Field(value: _storage._episodesSortOrder, fieldNumber: 2)
            }
            if _storage._autoStartFrom != 0 {
                try visitor.visitSingularInt32Field(value: _storage._autoStartFrom, fieldNumber: 3)
            }
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
            }
            if !_storage._author.isEmpty {
                try visitor.visitSingularStringField(value: _storage._author, fieldNumber: 5)
            }
            if !_storage._description_p.isEmpty {
                try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
            }
            if !_storage._url.isEmpty {
                try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
            }
            if let v = _storage._lastEpisodePublished {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if _storage._unplayed != false {
                try visitor.visitSingularBoolField(value: _storage._unplayed, fieldNumber: 9)
            }
            if !_storage._lastEpisodeUuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._lastEpisodeUuid, fieldNumber: 10)
            }
            if _storage._lastEpisodePlayingStatus != 0 {
                try visitor.visitSingularInt32Field(value: _storage._lastEpisodePlayingStatus, fieldNumber: 11)
            }
            if _storage._lastEpisodeArchived != false {
                try visitor.visitSingularBoolField(value: _storage._lastEpisodeArchived, fieldNumber: 12)
            }
            if _storage._autoSkipLast != 0 {
                try visitor.visitSingularInt32Field(value: _storage._autoSkipLast, fieldNumber: 13)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserPodcastResponse, rhs: Api_UserPodcastResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._episodesSortOrder != rhs_storage._episodesSortOrder { return false }
                if _storage._autoStartFrom != rhs_storage._autoStartFrom { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._author != rhs_storage._author { return false }
                if _storage._description_p != rhs_storage._description_p { return false }
                if _storage._url != rhs_storage._url { return false }
                if _storage._lastEpisodePublished != rhs_storage._lastEpisodePublished { return false }
                if _storage._unplayed != rhs_storage._unplayed { return false }
                if _storage._lastEpisodeUuid != rhs_storage._lastEpisodeUuid { return false }
                if _storage._lastEpisodePlayingStatus != rhs_storage._lastEpisodePlayingStatus { return false }
                if _storage._lastEpisodeArchived != rhs_storage._lastEpisodeArchived { return false }
                if _storage._autoSkipLast != rhs_storage._autoSkipLast { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserPlaylistListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserPlaylistListResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "playlists")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &playlists)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !playlists.isEmpty {
            try visitor.visitRepeatedMessageField(value: playlists, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserPlaylistListResponse, rhs: Api_UserPlaylistListResponse) -> Bool {
        if lhs.playlists != rhs.playlists { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserPodcastListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserPodcastListResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "podcasts")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &podcasts)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !podcasts.isEmpty {
            try visitor.visitRepeatedMessageField(value: podcasts, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserPodcastListResponse, rhs: Api_UserPodcastListResponse) -> Bool {
        if lhs.podcasts != rhs.podcasts { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UserLastSyncAtResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserLastSyncAtResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "last_sync_at"),
        2: .standard(proto: "last_sync_at_ms")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &lastSyncAt)
            case 2: try decoder.decodeSingularInt64Field(value: &lastSyncAtMs)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !lastSyncAt.isEmpty {
            try visitor.visitSingularStringField(value: lastSyncAt, fieldNumber: 1)
        }
        if lastSyncAtMs != 0 {
            try visitor.visitSingularInt64Field(value: lastSyncAtMs, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UserLastSyncAtResponse, rhs: Api_UserLastSyncAtResponse) -> Bool {
        if lhs.lastSyncAt != rhs.lastSyncAt { return false }
        if lhs.lastSyncAtMs != rhs.lastSyncAtMs { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UuidRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UuidRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "v"),
        2: .same(proto: "m"),
        3: .same(proto: "uuid")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &v)
            case 2: try decoder.decodeSingularStringField(value: &m)
            case 3: try decoder.decodeSingularStringField(value: &uuid)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 2)
        }
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UuidRequest, rhs: Api_UuidRequest) -> Bool {
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.uuid != rhs.uuid { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_KeywordRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".KeywordRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "v"),
        2: .same(proto: "m"),
        3: .same(proto: "keyword")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &v)
            case 2: try decoder.decodeSingularStringField(value: &m)
            case 3: try decoder.decodeSingularStringField(value: &keyword)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 1)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 2)
        }
        if !keyword.isEmpty {
            try visitor.visitSingularStringField(value: keyword, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_KeywordRequest, rhs: Api_KeywordRequest) -> Bool {
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.keyword != rhs.keyword { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncEpisodesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncEpisodesResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "episodes"),
        2: .standard(proto: "auto_start_from"),
        3: .standard(proto: "episodes_sort_order"),
        4: .standard(proto: "auto_skip_last")
    ]
    
    fileprivate class _StorageClass {
        var _episodes: [Api_EpisodeSyncResponse] = []
        var _autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _episodesSortOrder: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _episodes = source._episodes
            _autoStartFrom = source._autoStartFrom
            _episodesSortOrder = source._episodesSortOrder
            _autoSkipLast = source._autoSkipLast
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeRepeatedMessageField(value: &_storage._episodes)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._autoStartFrom)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._episodesSortOrder)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._autoSkipLast)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._episodes.isEmpty {
                try visitor.visitRepeatedMessageField(value: _storage._episodes, fieldNumber: 1)
            }
            if let v = _storage._autoStartFrom {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._episodesSortOrder {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._autoSkipLast {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncEpisodesResponse, rhs: Api_SyncEpisodesResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._episodes != rhs_storage._episodes { return false }
                if _storage._autoStartFrom != rhs_storage._autoStartFrom { return false }
                if _storage._episodesSortOrder != rhs_storage._episodesSortOrder { return false }
                if _storage._autoSkipLast != rhs_storage._autoSkipLast { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_FindUserEpisodesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".FindUserEpisodesRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "podcast_uuid"),
        2: .same(proto: "page"),
        3: .same(proto: "sort"),
        4: .same(proto: "v"),
        5: .same(proto: "m")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &podcastUuid)
            case 2: try decoder.decodeSingularInt32Field(value: &page)
            case 3: try decoder.decodeSingularInt32Field(value: &sort)
            case 4: try decoder.decodeSingularStringField(value: &v)
            case 5: try decoder.decodeSingularStringField(value: &m)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !podcastUuid.isEmpty {
            try visitor.visitSingularStringField(value: podcastUuid, fieldNumber: 1)
        }
        if page != 0 {
            try visitor.visitSingularInt32Field(value: page, fieldNumber: 2)
        }
        if sort != 0 {
            try visitor.visitSingularInt32Field(value: sort, fieldNumber: 3)
        }
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 4)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_FindUserEpisodesRequest, rhs: Api_FindUserEpisodesRequest) -> Bool {
        if lhs.podcastUuid != rhs.podcastUuid { return false }
        if lhs.page != rhs.page { return false }
        if lhs.sort != rhs.sort { return false }
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EpisodesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EpisodesResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "total"),
        2: .same(proto: "episodes")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &total)
            case 2: try decoder.decodeRepeatedMessageField(value: &episodes)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if total != 0 {
            try visitor.visitSingularInt32Field(value: total, fieldNumber: 1)
        }
        if !episodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: episodes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EpisodesResponse, rhs: Api_EpisodesResponse) -> Bool {
        if lhs.total != rhs.total { return false }
        if lhs.episodes != rhs.episodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_FindUserEpisodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".FindUserEpisodeRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "v"),
        3: .same(proto: "m")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &uuid)
            case 2: try decoder.decodeSingularStringField(value: &v)
            case 3: try decoder.decodeSingularStringField(value: &m)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 1)
        }
        if !v.isEmpty {
            try visitor.visitSingularStringField(value: v, fieldNumber: 2)
        }
        if !m.isEmpty {
            try visitor.visitSingularStringField(value: m, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_FindUserEpisodeRequest, rhs: Api_FindUserEpisodeRequest) -> Bool {
        if lhs.uuid != rhs.uuid { return false }
        if lhs.v != rhs.v { return false }
        if lhs.m != rhs.m { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EpisodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EpisodeResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "url"),
        3: .same(proto: "published"),
        4: .same(proto: "duration"),
        5: .standard(proto: "file_type"),
        6: .same(proto: "title"),
        7: .same(proto: "size"),
        8: .standard(proto: "playing_status"),
        9: .standard(proto: "played_up_to"),
        10: .same(proto: "starred"),
        11: .standard(proto: "podcast_uuid"),
        12: .standard(proto: "podcast_title"),
        13: .standard(proto: "episode_type"),
        14: .standard(proto: "episode_season"),
        15: .standard(proto: "episode_number"),
        16: .standard(proto: "is_deleted")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _url = String()
        var _published: SwiftProtobuf.Google_Protobuf_Timestamp?
        var _duration: Int32 = 0
        var _fileType = String()
        var _title = String()
        var _size: Int64 = 0
        var _playingStatus: Int32 = 0
        var _playedUpTo: Int32 = 0
        var _starred: Bool = false
        var _podcastUuid = String()
        var _podcastTitle = String()
        var _episodeType = String()
        var _episodeSeason: Int32 = 0
        var _episodeNumber: Int32 = 0
        var _isDeleted: Bool = false
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _url = source._url
            _published = source._published
            _duration = source._duration
            _fileType = source._fileType
            _title = source._title
            _size = source._size
            _playingStatus = source._playingStatus
            _playedUpTo = source._playedUpTo
            _starred = source._starred
            _podcastUuid = source._podcastUuid
            _podcastTitle = source._podcastTitle
            _episodeType = source._episodeType
            _episodeSeason = source._episodeSeason
            _episodeNumber = source._episodeNumber
            _isDeleted = source._isDeleted
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularStringField(value: &_storage._url)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._published)
                case 4: try decoder.decodeSingularInt32Field(value: &_storage._duration)
                case 5: try decoder.decodeSingularStringField(value: &_storage._fileType)
                case 6: try decoder.decodeSingularStringField(value: &_storage._title)
                case 7: try decoder.decodeSingularInt64Field(value: &_storage._size)
                case 8: try decoder.decodeSingularInt32Field(value: &_storage._playingStatus)
                case 9: try decoder.decodeSingularInt32Field(value: &_storage._playedUpTo)
                case 10: try decoder.decodeSingularBoolField(value: &_storage._starred)
                case 11: try decoder.decodeSingularStringField(value: &_storage._podcastUuid)
                case 12: try decoder.decodeSingularStringField(value: &_storage._podcastTitle)
                case 13: try decoder.decodeSingularStringField(value: &_storage._episodeType)
                case 14: try decoder.decodeSingularInt32Field(value: &_storage._episodeSeason)
                case 15: try decoder.decodeSingularInt32Field(value: &_storage._episodeNumber)
                case 16: try decoder.decodeSingularBoolField(value: &_storage._isDeleted)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if !_storage._url.isEmpty {
                try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 2)
            }
            if let v = _storage._published {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if _storage._duration != 0 {
                try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 4)
            }
            if !_storage._fileType.isEmpty {
                try visitor.visitSingularStringField(value: _storage._fileType, fieldNumber: 5)
            }
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 6)
            }
            if _storage._size != 0 {
                try visitor.visitSingularInt64Field(value: _storage._size, fieldNumber: 7)
            }
            if _storage._playingStatus != 0 {
                try visitor.visitSingularInt32Field(value: _storage._playingStatus, fieldNumber: 8)
            }
            if _storage._playedUpTo != 0 {
                try visitor.visitSingularInt32Field(value: _storage._playedUpTo, fieldNumber: 9)
            }
            if _storage._starred != false {
                try visitor.visitSingularBoolField(value: _storage._starred, fieldNumber: 10)
            }
            if !_storage._podcastUuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcastUuid, fieldNumber: 11)
            }
            if !_storage._podcastTitle.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcastTitle, fieldNumber: 12)
            }
            if !_storage._episodeType.isEmpty {
                try visitor.visitSingularStringField(value: _storage._episodeType, fieldNumber: 13)
            }
            if _storage._episodeSeason != 0 {
                try visitor.visitSingularInt32Field(value: _storage._episodeSeason, fieldNumber: 14)
            }
            if _storage._episodeNumber != 0 {
                try visitor.visitSingularInt32Field(value: _storage._episodeNumber, fieldNumber: 15)
            }
            if _storage._isDeleted != false {
                try visitor.visitSingularBoolField(value: _storage._isDeleted, fieldNumber: 16)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EpisodeResponse, rhs: Api_EpisodeResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._url != rhs_storage._url { return false }
                if _storage._published != rhs_storage._published { return false }
                if _storage._duration != rhs_storage._duration { return false }
                if _storage._fileType != rhs_storage._fileType { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._size != rhs_storage._size { return false }
                if _storage._playingStatus != rhs_storage._playingStatus { return false }
                if _storage._playedUpTo != rhs_storage._playedUpTo { return false }
                if _storage._starred != rhs_storage._starred { return false }
                if _storage._podcastUuid != rhs_storage._podcastUuid { return false }
                if _storage._podcastTitle != rhs_storage._podcastTitle { return false }
                if _storage._episodeType != rhs_storage._episodeType { return false }
                if _storage._episodeSeason != rhs_storage._episodeSeason { return false }
                if _storage._episodeNumber != rhs_storage._episodeNumber { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUpdateEpisodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUpdateEpisodeResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUpdateEpisodeResponse, rhs: Api_SyncUpdateEpisodeResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpdateEpisodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateEpisodeRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "podcast"),
        3: .same(proto: "position"),
        4: .same(proto: "status"),
        5: .same(proto: "duration"),
        6: .same(proto: "stats")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _podcast = String()
        var _position: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _status: Int32 = 0
        var _duration: Int32 = 0
        var _stats: Api_StatsRequest?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _podcast = source._podcast
            _position = source._position
            _status = source._status
            _duration = source._duration
            _stats = source._stats
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularStringField(value: &_storage._podcast)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._position)
                case 4: try decoder.decodeSingularInt32Field(value: &_storage._status)
                case 5: try decoder.decodeSingularInt32Field(value: &_storage._duration)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._stats)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if !_storage._podcast.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcast, fieldNumber: 2)
            }
            if let v = _storage._position {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if _storage._status != 0 {
                try visitor.visitSingularInt32Field(value: _storage._status, fieldNumber: 4)
            }
            if _storage._duration != 0 {
                try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 5)
            }
            if let v = _storage._stats {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpdateEpisodeRequest, rhs: Api_UpdateEpisodeRequest) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._podcast != rhs_storage._podcast { return false }
                if _storage._position != rhs_storage._position { return false }
                if _storage._status != rhs_storage._status { return false }
                if _storage._duration != rhs_storage._duration { return false }
                if _storage._stats != rhs_storage._stats { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpdateEpisodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateEpisodeResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpdateEpisodeResponse, rhs: Api_UpdateEpisodeResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_StatsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StatsRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "device_id"),
        2: .standard(proto: "time_silence_removal"),
        3: .standard(proto: "time_skipping"),
        4: .standard(proto: "time_intro_skipping"),
        5: .standard(proto: "time_variable_speed"),
        6: .standard(proto: "time_listened"),
        7: .standard(proto: "device_type")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &deviceID)
            case 2: try decoder.decodeSingularInt32Field(value: &timeSilenceRemoval)
            case 3: try decoder.decodeSingularInt32Field(value: &timeSkipping)
            case 4: try decoder.decodeSingularInt32Field(value: &timeIntroSkipping)
            case 5: try decoder.decodeSingularInt32Field(value: &timeVariableSpeed)
            case 6: try decoder.decodeSingularInt32Field(value: &timeListened)
            case 7: try decoder.decodeSingularInt32Field(value: &deviceType)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !deviceID.isEmpty {
            try visitor.visitSingularStringField(value: deviceID, fieldNumber: 1)
        }
        if timeSilenceRemoval != 0 {
            try visitor.visitSingularInt32Field(value: timeSilenceRemoval, fieldNumber: 2)
        }
        if timeSkipping != 0 {
            try visitor.visitSingularInt32Field(value: timeSkipping, fieldNumber: 3)
        }
        if timeIntroSkipping != 0 {
            try visitor.visitSingularInt32Field(value: timeIntroSkipping, fieldNumber: 4)
        }
        if timeVariableSpeed != 0 {
            try visitor.visitSingularInt32Field(value: timeVariableSpeed, fieldNumber: 5)
        }
        if timeListened != 0 {
            try visitor.visitSingularInt32Field(value: timeListened, fieldNumber: 6)
        }
        if deviceType != 0 {
            try visitor.visitSingularInt32Field(value: deviceType, fieldNumber: 7)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_StatsRequest, rhs: Api_StatsRequest) -> Bool {
        if lhs.deviceID != rhs.deviceID { return false }
        if lhs.timeSilenceRemoval != rhs.timeSilenceRemoval { return false }
        if lhs.timeSkipping != rhs.timeSkipping { return false }
        if lhs.timeIntroSkipping != rhs.timeIntroSkipping { return false }
        if lhs.timeVariableSpeed != rhs.timeVariableSpeed { return false }
        if lhs.timeListened != rhs.timeListened { return false }
        if lhs.deviceType != rhs.deviceType { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpdateEpisodeStarRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateEpisodeStarRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "podcast"),
        3: .same(proto: "star")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &uuid)
            case 2: try decoder.decodeSingularStringField(value: &podcast)
            case 3: try decoder.decodeSingularBoolField(value: &star)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 1)
        }
        if !podcast.isEmpty {
            try visitor.visitSingularStringField(value: podcast, fieldNumber: 2)
        }
        if star != false {
            try visitor.visitSingularBoolField(value: star, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpdateEpisodeStarRequest, rhs: Api_UpdateEpisodeStarRequest) -> Bool {
        if lhs.uuid != rhs.uuid { return false }
        if lhs.podcast != rhs.podcast { return false }
        if lhs.star != rhs.star { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpdateEpisodeStarResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateEpisodeStarResponse"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpdateEpisodeStarResponse, rhs: Api_UpdateEpisodeStarResponse) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EpisodeWithPodcast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EpisodeWithPodcast"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "podcast")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &uuid)
            case 2: try decoder.decodeSingularStringField(value: &podcast)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 1)
        }
        if !podcast.isEmpty {
            try visitor.visitSingularStringField(value: podcast, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EpisodeWithPodcast, rhs: Api_EpisodeWithPodcast) -> Bool {
        if lhs.uuid != rhs.uuid { return false }
        if lhs.podcast != rhs.podcast { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpdateEpisodesArchiveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpdateEpisodesArchiveRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "archive"),
        2: .same(proto: "episodes")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &archive)
            case 2: try decoder.decodeRepeatedMessageField(value: &episodes)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if archive != false {
            try visitor.visitSingularBoolField(value: archive, fieldNumber: 1)
        }
        if !episodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: episodes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpdateEpisodesArchiveRequest, rhs: Api_UpdateEpisodesArchiveRequest) -> Bool {
        if lhs.archive != rhs.archive { return false }
        if lhs.episodes != rhs.episodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextSyncRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextSyncRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "device_time"),
        2: .same(proto: "version"),
        3: .same(proto: "model"),
        4: .standard(proto: "up_next")
    ]
    
    fileprivate class _StorageClass {
        var _deviceTime: Int64 = 0
        var _version = String()
        var _model = String()
        var _upNext: Api_UpNextChanges?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _deviceTime = source._deviceTime
            _version = source._version
            _model = source._model
            _upNext = source._upNext
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularInt64Field(value: &_storage._deviceTime)
                case 2: try decoder.decodeSingularStringField(value: &_storage._version)
                case 3: try decoder.decodeSingularStringField(value: &_storage._model)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._upNext)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._deviceTime != 0 {
                try visitor.visitSingularInt64Field(value: _storage._deviceTime, fieldNumber: 1)
            }
            if !_storage._version.isEmpty {
                try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 2)
            }
            if !_storage._model.isEmpty {
                try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 3)
            }
            if let v = _storage._upNext {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextSyncRequest, rhs: Api_UpNextSyncRequest) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._deviceTime != rhs_storage._deviceTime { return false }
                if _storage._version != rhs_storage._version { return false }
                if _storage._model != rhs_storage._model { return false }
                if _storage._upNext != rhs_storage._upNext { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextPlayRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextPlayRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .same(proto: "model"),
        3: .same(proto: "episode")
    ]
    
    fileprivate class _StorageClass {
        var _version = String()
        var _model = String()
        var _episode: Api_UpNextEpisodeRequest?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _version = source._version
            _model = source._model
            _episode = source._episode
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._version)
                case 2: try decoder.decodeSingularStringField(value: &_storage._model)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._episode)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._version.isEmpty {
                try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 1)
            }
            if !_storage._model.isEmpty {
                try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 2)
            }
            if let v = _storage._episode {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextPlayRequest, rhs: Api_UpNextPlayRequest) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._version != rhs_storage._version { return false }
                if _storage._model != rhs_storage._model { return false }
                if _storage._episode != rhs_storage._episode { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextListRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "limit"),
        2: .same(proto: "version"),
        3: .same(proto: "model"),
        4: .standard(proto: "server_modified")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &limit)
            case 2: try decoder.decodeSingularStringField(value: &version)
            case 3: try decoder.decodeSingularStringField(value: &model)
            case 4: try decoder.decodeSingularInt64Field(value: &serverModified)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if limit != 0 {
            try visitor.visitSingularInt32Field(value: limit, fieldNumber: 1)
        }
        if !version.isEmpty {
            try visitor.visitSingularStringField(value: version, fieldNumber: 2)
        }
        if !model.isEmpty {
            try visitor.visitSingularStringField(value: model, fieldNumber: 3)
        }
        if serverModified != 0 {
            try visitor.visitSingularInt64Field(value: serverModified, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextListRequest, rhs: Api_UpNextListRequest) -> Bool {
        if lhs.limit != rhs.limit { return false }
        if lhs.version != rhs.version { return false }
        if lhs.model != rhs.model { return false }
        if lhs.serverModified != rhs.serverModified { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextEpisodeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextEpisodeRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        4: .same(proto: "title"),
        5: .same(proto: "url"),
        6: .same(proto: "podcast"),
        7: .same(proto: "published")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _title = String()
        var _url = String()
        var _podcast = String()
        var _published: SwiftProtobuf.Google_Protobuf_Timestamp?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _title = source._title
            _url = source._url
            _podcast = source._podcast
            _published = source._published
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 4: try decoder.decodeSingularStringField(value: &_storage._title)
                case 5: try decoder.decodeSingularStringField(value: &_storage._url)
                case 6: try decoder.decodeSingularStringField(value: &_storage._podcast)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._published)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
            }
            if !_storage._url.isEmpty {
                try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 5)
            }
            if !_storage._podcast.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcast, fieldNumber: 6)
            }
            if let v = _storage._published {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextEpisodeRequest, rhs: Api_UpNextEpisodeRequest) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._url != rhs_storage._url { return false }
                if _storage._podcast != rhs_storage._podcast { return false }
                if _storage._published != rhs_storage._published { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextChanges: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextChanges"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "server_modified"),
        2: .same(proto: "changes"),
        3: .same(proto: "order")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &serverModified)
            case 2: try decoder.decodeRepeatedMessageField(value: &changes)
            case 3: try decoder.decodeRepeatedStringField(value: &order)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if serverModified != 0 {
            try visitor.visitSingularInt64Field(value: serverModified, fieldNumber: 1)
        }
        if !changes.isEmpty {
            try visitor.visitRepeatedMessageField(value: changes, fieldNumber: 2)
        }
        if !order.isEmpty {
            try visitor.visitRepeatedStringField(value: order, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextChanges, rhs: Api_UpNextChanges) -> Bool {
        if lhs.serverModified != rhs.serverModified { return false }
        if lhs.changes != rhs.changes { return false }
        if lhs.order != rhs.order { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextChanges.Change: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Api_UpNextChanges.protoMessageName + ".Change"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .same(proto: "action"),
        3: .same(proto: "modified"),
        4: .same(proto: "title"),
        5: .same(proto: "url"),
        6: .same(proto: "podcast"),
        7: .same(proto: "episodes"),
        8: .same(proto: "published")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _action: Int32 = 0
        var _modified: Int64 = 0
        var _title = String()
        var _url = String()
        var _podcast = String()
        var _episodes: [Api_UpNextEpisodeRequest] = []
        var _published: SwiftProtobuf.Google_Protobuf_Timestamp?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _action = source._action
            _modified = source._modified
            _title = source._title
            _url = source._url
            _podcast = source._podcast
            _episodes = source._episodes
            _published = source._published
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularInt32Field(value: &_storage._action)
                case 3: try decoder.decodeSingularInt64Field(value: &_storage._modified)
                case 4: try decoder.decodeSingularStringField(value: &_storage._title)
                case 5: try decoder.decodeSingularStringField(value: &_storage._url)
                case 6: try decoder.decodeSingularStringField(value: &_storage._podcast)
                case 7: try decoder.decodeRepeatedMessageField(value: &_storage._episodes)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._published)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if _storage._action != 0 {
                try visitor.visitSingularInt32Field(value: _storage._action, fieldNumber: 2)
            }
            if _storage._modified != 0 {
                try visitor.visitSingularInt64Field(value: _storage._modified, fieldNumber: 3)
            }
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 4)
            }
            if !_storage._url.isEmpty {
                try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 5)
            }
            if !_storage._podcast.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcast, fieldNumber: 6)
            }
            if !_storage._episodes.isEmpty {
                try visitor.visitRepeatedMessageField(value: _storage._episodes, fieldNumber: 7)
            }
            if let v = _storage._published {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextChanges.Change, rhs: Api_UpNextChanges.Change) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._action != rhs_storage._action { return false }
                if _storage._modified != rhs_storage._modified { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._url != rhs_storage._url { return false }
                if _storage._podcast != rhs_storage._podcast { return false }
                if _storage._episodes != rhs_storage._episodes { return false }
                if _storage._published != rhs_storage._published { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "server_modified"),
        4: .same(proto: "episodes")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &serverModified)
            case 4: try decoder.decodeRepeatedMessageField(value: &episodes)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if serverModified != 0 {
            try visitor.visitSingularInt64Field(value: serverModified, fieldNumber: 1)
        }
        if !episodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: episodes, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextResponse, rhs: Api_UpNextResponse) -> Bool {
        if lhs.serverModified != rhs.serverModified { return false }
        if lhs.episodes != rhs.episodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextResponse.EpisodeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = Api_UpNextResponse.protoMessageName + ".EpisodeResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "title"),
        2: .same(proto: "url"),
        3: .same(proto: "podcast"),
        4: .same(proto: "uuid"),
        5: .same(proto: "published")
    ]
    
    fileprivate class _StorageClass {
        var _title = String()
        var _url = String()
        var _podcast = String()
        var _uuid = String()
        var _published: SwiftProtobuf.Google_Protobuf_Timestamp?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _title = source._title
            _url = source._url
            _podcast = source._podcast
            _uuid = source._uuid
            _published = source._published
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._title)
                case 2: try decoder.decodeSingularStringField(value: &_storage._url)
                case 3: try decoder.decodeSingularStringField(value: &_storage._podcast)
                case 4: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._published)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
            }
            if !_storage._url.isEmpty {
                try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 2)
            }
            if !_storage._podcast.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcast, fieldNumber: 3)
            }
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 4)
            }
            if let v = _storage._published {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextResponse.EpisodeResponse, rhs: Api_UpNextResponse.EpisodeResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._title != rhs_storage._title { return false }
                if _storage._url != rhs_storage._url { return false }
                if _storage._podcast != rhs_storage._podcast { return false }
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._published != rhs_storage._published { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_HistoryChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".HistoryChange"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "action"),
        2: .same(proto: "podcast"),
        3: .same(proto: "episode"),
        4: .standard(proto: "modified_at"),
        5: .same(proto: "title"),
        6: .same(proto: "url"),
        7: .same(proto: "published")
    ]
    
    fileprivate class _StorageClass {
        var _action: Int32 = 0
        var _podcast = String()
        var _episode = String()
        var _modifiedAt: Int64 = 0
        var _title = String()
        var _url = String()
        var _published: SwiftProtobuf.Google_Protobuf_Timestamp?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _action = source._action
            _podcast = source._podcast
            _episode = source._episode
            _modifiedAt = source._modifiedAt
            _title = source._title
            _url = source._url
            _published = source._published
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularInt32Field(value: &_storage._action)
                case 2: try decoder.decodeSingularStringField(value: &_storage._podcast)
                case 3: try decoder.decodeSingularStringField(value: &_storage._episode)
                case 4: try decoder.decodeSingularInt64Field(value: &_storage._modifiedAt)
                case 5: try decoder.decodeSingularStringField(value: &_storage._title)
                case 6: try decoder.decodeSingularStringField(value: &_storage._url)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._published)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._action != 0 {
                try visitor.visitSingularInt32Field(value: _storage._action, fieldNumber: 1)
            }
            if !_storage._podcast.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcast, fieldNumber: 2)
            }
            if !_storage._episode.isEmpty {
                try visitor.visitSingularStringField(value: _storage._episode, fieldNumber: 3)
            }
            if _storage._modifiedAt != 0 {
                try visitor.visitSingularInt64Field(value: _storage._modifiedAt, fieldNumber: 4)
            }
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 5)
            }
            if !_storage._url.isEmpty {
                try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 6)
            }
            if let v = _storage._published {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_HistoryChange, rhs: Api_HistoryChange) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._action != rhs_storage._action { return false }
                if _storage._podcast != rhs_storage._podcast { return false }
                if _storage._episode != rhs_storage._episode { return false }
                if _storage._modifiedAt != rhs_storage._modifiedAt { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._url != rhs_storage._url { return false }
                if _storage._published != rhs_storage._published { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_HistorySyncRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".HistorySyncRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "device_time"),
        2: .standard(proto: "server_modified"),
        3: .same(proto: "changes"),
        4: .same(proto: "version")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &deviceTime)
            case 2: try decoder.decodeSingularInt64Field(value: &serverModified)
            case 3: try decoder.decodeRepeatedMessageField(value: &changes)
            case 4: try decoder.decodeSingularStringField(value: &version)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if deviceTime != 0 {
            try visitor.visitSingularInt64Field(value: deviceTime, fieldNumber: 1)
        }
        if serverModified != 0 {
            try visitor.visitSingularInt64Field(value: serverModified, fieldNumber: 2)
        }
        if !changes.isEmpty {
            try visitor.visitRepeatedMessageField(value: changes, fieldNumber: 3)
        }
        if !version.isEmpty {
            try visitor.visitSingularStringField(value: version, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_HistorySyncRequest, rhs: Api_HistorySyncRequest) -> Bool {
        if lhs.deviceTime != rhs.deviceTime { return false }
        if lhs.serverModified != rhs.serverModified { return false }
        if lhs.changes != rhs.changes { return false }
        if lhs.version != rhs.version { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_HistoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".HistoryResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "server_modified"),
        2: .standard(proto: "last_cleared"),
        3: .same(proto: "changes")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &serverModified)
            case 2: try decoder.decodeSingularInt64Field(value: &lastCleared)
            case 3: try decoder.decodeRepeatedMessageField(value: &changes)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if serverModified != 0 {
            try visitor.visitSingularInt64Field(value: serverModified, fieldNumber: 1)
        }
        if lastCleared != 0 {
            try visitor.visitSingularInt64Field(value: lastCleared, fieldNumber: 2)
        }
        if !changes.isEmpty {
            try visitor.visitRepeatedMessageField(value: changes, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_HistoryResponse, rhs: Api_HistoryResponse) -> Bool {
        if lhs.serverModified != rhs.serverModified { return false }
        if lhs.lastCleared != rhs.lastCleared { return false }
        if lhs.changes != rhs.changes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_UpNextRemoveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UpNextRemoveRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuids"),
        2: .same(proto: "version")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedStringField(value: &uuids)
            case 2: try decoder.decodeSingularStringField(value: &version)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuids.isEmpty {
            try visitor.visitRepeatedStringField(value: uuids, fieldNumber: 1)
        }
        if !version.isEmpty {
            try visitor.visitSingularStringField(value: version, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_UpNextRemoveRequest, rhs: Api_UpNextRemoveRequest) -> Bool {
        if lhs.uuids != rhs.uuids { return false }
        if lhs.version != rhs.version { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_EpisodeSyncResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EpisodeSyncResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "playing_status"),
        3: .standard(proto: "played_up_to"),
        4: .standard(proto: "is_deleted"),
        5: .same(proto: "starred"),
        6: .same(proto: "duration")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &uuid)
            case 2: try decoder.decodeSingularInt32Field(value: &playingStatus)
            case 3: try decoder.decodeSingularInt32Field(value: &playedUpTo)
            case 4: try decoder.decodeSingularBoolField(value: &isDeleted)
            case 5: try decoder.decodeSingularBoolField(value: &starred)
            case 6: try decoder.decodeSingularInt32Field(value: &duration)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 1)
        }
        if playingStatus != 0 {
            try visitor.visitSingularInt32Field(value: playingStatus, fieldNumber: 2)
        }
        if playedUpTo != 0 {
            try visitor.visitSingularInt32Field(value: playedUpTo, fieldNumber: 3)
        }
        if isDeleted != false {
            try visitor.visitSingularBoolField(value: isDeleted, fieldNumber: 4)
        }
        if starred != false {
            try visitor.visitSingularBoolField(value: starred, fieldNumber: 5)
        }
        if duration != 0 {
            try visitor.visitSingularInt32Field(value: duration, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_EpisodeSyncResponse, rhs: Api_EpisodeSyncResponse) -> Bool {
        if lhs.uuid != rhs.uuid { return false }
        if lhs.playingStatus != rhs.playingStatus { return false }
        if lhs.playedUpTo != rhs.playedUpTo { return false }
        if lhs.isDeleted != rhs.isDeleted { return false }
        if lhs.starred != rhs.starred { return false }
        if lhs.duration != rhs.duration { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SearchPodcastsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SearchPodcastsRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "term")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &term)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !term.isEmpty {
            try visitor.visitSingularStringField(value: term, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SearchPodcastsRequest, rhs: Api_SearchPodcastsRequest) -> Bool {
        if lhs.term != rhs.term { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_HealthResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".HealthResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "ok"),
        2: .same(proto: "messages")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBoolField(value: &ok)
            case 2: try decoder.decodeRepeatedStringField(value: &messages)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if ok != false {
            try visitor.visitSingularBoolField(value: ok, fieldNumber: 1)
        }
        if !messages.isEmpty {
            try visitor.visitRepeatedStringField(value: messages, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_HealthResponse, rhs: Api_HealthResponse) -> Bool {
        if lhs.ok != rhs.ok { return false }
        if lhs.messages != rhs.messages { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_StatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StatsResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "time_silence_removal"),
        2: .standard(proto: "time_skipping"),
        3: .standard(proto: "time_intro_skipping"),
        4: .standard(proto: "time_variable_speed"),
        5: .standard(proto: "time_listened"),
        6: .standard(proto: "times_started_at")
    ]
    
    fileprivate class _StorageClass {
        var _timeSilenceRemoval: Int64 = 0
        var _timeSkipping: Int64 = 0
        var _timeIntroSkipping: Int64 = 0
        var _timeVariableSpeed: Int64 = 0
        var _timeListened: Int64 = 0
        var _timesStartedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _timeSilenceRemoval = source._timeSilenceRemoval
            _timeSkipping = source._timeSkipping
            _timeIntroSkipping = source._timeIntroSkipping
            _timeVariableSpeed = source._timeVariableSpeed
            _timeListened = source._timeListened
            _timesStartedAt = source._timesStartedAt
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularInt64Field(value: &_storage._timeSilenceRemoval)
                case 2: try decoder.decodeSingularInt64Field(value: &_storage._timeSkipping)
                case 3: try decoder.decodeSingularInt64Field(value: &_storage._timeIntroSkipping)
                case 4: try decoder.decodeSingularInt64Field(value: &_storage._timeVariableSpeed)
                case 5: try decoder.decodeSingularInt64Field(value: &_storage._timeListened)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._timesStartedAt)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._timeSilenceRemoval != 0 {
                try visitor.visitSingularInt64Field(value: _storage._timeSilenceRemoval, fieldNumber: 1)
            }
            if _storage._timeSkipping != 0 {
                try visitor.visitSingularInt64Field(value: _storage._timeSkipping, fieldNumber: 2)
            }
            if _storage._timeIntroSkipping != 0 {
                try visitor.visitSingularInt64Field(value: _storage._timeIntroSkipping, fieldNumber: 3)
            }
            if _storage._timeVariableSpeed != 0 {
                try visitor.visitSingularInt64Field(value: _storage._timeVariableSpeed, fieldNumber: 4)
            }
            if _storage._timeListened != 0 {
                try visitor.visitSingularInt64Field(value: _storage._timeListened, fieldNumber: 5)
            }
            if let v = _storage._timesStartedAt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_StatsResponse, rhs: Api_StatsResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._timeSilenceRemoval != rhs_storage._timeSilenceRemoval { return false }
                if _storage._timeSkipping != rhs_storage._timeSkipping { return false }
                if _storage._timeIntroSkipping != rhs_storage._timeIntroSkipping { return false }
                if _storage._timeVariableSpeed != rhs_storage._timeVariableSpeed { return false }
                if _storage._timeListened != rhs_storage._timeListened { return false }
                if _storage._timesStartedAt != rhs_storage._timesStartedAt { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_RegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RegisterRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "email"),
        2: .same(proto: "password"),
        3: .same(proto: "scope")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &email)
            case 2: try decoder.decodeSingularStringField(value: &password)
            case 3: try decoder.decodeSingularStringField(value: &scope)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 1)
        }
        if !password.isEmpty {
            try visitor.visitSingularStringField(value: password, fieldNumber: 2)
        }
        if !scope.isEmpty {
            try visitor.visitSingularStringField(value: scope, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_RegisterRequest, rhs: Api_RegisterRequest) -> Bool {
        if lhs.email != rhs.email { return false }
        if lhs.password != rhs.password { return false }
        if lhs.scope != rhs.scope { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_RegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RegisterResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "success"),
        2: .same(proto: "message"),
        3: .same(proto: "token"),
        4: .same(proto: "uuid"),
        5: .same(proto: "errors")
    ]
    
    fileprivate class _StorageClass {
        var _success: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _message = String()
        var _token = String()
        var _uuid = String()
        var _errors: [String] = []
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _success = source._success
            _message = source._message
            _token = source._token
            _uuid = source._uuid
            _errors = source._errors
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._success)
                case 2: try decoder.decodeSingularStringField(value: &_storage._message)
                case 3: try decoder.decodeSingularStringField(value: &_storage._token)
                case 4: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 5: try decoder.decodeRepeatedStringField(value: &_storage._errors)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._success {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if !_storage._message.isEmpty {
                try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 2)
            }
            if !_storage._token.isEmpty {
                try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 3)
            }
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 4)
            }
            if !_storage._errors.isEmpty {
                try visitor.visitRepeatedStringField(value: _storage._errors, fieldNumber: 5)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_RegisterResponse, rhs: Api_RegisterResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._success != rhs_storage._success { return false }
                if _storage._message != rhs_storage._message { return false }
                if _storage._token != rhs_storage._token { return false }
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._errors != rhs_storage._errors { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_StarredEpisodesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StarredEpisodesResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "episodes")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &episodes)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !episodes.isEmpty {
            try visitor.visitRepeatedMessageField(value: episodes, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_StarredEpisodesResponse, rhs: Api_StarredEpisodesResponse) -> Bool {
        if lhs.episodes != rhs.episodes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_StarredEpisode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StarredEpisode"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "podcast_uuid"),
        3: .same(proto: "duration"),
        4: .standard(proto: "playing_status"),
        5: .standard(proto: "played_up_to"),
        6: .standard(proto: "is_deleted")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &uuid)
            case 2: try decoder.decodeSingularStringField(value: &podcastUuid)
            case 3: try decoder.decodeSingularInt32Field(value: &duration)
            case 4: try decoder.decodeSingularInt32Field(value: &playingStatus)
            case 5: try decoder.decodeSingularInt32Field(value: &playedUpTo)
            case 6: try decoder.decodeSingularBoolField(value: &isDeleted)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !uuid.isEmpty {
            try visitor.visitSingularStringField(value: uuid, fieldNumber: 1)
        }
        if !podcastUuid.isEmpty {
            try visitor.visitSingularStringField(value: podcastUuid, fieldNumber: 2)
        }
        if duration != 0 {
            try visitor.visitSingularInt32Field(value: duration, fieldNumber: 3)
        }
        if playingStatus != 0 {
            try visitor.visitSingularInt32Field(value: playingStatus, fieldNumber: 4)
        }
        if playedUpTo != 0 {
            try visitor.visitSingularInt32Field(value: playedUpTo, fieldNumber: 5)
        }
        if isDeleted != false {
            try visitor.visitSingularBoolField(value: isDeleted, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_StarredEpisode, rhs: Api_StarredEpisode) -> Bool {
        if lhs.uuid != rhs.uuid { return false }
        if lhs.podcastUuid != rhs.podcastUuid { return false }
        if lhs.duration != rhs.duration { return false }
        if lhs.playingStatus != rhs.playingStatus { return false }
        if lhs.playedUpTo != rhs.playedUpTo { return false }
        if lhs.isDeleted != rhs.isDeleted { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_PlaylistSyncResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PlaylistSyncResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "is_deleted"),
        3: .same(proto: "title"),
        4: .standard(proto: "audio_video"),
        5: .standard(proto: "not_downloaded"),
        6: .same(proto: "downloaded"),
        7: .same(proto: "downloading"),
        8: .same(proto: "finished"),
        9: .standard(proto: "partially_played"),
        10: .same(proto: "unplayed"),
        11: .same(proto: "starred"),
        12: .same(proto: "manual"),
        13: .standard(proto: "sort_position"),
        14: .standard(proto: "sort_type"),
        15: .standard(proto: "icon_id"),
        16: .standard(proto: "all_podcasts"),
        17: .standard(proto: "filter_hours"),
        18: .standard(proto: "podcast_uuids"),
        19: .standard(proto: "episode_uuids"),
        20: .standard(proto: "original_uuid")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _title = String()
        var _audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _notDownloaded: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _downloaded: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _downloading: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _finished: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _partiallyPlayed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _unplayed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _starred: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _manual: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _sortType: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _iconID: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _allPodcasts: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _filterHours: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _podcastUuids = String()
        var _episodeUuids = String()
        var _originalUuid = String()
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _isDeleted = source._isDeleted
            _title = source._title
            _audioVideo = source._audioVideo
            _notDownloaded = source._notDownloaded
            _downloaded = source._downloaded
            _downloading = source._downloading
            _finished = source._finished
            _partiallyPlayed = source._partiallyPlayed
            _unplayed = source._unplayed
            _starred = source._starred
            _manual = source._manual
            _sortPosition = source._sortPosition
            _sortType = source._sortType
            _iconID = source._iconID
            _allPodcasts = source._allPodcasts
            _filterHours = source._filterHours
            _podcastUuids = source._podcastUuids
            _episodeUuids = source._episodeUuids
            _originalUuid = source._originalUuid
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._isDeleted)
                case 3: try decoder.decodeSingularStringField(value: &_storage._title)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._audioVideo)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._notDownloaded)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._downloaded)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._downloading)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._finished)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._partiallyPlayed)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._unplayed)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._starred)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._manual)
                case 13: try decoder.decodeSingularMessageField(value: &_storage._sortPosition)
                case 14: try decoder.decodeSingularMessageField(value: &_storage._sortType)
                case 15: try decoder.decodeSingularMessageField(value: &_storage._iconID)
                case 16: try decoder.decodeSingularMessageField(value: &_storage._allPodcasts)
                case 17: try decoder.decodeSingularMessageField(value: &_storage._filterHours)
                case 18: try decoder.decodeSingularStringField(value: &_storage._podcastUuids)
                case 19: try decoder.decodeSingularStringField(value: &_storage._episodeUuids)
                case 20: try decoder.decodeSingularStringField(value: &_storage._originalUuid)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if let v = _storage._isDeleted {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if !_storage._title.isEmpty {
                try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 3)
            }
            if let v = _storage._audioVideo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._notDownloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._downloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._downloading {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._finished {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._partiallyPlayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._unplayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._starred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._manual {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
            if let v = _storage._sortPosition {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }
            if let v = _storage._sortType {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }
            if let v = _storage._iconID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }
            if let v = _storage._allPodcasts {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }
            if let v = _storage._filterHours {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }
            if !_storage._podcastUuids.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcastUuids, fieldNumber: 18)
            }
            if !_storage._episodeUuids.isEmpty {
                try visitor.visitSingularStringField(value: _storage._episodeUuids, fieldNumber: 19)
            }
            if !_storage._originalUuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._originalUuid, fieldNumber: 20)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_PlaylistSyncResponse, rhs: Api_PlaylistSyncResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._audioVideo != rhs_storage._audioVideo { return false }
                if _storage._notDownloaded != rhs_storage._notDownloaded { return false }
                if _storage._downloaded != rhs_storage._downloaded { return false }
                if _storage._downloading != rhs_storage._downloading { return false }
                if _storage._finished != rhs_storage._finished { return false }
                if _storage._partiallyPlayed != rhs_storage._partiallyPlayed { return false }
                if _storage._unplayed != rhs_storage._unplayed { return false }
                if _storage._starred != rhs_storage._starred { return false }
                if _storage._manual != rhs_storage._manual { return false }
                if _storage._sortPosition != rhs_storage._sortPosition { return false }
                if _storage._sortType != rhs_storage._sortType { return false }
                if _storage._iconID != rhs_storage._iconID { return false }
                if _storage._allPodcasts != rhs_storage._allPodcasts { return false }
                if _storage._filterHours != rhs_storage._filterHours { return false }
                if _storage._podcastUuids != rhs_storage._podcastUuids { return false }
                if _storage._episodeUuids != rhs_storage._episodeUuids { return false }
                if _storage._originalUuid != rhs_storage._originalUuid { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SubscriptionsPurchaseAndroidRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SubscriptionsPurchaseAndroidRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "purchaseToken"),
        2: .same(proto: "sku")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &purchaseToken)
            case 2: try decoder.decodeSingularStringField(value: &sku)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !purchaseToken.isEmpty {
            try visitor.visitSingularStringField(value: purchaseToken, fieldNumber: 1)
        }
        if !sku.isEmpty {
            try visitor.visitSingularStringField(value: sku, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SubscriptionsPurchaseAndroidRequest, rhs: Api_SubscriptionsPurchaseAndroidRequest) -> Bool {
        if lhs.purchaseToken != rhs.purchaseToken { return false }
        if lhs.sku != rhs.sku { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SubscriptionsPurchaseAppleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SubscriptionsPurchaseAppleRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "receipt")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &receipt)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !receipt.isEmpty {
            try visitor.visitSingularStringField(value: receipt, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SubscriptionsPurchaseAppleRequest, rhs: Api_SubscriptionsPurchaseAppleRequest) -> Bool {
        if lhs.receipt != rhs.receipt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SubscriptionsPurchaseWebRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SubscriptionsPurchaseWebRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "transactionId"),
        2: .same(proto: "email"),
        3: .same(proto: "paddleUserId"),
        4: .same(proto: "productId")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &transactionID)
            case 2: try decoder.decodeSingularStringField(value: &email)
            case 3: try decoder.decodeSingularInt64Field(value: &paddleUserID)
            case 4: try decoder.decodeSingularStringField(value: &productID)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !transactionID.isEmpty {
            try visitor.visitSingularStringField(value: transactionID, fieldNumber: 1)
        }
        if !email.isEmpty {
            try visitor.visitSingularStringField(value: email, fieldNumber: 2)
        }
        if paddleUserID != 0 {
            try visitor.visitSingularInt64Field(value: paddleUserID, fieldNumber: 3)
        }
        if !productID.isEmpty {
            try visitor.visitSingularStringField(value: productID, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SubscriptionsPurchaseWebRequest, rhs: Api_SubscriptionsPurchaseWebRequest) -> Bool {
        if lhs.transactionID != rhs.transactionID { return false }
        if lhs.email != rhs.email { return false }
        if lhs.paddleUserID != rhs.paddleUserID { return false }
        if lhs.productID != rhs.productID { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SubscriptionsStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SubscriptionsStatusResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "paid"),
        2: .same(proto: "platform"),
        3: .same(proto: "expiryDate"),
        4: .same(proto: "autoRenewing"),
        5: .same(proto: "giftDays"),
        6: .same(proto: "cancelUrl"),
        7: .same(proto: "updateUrl"),
        8: .same(proto: "frequency")
    ]
    
    fileprivate class _StorageClass {
        var _paid: Int32 = 0
        var _platform: Int32 = 0
        var _expiryDate: SwiftProtobuf.Google_Protobuf_Timestamp?
        var _autoRenewing: Bool = false
        var _giftDays: Int32 = 0
        var _cancelURL = String()
        var _updateURL = String()
        var _frequency: Int32 = 0
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _paid = source._paid
            _platform = source._platform
            _expiryDate = source._expiryDate
            _autoRenewing = source._autoRenewing
            _giftDays = source._giftDays
            _cancelURL = source._cancelURL
            _updateURL = source._updateURL
            _frequency = source._frequency
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularInt32Field(value: &_storage._paid)
                case 2: try decoder.decodeSingularInt32Field(value: &_storage._platform)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._expiryDate)
                case 4: try decoder.decodeSingularBoolField(value: &_storage._autoRenewing)
                case 5: try decoder.decodeSingularInt32Field(value: &_storage._giftDays)
                case 6: try decoder.decodeSingularStringField(value: &_storage._cancelURL)
                case 7: try decoder.decodeSingularStringField(value: &_storage._updateURL)
                case 8: try decoder.decodeSingularInt32Field(value: &_storage._frequency)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if _storage._paid != 0 {
                try visitor.visitSingularInt32Field(value: _storage._paid, fieldNumber: 1)
            }
            if _storage._platform != 0 {
                try visitor.visitSingularInt32Field(value: _storage._platform, fieldNumber: 2)
            }
            if let v = _storage._expiryDate {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if _storage._autoRenewing != false {
                try visitor.visitSingularBoolField(value: _storage._autoRenewing, fieldNumber: 4)
            }
            if _storage._giftDays != 0 {
                try visitor.visitSingularInt32Field(value: _storage._giftDays, fieldNumber: 5)
            }
            if !_storage._cancelURL.isEmpty {
                try visitor.visitSingularStringField(value: _storage._cancelURL, fieldNumber: 6)
            }
            if !_storage._updateURL.isEmpty {
                try visitor.visitSingularStringField(value: _storage._updateURL, fieldNumber: 7)
            }
            if _storage._frequency != 0 {
                try visitor.visitSingularInt32Field(value: _storage._frequency, fieldNumber: 8)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SubscriptionsStatusResponse, rhs: Api_SubscriptionsStatusResponse) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._paid != rhs_storage._paid { return false }
                if _storage._platform != rhs_storage._platform { return false }
                if _storage._expiryDate != rhs_storage._expiryDate { return false }
                if _storage._autoRenewing != rhs_storage._autoRenewing { return false }
                if _storage._giftDays != rhs_storage._giftDays { return false }
                if _storage._cancelURL != rhs_storage._cancelURL { return false }
                if _storage._updateURL != rhs_storage._updateURL { return false }
                if _storage._frequency != rhs_storage._frequency { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacyRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "device"),
        2: .same(proto: "datetime"),
        3: .same(proto: "v"),
        4: .same(proto: "av"),
        5: .same(proto: "ac"),
        6: .same(proto: "h"),
        7: .same(proto: "dt"),
        8: .same(proto: "c"),
        9: .same(proto: "l"),
        10: .same(proto: "m"),
        11: .same(proto: "email"),
        12: .same(proto: "password"),
        13: .same(proto: "token"),
        14: .standard(proto: "device_utc_time_ms"),
        15: .same(proto: "data"),
        16: .same(proto: "message"),
        17: .standard(proto: "last_modified")
    ]
    
    fileprivate class _StorageClass {
        var _device = String()
        var _datetime = String()
        var _v = String()
        var _av = String()
        var _ac = String()
        var _h = String()
        var _dt = String()
        var _c = String()
        var _l = String()
        var _m = String()
        var _email = String()
        var _password = String()
        var _token = String()
        var _deviceUtcTimeMs = String()
        var _data = String()
        var _message = String()
        var _lastModified = String()
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _device = source._device
            _datetime = source._datetime
            _v = source._v
            _av = source._av
            _ac = source._ac
            _h = source._h
            _dt = source._dt
            _c = source._c
            _l = source._l
            _m = source._m
            _email = source._email
            _password = source._password
            _token = source._token
            _deviceUtcTimeMs = source._deviceUtcTimeMs
            _data = source._data
            _message = source._message
            _lastModified = source._lastModified
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._device)
                case 2: try decoder.decodeSingularStringField(value: &_storage._datetime)
                case 3: try decoder.decodeSingularStringField(value: &_storage._v)
                case 4: try decoder.decodeSingularStringField(value: &_storage._av)
                case 5: try decoder.decodeSingularStringField(value: &_storage._ac)
                case 6: try decoder.decodeSingularStringField(value: &_storage._h)
                case 7: try decoder.decodeSingularStringField(value: &_storage._dt)
                case 8: try decoder.decodeSingularStringField(value: &_storage._c)
                case 9: try decoder.decodeSingularStringField(value: &_storage._l)
                case 10: try decoder.decodeSingularStringField(value: &_storage._m)
                case 11: try decoder.decodeSingularStringField(value: &_storage._email)
                case 12: try decoder.decodeSingularStringField(value: &_storage._password)
                case 13: try decoder.decodeSingularStringField(value: &_storage._token)
                case 14: try decoder.decodeSingularStringField(value: &_storage._deviceUtcTimeMs)
                case 15: try decoder.decodeSingularStringField(value: &_storage._data)
                case 16: try decoder.decodeSingularStringField(value: &_storage._message)
                case 17: try decoder.decodeSingularStringField(value: &_storage._lastModified)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._device.isEmpty {
                try visitor.visitSingularStringField(value: _storage._device, fieldNumber: 1)
            }
            if !_storage._datetime.isEmpty {
                try visitor.visitSingularStringField(value: _storage._datetime, fieldNumber: 2)
            }
            if !_storage._v.isEmpty {
                try visitor.visitSingularStringField(value: _storage._v, fieldNumber: 3)
            }
            if !_storage._av.isEmpty {
                try visitor.visitSingularStringField(value: _storage._av, fieldNumber: 4)
            }
            if !_storage._ac.isEmpty {
                try visitor.visitSingularStringField(value: _storage._ac, fieldNumber: 5)
            }
            if !_storage._h.isEmpty {
                try visitor.visitSingularStringField(value: _storage._h, fieldNumber: 6)
            }
            if !_storage._dt.isEmpty {
                try visitor.visitSingularStringField(value: _storage._dt, fieldNumber: 7)
            }
            if !_storage._c.isEmpty {
                try visitor.visitSingularStringField(value: _storage._c, fieldNumber: 8)
            }
            if !_storage._l.isEmpty {
                try visitor.visitSingularStringField(value: _storage._l, fieldNumber: 9)
            }
            if !_storage._m.isEmpty {
                try visitor.visitSingularStringField(value: _storage._m, fieldNumber: 10)
            }
            if !_storage._email.isEmpty {
                try visitor.visitSingularStringField(value: _storage._email, fieldNumber: 11)
            }
            if !_storage._password.isEmpty {
                try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 12)
            }
            if !_storage._token.isEmpty {
                try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 13)
            }
            if !_storage._deviceUtcTimeMs.isEmpty {
                try visitor.visitSingularStringField(value: _storage._deviceUtcTimeMs, fieldNumber: 14)
            }
            if !_storage._data.isEmpty {
                try visitor.visitSingularStringField(value: _storage._data, fieldNumber: 15)
            }
            if !_storage._message.isEmpty {
                try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 16)
            }
            if !_storage._lastModified.isEmpty {
                try visitor.visitSingularStringField(value: _storage._lastModified, fieldNumber: 17)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacyRequest, rhs: Api_LegacyRequest) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._device != rhs_storage._device { return false }
                if _storage._datetime != rhs_storage._datetime { return false }
                if _storage._v != rhs_storage._v { return false }
                if _storage._av != rhs_storage._av { return false }
                if _storage._ac != rhs_storage._ac { return false }
                if _storage._h != rhs_storage._h { return false }
                if _storage._dt != rhs_storage._dt { return false }
                if _storage._c != rhs_storage._c { return false }
                if _storage._l != rhs_storage._l { return false }
                if _storage._m != rhs_storage._m { return false }
                if _storage._email != rhs_storage._email { return false }
                if _storage._password != rhs_storage._password { return false }
                if _storage._token != rhs_storage._token { return false }
                if _storage._deviceUtcTimeMs != rhs_storage._deviceUtcTimeMs { return false }
                if _storage._data != rhs_storage._data { return false }
                if _storage._message != rhs_storage._message { return false }
                if _storage._lastModified != rhs_storage._lastModified { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacyResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "status"),
        2: .same(proto: "token"),
        3: .same(proto: "copyright"),
        4: .same(proto: "result")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &status)
            case 2: try decoder.decodeSingularStringField(value: &token)
            case 3: try decoder.decodeSingularStringField(value: &copyright)
            case 4: try decoder.decodeSingularStringField(value: &result)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !status.isEmpty {
            try visitor.visitSingularStringField(value: status, fieldNumber: 1)
        }
        if !token.isEmpty {
            try visitor.visitSingularStringField(value: token, fieldNumber: 2)
        }
        if !copyright.isEmpty {
            try visitor.visitSingularStringField(value: copyright, fieldNumber: 3)
        }
        if !result.isEmpty {
            try visitor.visitSingularStringField(value: result, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacyResponse, rhs: Api_LegacyResponse) -> Bool {
        if lhs.status != rhs.status { return false }
        if lhs.token != rhs.token { return false }
        if lhs.copyright != rhs.copyright { return false }
        if lhs.result != rhs.result { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUpdateRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "device_utc_time_ms"),
        2: .standard(proto: "last_modified"),
        3: .same(proto: "country"),
        4: .standard(proto: "device_id"),
        5: .same(proto: "records")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &deviceUtcTimeMs)
            case 2: try decoder.decodeSingularInt64Field(value: &lastModified)
            case 3: try decoder.decodeSingularStringField(value: &country)
            case 4: try decoder.decodeSingularStringField(value: &deviceID)
            case 5: try decoder.decodeRepeatedMessageField(value: &records)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if deviceUtcTimeMs != 0 {
            try visitor.visitSingularInt64Field(value: deviceUtcTimeMs, fieldNumber: 1)
        }
        if lastModified != 0 {
            try visitor.visitSingularInt64Field(value: lastModified, fieldNumber: 2)
        }
        if !country.isEmpty {
            try visitor.visitSingularStringField(value: country, fieldNumber: 3)
        }
        if !deviceID.isEmpty {
            try visitor.visitSingularStringField(value: deviceID, fieldNumber: 4)
        }
        if !records.isEmpty {
            try visitor.visitRepeatedMessageField(value: records, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUpdateRequest, rhs: Api_SyncUpdateRequest) -> Bool {
        if lhs.deviceUtcTimeMs != rhs.deviceUtcTimeMs { return false }
        if lhs.lastModified != rhs.lastModified { return false }
        if lhs.country != rhs.country { return false }
        if lhs.deviceID != rhs.deviceID { return false }
        if lhs.records != rhs.records { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUpdateResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "last_modified"),
        2: .same(proto: "records")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &lastModified)
            case 2: try decoder.decodeRepeatedMessageField(value: &records)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if lastModified != 0 {
            try visitor.visitSingularInt64Field(value: lastModified, fieldNumber: 1)
        }
        if !records.isEmpty {
            try visitor.visitRepeatedMessageField(value: records, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUpdateResponse, rhs: Api_SyncUpdateResponse) -> Bool {
        if lhs.lastModified != rhs.lastModified { return false }
        if lhs.records != rhs.records { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_Record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Record"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "podcast"),
        2: .same(proto: "episode"),
        3: .same(proto: "playlist"),
        4: .same(proto: "device")
    ]
    
    fileprivate class _StorageClass {
        var _record: Api_Record.OneOf_Record?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _record = source._record
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1:
                    var v: Api_SyncUserPodcast?
                    if let current = _storage._record {
                        try decoder.handleConflictingOneOf()
                        if case let .podcast(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._record = .podcast(v) }
                case 2:
                    var v: Api_SyncUserEpisode?
                    if let current = _storage._record {
                        try decoder.handleConflictingOneOf()
                        if case let .episode(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._record = .episode(v) }
                case 3:
                    var v: Api_SyncUserPlaylist?
                    if let current = _storage._record {
                        try decoder.handleConflictingOneOf()
                        if case let .playlist(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._record = .playlist(v) }
                case 4:
                    var v: Api_SyncUserDevice?
                    if let current = _storage._record {
                        try decoder.handleConflictingOneOf()
                        if case let .device(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v { _storage._record = .device(v) }
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            switch _storage._record {
            case let .podcast(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            case let .episode(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            case let .playlist(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            case let .device(v)?:
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            case nil: break
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_Record, rhs: Api_Record) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._record != rhs_storage._record { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUserPodcast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUserPodcast"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "is_deleted"),
        3: .same(proto: "subscribed"),
        4: .standard(proto: "auto_start_from"),
        5: .standard(proto: "episodes_sort_order"),
        6: .standard(proto: "auto_skip_last")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _subscribed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _episodesSortOrder: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _isDeleted = source._isDeleted
            _subscribed = source._subscribed
            _autoStartFrom = source._autoStartFrom
            _episodesSortOrder = source._episodesSortOrder
            _autoSkipLast = source._autoSkipLast
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._isDeleted)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._subscribed)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._autoStartFrom)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._episodesSortOrder)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._autoSkipLast)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if let v = _storage._isDeleted {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._subscribed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._autoStartFrom {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._episodesSortOrder {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._autoSkipLast {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUserPodcast, rhs: Api_SyncUserPodcast) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                if _storage._subscribed != rhs_storage._subscribed { return false }
                if _storage._autoStartFrom != rhs_storage._autoStartFrom { return false }
                if _storage._episodesSortOrder != rhs_storage._episodesSortOrder { return false }
                if _storage._autoSkipLast != rhs_storage._autoSkipLast { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUserEpisode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUserEpisode"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "podcast_uuid"),
        3: .standard(proto: "is_deleted"),
        4: .standard(proto: "is_deleted_modified"),
        5: .same(proto: "duration"),
        6: .standard(proto: "duration_modified"),
        7: .standard(proto: "playing_status"),
        8: .standard(proto: "playing_status_modified"),
        9: .standard(proto: "played_up_to"),
        10: .standard(proto: "played_up_to_modified"),
        11: .same(proto: "starred"),
        12: .standard(proto: "starred_modified")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _podcastUuid = String()
        var _isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _isDeletedModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _duration: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _durationModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playingStatus: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _playingStatusModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playedUpTo: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playedUpToModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _starred: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _starredModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _podcastUuid = source._podcastUuid
            _isDeleted = source._isDeleted
            _isDeletedModified = source._isDeletedModified
            _duration = source._duration
            _durationModified = source._durationModified
            _playingStatus = source._playingStatus
            _playingStatusModified = source._playingStatusModified
            _playedUpTo = source._playedUpTo
            _playedUpToModified = source._playedUpToModified
            _starred = source._starred
            _starredModified = source._starredModified
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularStringField(value: &_storage._podcastUuid)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._isDeleted)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._isDeletedModified)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._duration)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._durationModified)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._playingStatus)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._playingStatusModified)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._playedUpTo)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._playedUpToModified)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._starred)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._starredModified)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if !_storage._podcastUuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._podcastUuid, fieldNumber: 2)
            }
            if let v = _storage._isDeleted {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._isDeletedModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._duration {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._durationModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._playingStatus {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._playingStatusModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._playedUpTo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._playedUpToModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._starred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._starredModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUserEpisode, rhs: Api_SyncUserEpisode) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._podcastUuid != rhs_storage._podcastUuid { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                if _storage._isDeletedModified != rhs_storage._isDeletedModified { return false }
                if _storage._duration != rhs_storage._duration { return false }
                if _storage._durationModified != rhs_storage._durationModified { return false }
                if _storage._playingStatus != rhs_storage._playingStatus { return false }
                if _storage._playingStatusModified != rhs_storage._playingStatusModified { return false }
                if _storage._playedUpTo != rhs_storage._playedUpTo { return false }
                if _storage._playedUpToModified != rhs_storage._playedUpToModified { return false }
                if _storage._starred != rhs_storage._starred { return false }
                if _storage._starredModified != rhs_storage._starredModified { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUserDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUserDevice"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "device_id"),
        2: .standard(proto: "device_type"),
        3: .standard(proto: "times_started_at"),
        4: .standard(proto: "time_silence_removal"),
        5: .standard(proto: "time_variable_speed"),
        6: .standard(proto: "time_intro_skipping"),
        7: .standard(proto: "time_skipping"),
        8: .standard(proto: "time_listened")
    ]
    
    fileprivate class _StorageClass {
        var _deviceID: SwiftProtobuf.Google_Protobuf_StringValue?
        var _deviceType: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _timesStartedAt: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeSilenceRemoval: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeVariableSpeed: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeIntroSkipping: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeSkipping: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeListened: SwiftProtobuf.Google_Protobuf_Int64Value?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _deviceID = source._deviceID
            _deviceType = source._deviceType
            _timesStartedAt = source._timesStartedAt
            _timeSilenceRemoval = source._timeSilenceRemoval
            _timeVariableSpeed = source._timeVariableSpeed
            _timeIntroSkipping = source._timeIntroSkipping
            _timeSkipping = source._timeSkipping
            _timeListened = source._timeListened
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._deviceID)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._deviceType)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._timesStartedAt)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._timeSilenceRemoval)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._timeVariableSpeed)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._timeIntroSkipping)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._timeSkipping)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._timeListened)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._deviceID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._deviceType {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._timesStartedAt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._timeSilenceRemoval {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._timeVariableSpeed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._timeIntroSkipping {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._timeSkipping {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._timeListened {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUserDevice, rhs: Api_SyncUserDevice) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._deviceID != rhs_storage._deviceID { return false }
                if _storage._deviceType != rhs_storage._deviceType { return false }
                if _storage._timesStartedAt != rhs_storage._timesStartedAt { return false }
                if _storage._timeSilenceRemoval != rhs_storage._timeSilenceRemoval { return false }
                if _storage._timeVariableSpeed != rhs_storage._timeVariableSpeed { return false }
                if _storage._timeIntroSkipping != rhs_storage._timeIntroSkipping { return false }
                if _storage._timeSkipping != rhs_storage._timeSkipping { return false }
                if _storage._timeListened != rhs_storage._timeListened { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_SyncUserPlaylist: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SyncUserPlaylist"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "is_deleted"),
        3: .same(proto: "title"),
        4: .standard(proto: "all_podcasts"),
        5: .standard(proto: "podcast_uuids"),
        6: .standard(proto: "episode_uuids"),
        7: .standard(proto: "audio_video"),
        8: .standard(proto: "not_downloaded"),
        9: .same(proto: "downloaded"),
        10: .same(proto: "downloading"),
        11: .same(proto: "finished"),
        12: .standard(proto: "partially_played"),
        13: .same(proto: "unplayed"),
        14: .same(proto: "starred"),
        15: .same(proto: "manual"),
        16: .standard(proto: "sort_position"),
        17: .standard(proto: "sort_type"),
        18: .standard(proto: "icon_id"),
        19: .standard(proto: "filter_hours"),
        20: .standard(proto: "original_uuid")
    ]
    
    fileprivate class _StorageClass {
        var _uuid = String()
        var _isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _title: SwiftProtobuf.Google_Protobuf_StringValue?
        var _allPodcasts: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _podcastUuids: SwiftProtobuf.Google_Protobuf_StringValue?
        var _episodeUuids: SwiftProtobuf.Google_Protobuf_StringValue?
        var _audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _notDownloaded: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _downloaded: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _downloading: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _finished: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _partiallyPlayed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _unplayed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _starred: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _manual: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _sortType: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _iconID: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _filterHours: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _originalUuid = String()
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _isDeleted = source._isDeleted
            _title = source._title
            _allPodcasts = source._allPodcasts
            _podcastUuids = source._podcastUuids
            _episodeUuids = source._episodeUuids
            _audioVideo = source._audioVideo
            _notDownloaded = source._notDownloaded
            _downloaded = source._downloaded
            _downloading = source._downloading
            _finished = source._finished
            _partiallyPlayed = source._partiallyPlayed
            _unplayed = source._unplayed
            _starred = source._starred
            _manual = source._manual
            _sortPosition = source._sortPosition
            _sortType = source._sortType
            _iconID = source._iconID
            _filterHours = source._filterHours
            _originalUuid = source._originalUuid
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._isDeleted)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._title)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._allPodcasts)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._podcastUuids)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._episodeUuids)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._audioVideo)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._notDownloaded)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._downloaded)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._downloading)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._finished)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._partiallyPlayed)
                case 13: try decoder.decodeSingularMessageField(value: &_storage._unplayed)
                case 14: try decoder.decodeSingularMessageField(value: &_storage._starred)
                case 15: try decoder.decodeSingularMessageField(value: &_storage._manual)
                case 16: try decoder.decodeSingularMessageField(value: &_storage._sortPosition)
                case 17: try decoder.decodeSingularMessageField(value: &_storage._sortType)
                case 18: try decoder.decodeSingularMessageField(value: &_storage._iconID)
                case 19: try decoder.decodeSingularMessageField(value: &_storage._filterHours)
                case 20: try decoder.decodeSingularStringField(value: &_storage._originalUuid)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._uuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
            }
            if let v = _storage._isDeleted {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._title {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._allPodcasts {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._podcastUuids {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._episodeUuids {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._audioVideo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._notDownloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._downloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._downloading {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._finished {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._partiallyPlayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
            if let v = _storage._unplayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }
            if let v = _storage._starred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }
            if let v = _storage._manual {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }
            if let v = _storage._sortPosition {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }
            if let v = _storage._sortType {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }
            if let v = _storage._iconID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
            }
            if let v = _storage._filterHours {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
            }
            if !_storage._originalUuid.isEmpty {
                try visitor.visitSingularStringField(value: _storage._originalUuid, fieldNumber: 20)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_SyncUserPlaylist, rhs: Api_SyncUserPlaylist) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._allPodcasts != rhs_storage._allPodcasts { return false }
                if _storage._podcastUuids != rhs_storage._podcastUuids { return false }
                if _storage._episodeUuids != rhs_storage._episodeUuids { return false }
                if _storage._audioVideo != rhs_storage._audioVideo { return false }
                if _storage._notDownloaded != rhs_storage._notDownloaded { return false }
                if _storage._downloaded != rhs_storage._downloaded { return false }
                if _storage._downloading != rhs_storage._downloading { return false }
                if _storage._finished != rhs_storage._finished { return false }
                if _storage._partiallyPlayed != rhs_storage._partiallyPlayed { return false }
                if _storage._unplayed != rhs_storage._unplayed { return false }
                if _storage._starred != rhs_storage._starred { return false }
                if _storage._manual != rhs_storage._manual { return false }
                if _storage._sortPosition != rhs_storage._sortPosition { return false }
                if _storage._sortType != rhs_storage._sortType { return false }
                if _storage._iconID != rhs_storage._iconID { return false }
                if _storage._filterHours != rhs_storage._filterHours { return false }
                if _storage._originalUuid != rhs_storage._originalUuid { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacySyncData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacySyncData"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        4: .same(proto: "records")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 4: try decoder.decodeRepeatedMessageField(value: &records)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !records.isEmpty {
            try visitor.visitRepeatedMessageField(value: records, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacySyncData, rhs: Api_LegacySyncData) -> Bool {
        if lhs.records != rhs.records { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacySyncRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacySyncRecord"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "fields")
    ]
    
    fileprivate class _StorageClass {
        var _type = String()
        var _fields: Api_LegacyRecord?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _type = source._type
            _fields = source._fields
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._type)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._fields)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._type.isEmpty {
                try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
            }
            if let v = _storage._fields {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacySyncRecord, rhs: Api_LegacySyncRecord) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._type != rhs_storage._type { return false }
                if _storage._fields != rhs_storage._fields { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacyRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacyRecord"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "user_podcast_uuid"),
        3: .standard(proto: "episode_uuid"),
        4: .standard(proto: "podcast_uuid"),
        5: .standard(proto: "is_deleted"),
        6: .standard(proto: "is_deleted_modified"),
        7: .same(proto: "duration"),
        8: .standard(proto: "duration_modified"),
        9: .standard(proto: "playing_status"),
        10: .standard(proto: "playing_status_modified"),
        11: .standard(proto: "played_up_to"),
        12: .standard(proto: "played_up_to_modified"),
        13: .same(proto: "starred"),
        14: .standard(proto: "starred_modified"),
        15: .standard(proto: "times_started_at"),
        16: .standard(proto: "time_silence_removal"),
        17: .standard(proto: "time_variable_speed"),
        18: .standard(proto: "time_intro_skipping"),
        19: .standard(proto: "time_skipping"),
        20: .standard(proto: "time_listened"),
        21: .standard(proto: "auto_start_from"),
        22: .same(proto: "subscribed"),
        23: .same(proto: "title"),
        24: .standard(proto: "all_podcasts"),
        25: .standard(proto: "podcast_uuids"),
        26: .standard(proto: "episode_uuids"),
        27: .standard(proto: "audio_video"),
        28: .standard(proto: "not_downloaded"),
        29: .same(proto: "downloaded"),
        30: .same(proto: "downloading"),
        31: .same(proto: "finished"),
        32: .standard(proto: "partially_played"),
        33: .same(proto: "unplayed"),
        34: .same(proto: "manual"),
        35: .standard(proto: "sort_position"),
        36: .standard(proto: "sort_type"),
        37: .standard(proto: "icon_id"),
        38: .standard(proto: "filter_hours"),
        39: .standard(proto: "auto_skip_last")
    ]
    
    fileprivate class _StorageClass {
        var _uuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _userPodcastUuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _episodeUuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _podcastUuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _isDeleted: SwiftProtobuf.Google_Protobuf_StringValue?
        var _isDeletedModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _duration: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _durationModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playingStatus: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _playingStatusModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playedUpTo: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _playedUpToModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _starred: SwiftProtobuf.Google_Protobuf_StringValue?
        var _starredModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timesStartedAt: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _timeSilenceRemoval: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _timeVariableSpeed: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _timeIntroSkipping: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _timeSkipping: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _timeListened: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _subscribed: SwiftProtobuf.Google_Protobuf_StringValue?
        var _title: SwiftProtobuf.Google_Protobuf_StringValue?
        var _allPodcasts: SwiftProtobuf.Google_Protobuf_StringValue?
        var _podcastUuids: SwiftProtobuf.Google_Protobuf_StringValue?
        var _episodeUuids: SwiftProtobuf.Google_Protobuf_StringValue?
        var _audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _notDownloaded: SwiftProtobuf.Google_Protobuf_StringValue?
        var _downloaded: SwiftProtobuf.Google_Protobuf_StringValue?
        var _downloading: SwiftProtobuf.Google_Protobuf_StringValue?
        var _finished: SwiftProtobuf.Google_Protobuf_StringValue?
        var _partiallyPlayed: SwiftProtobuf.Google_Protobuf_StringValue?
        var _unplayed: SwiftProtobuf.Google_Protobuf_StringValue?
        var _manual: SwiftProtobuf.Google_Protobuf_StringValue?
        var _sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _sortType: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _iconID: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _filterHours: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _userPodcastUuid = source._userPodcastUuid
            _episodeUuid = source._episodeUuid
            _podcastUuid = source._podcastUuid
            _isDeleted = source._isDeleted
            _isDeletedModified = source._isDeletedModified
            _duration = source._duration
            _durationModified = source._durationModified
            _playingStatus = source._playingStatus
            _playingStatusModified = source._playingStatusModified
            _playedUpTo = source._playedUpTo
            _playedUpToModified = source._playedUpToModified
            _starred = source._starred
            _starredModified = source._starredModified
            _timesStartedAt = source._timesStartedAt
            _timeSilenceRemoval = source._timeSilenceRemoval
            _timeVariableSpeed = source._timeVariableSpeed
            _timeIntroSkipping = source._timeIntroSkipping
            _timeSkipping = source._timeSkipping
            _timeListened = source._timeListened
            _autoStartFrom = source._autoStartFrom
            _subscribed = source._subscribed
            _title = source._title
            _allPodcasts = source._allPodcasts
            _podcastUuids = source._podcastUuids
            _episodeUuids = source._episodeUuids
            _audioVideo = source._audioVideo
            _notDownloaded = source._notDownloaded
            _downloaded = source._downloaded
            _downloading = source._downloading
            _finished = source._finished
            _partiallyPlayed = source._partiallyPlayed
            _unplayed = source._unplayed
            _manual = source._manual
            _sortPosition = source._sortPosition
            _sortType = source._sortType
            _iconID = source._iconID
            _filterHours = source._filterHours
            _autoSkipLast = source._autoSkipLast
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._userPodcastUuid)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._episodeUuid)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._podcastUuid)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._isDeleted)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._isDeletedModified)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._duration)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._durationModified)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._playingStatus)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._playingStatusModified)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._playedUpTo)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._playedUpToModified)
                case 13: try decoder.decodeSingularMessageField(value: &_storage._starred)
                case 14: try decoder.decodeSingularMessageField(value: &_storage._starredModified)
                case 15: try decoder.decodeSingularMessageField(value: &_storage._timesStartedAt)
                case 16: try decoder.decodeSingularMessageField(value: &_storage._timeSilenceRemoval)
                case 17: try decoder.decodeSingularMessageField(value: &_storage._timeVariableSpeed)
                case 18: try decoder.decodeSingularMessageField(value: &_storage._timeIntroSkipping)
                case 19: try decoder.decodeSingularMessageField(value: &_storage._timeSkipping)
                case 20: try decoder.decodeSingularMessageField(value: &_storage._timeListened)
                case 21: try decoder.decodeSingularMessageField(value: &_storage._autoStartFrom)
                case 22: try decoder.decodeSingularMessageField(value: &_storage._subscribed)
                case 23: try decoder.decodeSingularMessageField(value: &_storage._title)
                case 24: try decoder.decodeSingularMessageField(value: &_storage._allPodcasts)
                case 25: try decoder.decodeSingularMessageField(value: &_storage._podcastUuids)
                case 26: try decoder.decodeSingularMessageField(value: &_storage._episodeUuids)
                case 27: try decoder.decodeSingularMessageField(value: &_storage._audioVideo)
                case 28: try decoder.decodeSingularMessageField(value: &_storage._notDownloaded)
                case 29: try decoder.decodeSingularMessageField(value: &_storage._downloaded)
                case 30: try decoder.decodeSingularMessageField(value: &_storage._downloading)
                case 31: try decoder.decodeSingularMessageField(value: &_storage._finished)
                case 32: try decoder.decodeSingularMessageField(value: &_storage._partiallyPlayed)
                case 33: try decoder.decodeSingularMessageField(value: &_storage._unplayed)
                case 34: try decoder.decodeSingularMessageField(value: &_storage._manual)
                case 35: try decoder.decodeSingularMessageField(value: &_storage._sortPosition)
                case 36: try decoder.decodeSingularMessageField(value: &_storage._sortType)
                case 37: try decoder.decodeSingularMessageField(value: &_storage._iconID)
                case 38: try decoder.decodeSingularMessageField(value: &_storage._filterHours)
                case 39: try decoder.decodeSingularMessageField(value: &_storage._autoSkipLast)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._uuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._userPodcastUuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._episodeUuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._podcastUuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._isDeleted {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._isDeletedModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._duration {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._durationModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._playingStatus {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._playingStatusModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._playedUpTo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._playedUpToModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
            if let v = _storage._starred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }
            if let v = _storage._starredModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }
            if let v = _storage._timesStartedAt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }
            if let v = _storage._timeSilenceRemoval {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }
            if let v = _storage._timeVariableSpeed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }
            if let v = _storage._timeIntroSkipping {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
            }
            if let v = _storage._timeSkipping {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
            }
            if let v = _storage._timeListened {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
            }
            if let v = _storage._autoStartFrom {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
            }
            if let v = _storage._subscribed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
            }
            if let v = _storage._title {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
            }
            if let v = _storage._allPodcasts {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
            }
            if let v = _storage._podcastUuids {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
            }
            if let v = _storage._episodeUuids {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
            }
            if let v = _storage._audioVideo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
            }
            if let v = _storage._notDownloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
            }
            if let v = _storage._downloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
            }
            if let v = _storage._downloading {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
            }
            if let v = _storage._finished {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
            }
            if let v = _storage._partiallyPlayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
            }
            if let v = _storage._unplayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
            }
            if let v = _storage._manual {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
            }
            if let v = _storage._sortPosition {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
            }
            if let v = _storage._sortType {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
            }
            if let v = _storage._iconID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
            }
            if let v = _storage._filterHours {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
            }
            if let v = _storage._autoSkipLast {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacyRecord, rhs: Api_LegacyRecord) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._userPodcastUuid != rhs_storage._userPodcastUuid { return false }
                if _storage._episodeUuid != rhs_storage._episodeUuid { return false }
                if _storage._podcastUuid != rhs_storage._podcastUuid { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                if _storage._isDeletedModified != rhs_storage._isDeletedModified { return false }
                if _storage._duration != rhs_storage._duration { return false }
                if _storage._durationModified != rhs_storage._durationModified { return false }
                if _storage._playingStatus != rhs_storage._playingStatus { return false }
                if _storage._playingStatusModified != rhs_storage._playingStatusModified { return false }
                if _storage._playedUpTo != rhs_storage._playedUpTo { return false }
                if _storage._playedUpToModified != rhs_storage._playedUpToModified { return false }
                if _storage._starred != rhs_storage._starred { return false }
                if _storage._starredModified != rhs_storage._starredModified { return false }
                if _storage._timesStartedAt != rhs_storage._timesStartedAt { return false }
                if _storage._timeSilenceRemoval != rhs_storage._timeSilenceRemoval { return false }
                if _storage._timeVariableSpeed != rhs_storage._timeVariableSpeed { return false }
                if _storage._timeIntroSkipping != rhs_storage._timeIntroSkipping { return false }
                if _storage._timeSkipping != rhs_storage._timeSkipping { return false }
                if _storage._timeListened != rhs_storage._timeListened { return false }
                if _storage._autoStartFrom != rhs_storage._autoStartFrom { return false }
                if _storage._subscribed != rhs_storage._subscribed { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._allPodcasts != rhs_storage._allPodcasts { return false }
                if _storage._podcastUuids != rhs_storage._podcastUuids { return false }
                if _storage._episodeUuids != rhs_storage._episodeUuids { return false }
                if _storage._audioVideo != rhs_storage._audioVideo { return false }
                if _storage._notDownloaded != rhs_storage._notDownloaded { return false }
                if _storage._downloaded != rhs_storage._downloaded { return false }
                if _storage._downloading != rhs_storage._downloading { return false }
                if _storage._finished != rhs_storage._finished { return false }
                if _storage._partiallyPlayed != rhs_storage._partiallyPlayed { return false }
                if _storage._unplayed != rhs_storage._unplayed { return false }
                if _storage._manual != rhs_storage._manual { return false }
                if _storage._sortPosition != rhs_storage._sortPosition { return false }
                if _storage._sortType != rhs_storage._sortType { return false }
                if _storage._iconID != rhs_storage._iconID { return false }
                if _storage._filterHours != rhs_storage._filterHours { return false }
                if _storage._autoSkipLast != rhs_storage._autoSkipLast { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacySyncResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacySyncResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "last_modified"),
        2: .same(proto: "changes")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &lastModified)
            case 2: try decoder.decodeRepeatedMessageField(value: &changes)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !lastModified.isEmpty {
            try visitor.visitSingularStringField(value: lastModified, fieldNumber: 1)
        }
        if !changes.isEmpty {
            try visitor.visitRepeatedMessageField(value: changes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacySyncResponse, rhs: Api_LegacySyncResponse) -> Bool {
        if lhs.lastModified != rhs.lastModified { return false }
        if lhs.changes != rhs.changes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacySyncResponseRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacySyncResponseRecord"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "fields")
    ]
    
    fileprivate class _StorageClass {
        var _type = String()
        var _fields: Api_LegacyResponseRecord?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _type = source._type
            _fields = source._fields
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularStringField(value: &_storage._type)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._fields)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if !_storage._type.isEmpty {
                try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
            }
            if let v = _storage._fields {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacySyncResponseRecord, rhs: Api_LegacySyncResponseRecord) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._type != rhs_storage._type { return false }
                if _storage._fields != rhs_storage._fields { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacyResponseRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacyResponseRecord"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "uuid"),
        2: .standard(proto: "user_podcast_uuid"),
        3: .standard(proto: "episode_uuid"),
        4: .standard(proto: "podcast_uuid"),
        5: .standard(proto: "is_deleted"),
        6: .standard(proto: "is_deleted_modified"),
        7: .same(proto: "duration"),
        8: .standard(proto: "duration_modified"),
        9: .standard(proto: "playing_status"),
        10: .standard(proto: "playing_status_modified"),
        11: .standard(proto: "played_up_to"),
        12: .standard(proto: "played_up_to_modified"),
        13: .same(proto: "starred"),
        14: .standard(proto: "starred_modified"),
        15: .standard(proto: "times_started_at"),
        16: .standard(proto: "time_silence_removal"),
        17: .standard(proto: "time_variable_speed"),
        18: .standard(proto: "time_intro_skipping"),
        19: .standard(proto: "time_skipping"),
        20: .standard(proto: "time_listened"),
        21: .standard(proto: "auto_start_from"),
        22: .same(proto: "subscribed"),
        23: .same(proto: "title"),
        24: .standard(proto: "all_podcasts"),
        25: .standard(proto: "podcast_uuids"),
        26: .standard(proto: "episode_uuids"),
        27: .standard(proto: "audio_video"),
        28: .standard(proto: "not_downloaded"),
        29: .same(proto: "downloaded"),
        30: .same(proto: "downloading"),
        31: .same(proto: "finished"),
        32: .standard(proto: "partially_played"),
        33: .same(proto: "unplayed"),
        34: .same(proto: "manual"),
        35: .standard(proto: "sort_position"),
        36: .standard(proto: "sort_type"),
        37: .standard(proto: "icon_id"),
        38: .standard(proto: "filter_hours"),
        39: .standard(proto: "auto_skip_last")
    ]
    
    fileprivate class _StorageClass {
        var _uuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _userPodcastUuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _episodeUuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _podcastUuid: SwiftProtobuf.Google_Protobuf_StringValue?
        var _isDeleted: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _isDeletedModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _duration: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _durationModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playingStatus: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _playingStatusModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _playedUpTo: SwiftProtobuf.Google_Protobuf_DoubleValue?
        var _playedUpToModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _starred: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _starredModified: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timesStartedAt: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeSilenceRemoval: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeVariableSpeed: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeIntroSkipping: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeSkipping: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _timeListened: SwiftProtobuf.Google_Protobuf_Int64Value?
        var _autoStartFrom: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _subscribed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _title: SwiftProtobuf.Google_Protobuf_StringValue?
        var _allPodcasts: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _podcastUuids: SwiftProtobuf.Google_Protobuf_StringValue?
        var _episodeUuids: SwiftProtobuf.Google_Protobuf_StringValue?
        var _audioVideo: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _notDownloaded: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _downloaded: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _downloading: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _finished: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _partiallyPlayed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _unplayed: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _manual: SwiftProtobuf.Google_Protobuf_BoolValue?
        var _sortPosition: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _sortType: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _iconID: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _filterHours: SwiftProtobuf.Google_Protobuf_Int32Value?
        var _autoSkipLast: SwiftProtobuf.Google_Protobuf_Int32Value?
        
        static let defaultInstance = _StorageClass()
        
        private init() {}
        
        init(copying source: _StorageClass) {
            _uuid = source._uuid
            _userPodcastUuid = source._userPodcastUuid
            _episodeUuid = source._episodeUuid
            _podcastUuid = source._podcastUuid
            _isDeleted = source._isDeleted
            _isDeletedModified = source._isDeletedModified
            _duration = source._duration
            _durationModified = source._durationModified
            _playingStatus = source._playingStatus
            _playingStatusModified = source._playingStatusModified
            _playedUpTo = source._playedUpTo
            _playedUpToModified = source._playedUpToModified
            _starred = source._starred
            _starredModified = source._starredModified
            _timesStartedAt = source._timesStartedAt
            _timeSilenceRemoval = source._timeSilenceRemoval
            _timeVariableSpeed = source._timeVariableSpeed
            _timeIntroSkipping = source._timeIntroSkipping
            _timeSkipping = source._timeSkipping
            _timeListened = source._timeListened
            _autoStartFrom = source._autoStartFrom
            _subscribed = source._subscribed
            _title = source._title
            _allPodcasts = source._allPodcasts
            _podcastUuids = source._podcastUuids
            _episodeUuids = source._episodeUuids
            _audioVideo = source._audioVideo
            _notDownloaded = source._notDownloaded
            _downloaded = source._downloaded
            _downloading = source._downloading
            _finished = source._finished
            _partiallyPlayed = source._partiallyPlayed
            _unplayed = source._unplayed
            _manual = source._manual
            _sortPosition = source._sortPosition
            _sortType = source._sortType
            _iconID = source._iconID
            _filterHours = source._filterHours
            _autoSkipLast = source._autoSkipLast
        }
    }
    
    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                switch fieldNumber {
                case 1: try decoder.decodeSingularMessageField(value: &_storage._uuid)
                case 2: try decoder.decodeSingularMessageField(value: &_storage._userPodcastUuid)
                case 3: try decoder.decodeSingularMessageField(value: &_storage._episodeUuid)
                case 4: try decoder.decodeSingularMessageField(value: &_storage._podcastUuid)
                case 5: try decoder.decodeSingularMessageField(value: &_storage._isDeleted)
                case 6: try decoder.decodeSingularMessageField(value: &_storage._isDeletedModified)
                case 7: try decoder.decodeSingularMessageField(value: &_storage._duration)
                case 8: try decoder.decodeSingularMessageField(value: &_storage._durationModified)
                case 9: try decoder.decodeSingularMessageField(value: &_storage._playingStatus)
                case 10: try decoder.decodeSingularMessageField(value: &_storage._playingStatusModified)
                case 11: try decoder.decodeSingularMessageField(value: &_storage._playedUpTo)
                case 12: try decoder.decodeSingularMessageField(value: &_storage._playedUpToModified)
                case 13: try decoder.decodeSingularMessageField(value: &_storage._starred)
                case 14: try decoder.decodeSingularMessageField(value: &_storage._starredModified)
                case 15: try decoder.decodeSingularMessageField(value: &_storage._timesStartedAt)
                case 16: try decoder.decodeSingularMessageField(value: &_storage._timeSilenceRemoval)
                case 17: try decoder.decodeSingularMessageField(value: &_storage._timeVariableSpeed)
                case 18: try decoder.decodeSingularMessageField(value: &_storage._timeIntroSkipping)
                case 19: try decoder.decodeSingularMessageField(value: &_storage._timeSkipping)
                case 20: try decoder.decodeSingularMessageField(value: &_storage._timeListened)
                case 21: try decoder.decodeSingularMessageField(value: &_storage._autoStartFrom)
                case 22: try decoder.decodeSingularMessageField(value: &_storage._subscribed)
                case 23: try decoder.decodeSingularMessageField(value: &_storage._title)
                case 24: try decoder.decodeSingularMessageField(value: &_storage._allPodcasts)
                case 25: try decoder.decodeSingularMessageField(value: &_storage._podcastUuids)
                case 26: try decoder.decodeSingularMessageField(value: &_storage._episodeUuids)
                case 27: try decoder.decodeSingularMessageField(value: &_storage._audioVideo)
                case 28: try decoder.decodeSingularMessageField(value: &_storage._notDownloaded)
                case 29: try decoder.decodeSingularMessageField(value: &_storage._downloaded)
                case 30: try decoder.decodeSingularMessageField(value: &_storage._downloading)
                case 31: try decoder.decodeSingularMessageField(value: &_storage._finished)
                case 32: try decoder.decodeSingularMessageField(value: &_storage._partiallyPlayed)
                case 33: try decoder.decodeSingularMessageField(value: &_storage._unplayed)
                case 34: try decoder.decodeSingularMessageField(value: &_storage._manual)
                case 35: try decoder.decodeSingularMessageField(value: &_storage._sortPosition)
                case 36: try decoder.decodeSingularMessageField(value: &_storage._sortType)
                case 37: try decoder.decodeSingularMessageField(value: &_storage._iconID)
                case 38: try decoder.decodeSingularMessageField(value: &_storage._filterHours)
                case 39: try decoder.decodeSingularMessageField(value: &_storage._autoSkipLast)
                default: break
                }
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            if let v = _storage._uuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            }
            if let v = _storage._userPodcastUuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }
            if let v = _storage._episodeUuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }
            if let v = _storage._podcastUuid {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }
            if let v = _storage._isDeleted {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }
            if let v = _storage._isDeletedModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
            }
            if let v = _storage._duration {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            }
            if let v = _storage._durationModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            }
            if let v = _storage._playingStatus {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
            }
            if let v = _storage._playingStatusModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
            }
            if let v = _storage._playedUpTo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
            }
            if let v = _storage._playedUpToModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
            }
            if let v = _storage._starred {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
            }
            if let v = _storage._starredModified {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
            }
            if let v = _storage._timesStartedAt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
            }
            if let v = _storage._timeSilenceRemoval {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
            }
            if let v = _storage._timeVariableSpeed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
            }
            if let v = _storage._timeIntroSkipping {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
            }
            if let v = _storage._timeSkipping {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
            }
            if let v = _storage._timeListened {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
            }
            if let v = _storage._autoStartFrom {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
            }
            if let v = _storage._subscribed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
            }
            if let v = _storage._title {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
            }
            if let v = _storage._allPodcasts {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
            }
            if let v = _storage._podcastUuids {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
            }
            if let v = _storage._episodeUuids {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
            }
            if let v = _storage._audioVideo {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
            }
            if let v = _storage._notDownloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
            }
            if let v = _storage._downloaded {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
            }
            if let v = _storage._downloading {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
            }
            if let v = _storage._finished {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
            }
            if let v = _storage._partiallyPlayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
            }
            if let v = _storage._unplayed {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
            }
            if let v = _storage._manual {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
            }
            if let v = _storage._sortPosition {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
            }
            if let v = _storage._sortType {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
            }
            if let v = _storage._iconID {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
            }
            if let v = _storage._filterHours {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
            }
            if let v = _storage._autoSkipLast {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
            }
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacyResponseRecord, rhs: Api_LegacyResponseRecord) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                let _storage = _args.0
                let rhs_storage = _args.1
                if _storage._uuid != rhs_storage._uuid { return false }
                if _storage._userPodcastUuid != rhs_storage._userPodcastUuid { return false }
                if _storage._episodeUuid != rhs_storage._episodeUuid { return false }
                if _storage._podcastUuid != rhs_storage._podcastUuid { return false }
                if _storage._isDeleted != rhs_storage._isDeleted { return false }
                if _storage._isDeletedModified != rhs_storage._isDeletedModified { return false }
                if _storage._duration != rhs_storage._duration { return false }
                if _storage._durationModified != rhs_storage._durationModified { return false }
                if _storage._playingStatus != rhs_storage._playingStatus { return false }
                if _storage._playingStatusModified != rhs_storage._playingStatusModified { return false }
                if _storage._playedUpTo != rhs_storage._playedUpTo { return false }
                if _storage._playedUpToModified != rhs_storage._playedUpToModified { return false }
                if _storage._starred != rhs_storage._starred { return false }
                if _storage._starredModified != rhs_storage._starredModified { return false }
                if _storage._timesStartedAt != rhs_storage._timesStartedAt { return false }
                if _storage._timeSilenceRemoval != rhs_storage._timeSilenceRemoval { return false }
                if _storage._timeVariableSpeed != rhs_storage._timeVariableSpeed { return false }
                if _storage._timeIntroSkipping != rhs_storage._timeIntroSkipping { return false }
                if _storage._timeSkipping != rhs_storage._timeSkipping { return false }
                if _storage._timeListened != rhs_storage._timeListened { return false }
                if _storage._autoStartFrom != rhs_storage._autoStartFrom { return false }
                if _storage._subscribed != rhs_storage._subscribed { return false }
                if _storage._title != rhs_storage._title { return false }
                if _storage._allPodcasts != rhs_storage._allPodcasts { return false }
                if _storage._podcastUuids != rhs_storage._podcastUuids { return false }
                if _storage._episodeUuids != rhs_storage._episodeUuids { return false }
                if _storage._audioVideo != rhs_storage._audioVideo { return false }
                if _storage._notDownloaded != rhs_storage._notDownloaded { return false }
                if _storage._downloaded != rhs_storage._downloaded { return false }
                if _storage._downloading != rhs_storage._downloading { return false }
                if _storage._finished != rhs_storage._finished { return false }
                if _storage._partiallyPlayed != rhs_storage._partiallyPlayed { return false }
                if _storage._unplayed != rhs_storage._unplayed { return false }
                if _storage._manual != rhs_storage._manual { return false }
                if _storage._sortPosition != rhs_storage._sortPosition { return false }
                if _storage._sortType != rhs_storage._sortType { return false }
                if _storage._iconID != rhs_storage._iconID { return false }
                if _storage._filterHours != rhs_storage._filterHours { return false }
                if _storage._autoSkipLast != rhs_storage._autoSkipLast { return false }
                return true
            }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_LegacyStatsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LegacyStatsResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "times_started_at"),
        2: .standard(proto: "time_silence_removal"),
        3: .standard(proto: "time_variable_speed"),
        4: .standard(proto: "time_intro_skipping"),
        5: .standard(proto: "time_skipping"),
        6: .standard(proto: "time_listened")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &timesStartedAt)
            case 2: try decoder.decodeSingularInt32Field(value: &timeSilenceRemoval)
            case 3: try decoder.decodeSingularInt32Field(value: &timeVariableSpeed)
            case 4: try decoder.decodeSingularInt32Field(value: &timeIntroSkipping)
            case 5: try decoder.decodeSingularInt32Field(value: &timeSkipping)
            case 6: try decoder.decodeSingularInt32Field(value: &timeListened)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if timesStartedAt != 0 {
            try visitor.visitSingularInt32Field(value: timesStartedAt, fieldNumber: 1)
        }
        if timeSilenceRemoval != 0 {
            try visitor.visitSingularInt32Field(value: timeSilenceRemoval, fieldNumber: 2)
        }
        if timeVariableSpeed != 0 {
            try visitor.visitSingularInt32Field(value: timeVariableSpeed, fieldNumber: 3)
        }
        if timeIntroSkipping != 0 {
            try visitor.visitSingularInt32Field(value: timeIntroSkipping, fieldNumber: 4)
        }
        if timeSkipping != 0 {
            try visitor.visitSingularInt32Field(value: timeSkipping, fieldNumber: 5)
        }
        if timeListened != 0 {
            try visitor.visitSingularInt32Field(value: timeListened, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_LegacyStatsResponse, rhs: Api_LegacyStatsResponse) -> Bool {
        if lhs.timesStartedAt != rhs.timesStartedAt { return false }
        if lhs.timeSilenceRemoval != rhs.timeSilenceRemoval { return false }
        if lhs.timeVariableSpeed != rhs.timeVariableSpeed { return false }
        if lhs.timeIntroSkipping != rhs.timeIntroSkipping { return false }
        if lhs.timeSkipping != rhs.timeSkipping { return false }
        if lhs.timeListened != rhs.timeListened { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_PromotionCode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PromotionCode"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &code)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !code.isEmpty {
            try visitor.visitSingularStringField(value: code, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_PromotionCode, rhs: Api_PromotionCode) -> Bool {
        if lhs.code != rhs.code { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Api_Promotion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Promotion"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code"),
        2: .same(proto: "description"),
        3: .standard(proto: "starts_at"),
        4: .standard(proto: "ends_at")
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &code)
            case 2: try decoder.decodeSingularStringField(value: &description_p)
            case 3: try decoder.decodeSingularStringField(value: &startsAt)
            case 4: try decoder.decodeSingularStringField(value: &endsAt)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !code.isEmpty {
            try visitor.visitSingularStringField(value: code, fieldNumber: 1)
        }
        if !description_p.isEmpty {
            try visitor.visitSingularStringField(value: description_p, fieldNumber: 2)
        }
        if !startsAt.isEmpty {
            try visitor.visitSingularStringField(value: startsAt, fieldNumber: 3)
        }
        if !endsAt.isEmpty {
            try visitor.visitSingularStringField(value: endsAt, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func == (lhs: Api_Promotion, rhs: Api_Promotion) -> Bool {
        if lhs.code != rhs.code { return false }
        if lhs.description_p != rhs.description_p { return false }
        if lhs.startsAt != rhs.startsAt { return false }
        if lhs.endsAt != rhs.endsAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
